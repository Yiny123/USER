// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 1385:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class GetQRCodeRsp extends Message<GetQRCodeRsp, GetQRCodeRsp.Builder> {
  public static final ProtoAdapter<GetQRCodeRsp> ADAPTER = new ProtoAdapter_GetQRCodeRsp();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_QRCODEURI = "";

  public static final String DEFAULT_ACCESSTOKEN = "";

  public static final Long DEFAULT_TIME = 0L;

  /**
   * 二维码链接
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String qrcodeURI;

  /**
   * token
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String accessToken;

  /**
   * 倒计时间（分钟为单位）
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long time;

  public GetQRCodeRsp(String qrcodeURI, String accessToken, Long time) {
    this(qrcodeURI, accessToken, time, ByteString.EMPTY);
  }

  public GetQRCodeRsp(String qrcodeURI, String accessToken, Long time, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.qrcodeURI = qrcodeURI;
    this.accessToken = accessToken;
    this.time = time;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.qrcodeURI = qrcodeURI;
    builder.accessToken = accessToken;
    builder.time = time;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetQRCodeRsp)) return false;
    GetQRCodeRsp o = (GetQRCodeRsp) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(qrcodeURI, o.qrcodeURI)
        && Internal.equals(accessToken, o.accessToken)
        && Internal.equals(time, o.time);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (qrcodeURI != null ? qrcodeURI.hashCode() : 0);
      result = result * 37 + (accessToken != null ? accessToken.hashCode() : 0);
      result = result * 37 + (time != null ? time.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (qrcodeURI != null) builder.append(", qrcodeURI=").append(qrcodeURI);
    if (accessToken != null) builder.append(", accessToken=").append(accessToken);
    if (time != null) builder.append(", time=").append(time);
    return builder.replace(0, 2, "GetQRCodeRsp{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetQRCodeRsp, Builder> {
    public String qrcodeURI;

    public String accessToken;

    public Long time;

    public Builder() {
    }

    /**
     * 二维码链接
     */
    public Builder qrcodeURI(String qrcodeURI) {
      this.qrcodeURI = qrcodeURI;
      return this;
    }

    /**
     * token
     */
    public Builder accessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    /**
     * 倒计时间（分钟为单位）
     */
    public Builder time(Long time) {
      this.time = time;
      return this;
    }

    @Override
    public GetQRCodeRsp build() {
      return new GetQRCodeRsp(qrcodeURI, accessToken, time, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetQRCodeRsp extends ProtoAdapter<GetQRCodeRsp> {
    ProtoAdapter_GetQRCodeRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetQRCodeRsp.class);
    }

    @Override
    public int encodedSize(GetQRCodeRsp value) {
      return (value.qrcodeURI != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.qrcodeURI) : 0)
          + (value.accessToken != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.accessToken) : 0)
          + (value.time != null ? ProtoAdapter.INT64.encodedSizeWithTag(3, value.time) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetQRCodeRsp value) throws IOException {
      if (value.qrcodeURI != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.qrcodeURI);
      if (value.accessToken != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.accessToken);
      if (value.time != null) ProtoAdapter.INT64.encodeWithTag(writer, 3, value.time);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetQRCodeRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.qrcodeURI(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.accessToken(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.time(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetQRCodeRsp redact(GetQRCodeRsp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
