// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 1323:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 变更服务类型
 */
public final class UpdateType extends Message<UpdateType, UpdateType.Builder> {
  public static final ProtoAdapter<UpdateType> ADAPTER = new ProtoAdapter_UpdateType();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_UPDATETYPEID = 0;

  public static final String DEFAULT_UPDATETYPESTR = "";

  /**
   * 变更id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer updateTypeId;

  /**
   * 变更文案
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String updateTypeStr;

  public UpdateType(Integer updateTypeId, String updateTypeStr) {
    this(updateTypeId, updateTypeStr, ByteString.EMPTY);
  }

  public UpdateType(Integer updateTypeId, String updateTypeStr, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.updateTypeId = updateTypeId;
    this.updateTypeStr = updateTypeStr;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.updateTypeId = updateTypeId;
    builder.updateTypeStr = updateTypeStr;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UpdateType)) return false;
    UpdateType o = (UpdateType) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(updateTypeId, o.updateTypeId)
        && Internal.equals(updateTypeStr, o.updateTypeStr);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (updateTypeId != null ? updateTypeId.hashCode() : 0);
      result = result * 37 + (updateTypeStr != null ? updateTypeStr.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (updateTypeId != null) builder.append(", updateTypeId=").append(updateTypeId);
    if (updateTypeStr != null) builder.append(", updateTypeStr=").append(updateTypeStr);
    return builder.replace(0, 2, "UpdateType{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<UpdateType, Builder> {
    public Integer updateTypeId;

    public String updateTypeStr;

    public Builder() {
    }

    /**
     * 变更id
     */
    public Builder updateTypeId(Integer updateTypeId) {
      this.updateTypeId = updateTypeId;
      return this;
    }

    /**
     * 变更文案
     */
    public Builder updateTypeStr(String updateTypeStr) {
      this.updateTypeStr = updateTypeStr;
      return this;
    }

    @Override
    public UpdateType build() {
      return new UpdateType(updateTypeId, updateTypeStr, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UpdateType extends ProtoAdapter<UpdateType> {
    ProtoAdapter_UpdateType() {
      super(FieldEncoding.LENGTH_DELIMITED, UpdateType.class);
    }

    @Override
    public int encodedSize(UpdateType value) {
      return (value.updateTypeId != null ? ProtoAdapter.UINT32.encodedSizeWithTag(1, value.updateTypeId) : 0)
          + (value.updateTypeStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.updateTypeStr) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UpdateType value) throws IOException {
      if (value.updateTypeId != null) ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.updateTypeId);
      if (value.updateTypeStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.updateTypeStr);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UpdateType decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.updateTypeId(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.updateTypeStr(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UpdateType redact(UpdateType value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
