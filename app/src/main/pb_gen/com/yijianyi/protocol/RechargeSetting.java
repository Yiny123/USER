// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Model.proto at 200:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 充值配置
 */
public final class RechargeSetting extends Message<RechargeSetting, RechargeSetting.Builder> {
  public static final ProtoAdapter<RechargeSetting> ADAPTER = new ProtoAdapter_RechargeSetting();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ID = 0;

  public static final String DEFAULT_NAME = "";

  public static final Integer DEFAULT_FEE = 0;

  public static final Integer DEFAULT_PRESENT = 0;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final String DEFAULT_FEESTR = "";

  public static final String DEFAULT_PRESENTSTR = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer id;

  /**
   * 充值描述
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  /**
   * 充值金额
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer fee;

  /**
   * 赠送金额
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer present;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 充值金额
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String feeStr;

  /**
   * 赠送金额
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String presentStr;

  public RechargeSetting(Integer id, String name, Integer fee, Integer present, Long createTime, String feeStr, String presentStr) {
    this(id, name, fee, present, createTime, feeStr, presentStr, ByteString.EMPTY);
  }

  public RechargeSetting(Integer id, String name, Integer fee, Integer present, Long createTime, String feeStr, String presentStr, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.name = name;
    this.fee = fee;
    this.present = present;
    this.createTime = createTime;
    this.feeStr = feeStr;
    this.presentStr = presentStr;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.name = name;
    builder.fee = fee;
    builder.present = present;
    builder.createTime = createTime;
    builder.feeStr = feeStr;
    builder.presentStr = presentStr;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof RechargeSetting)) return false;
    RechargeSetting o = (RechargeSetting) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(name, o.name)
        && Internal.equals(fee, o.fee)
        && Internal.equals(present, o.present)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(feeStr, o.feeStr)
        && Internal.equals(presentStr, o.presentStr);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (fee != null ? fee.hashCode() : 0);
      result = result * 37 + (present != null ? present.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (feeStr != null ? feeStr.hashCode() : 0);
      result = result * 37 + (presentStr != null ? presentStr.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (name != null) builder.append(", name=").append(name);
    if (fee != null) builder.append(", fee=").append(fee);
    if (present != null) builder.append(", present=").append(present);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (feeStr != null) builder.append(", feeStr=").append(feeStr);
    if (presentStr != null) builder.append(", presentStr=").append(presentStr);
    return builder.replace(0, 2, "RechargeSetting{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<RechargeSetting, Builder> {
    public Integer id;

    public String name;

    public Integer fee;

    public Integer present;

    public Long createTime;

    public String feeStr;

    public String presentStr;

    public Builder() {
    }

    public Builder id(Integer id) {
      this.id = id;
      return this;
    }

    /**
     * 充值描述
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * 充值金额
     */
    public Builder fee(Integer fee) {
      this.fee = fee;
      return this;
    }

    /**
     * 赠送金额
     */
    public Builder present(Integer present) {
      this.present = present;
      return this;
    }

    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 充值金额
     */
    public Builder feeStr(String feeStr) {
      this.feeStr = feeStr;
      return this;
    }

    /**
     * 赠送金额
     */
    public Builder presentStr(String presentStr) {
      this.presentStr = presentStr;
      return this;
    }

    @Override
    public RechargeSetting build() {
      return new RechargeSetting(id, name, fee, present, createTime, feeStr, presentStr, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_RechargeSetting extends ProtoAdapter<RechargeSetting> {
    ProtoAdapter_RechargeSetting() {
      super(FieldEncoding.LENGTH_DELIMITED, RechargeSetting.class);
    }

    @Override
    public int encodedSize(RechargeSetting value) {
      return (value.id != null ? ProtoAdapter.UINT32.encodedSizeWithTag(1, value.id) : 0)
          + (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.name) : 0)
          + (value.fee != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.fee) : 0)
          + (value.present != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.present) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(5, value.createTime) : 0)
          + (value.feeStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.feeStr) : 0)
          + (value.presentStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.presentStr) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, RechargeSetting value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.id);
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      if (value.fee != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.fee);
      if (value.present != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.present);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.createTime);
      if (value.feeStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.feeStr);
      if (value.presentStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.presentStr);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public RechargeSetting decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.fee(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.present(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.feeStr(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.presentStr(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public RechargeSetting redact(RechargeSetting value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
