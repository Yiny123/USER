// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 697:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class PermissionMenu extends Message<PermissionMenu, PermissionMenu.Builder> {
  public static final ProtoAdapter<PermissionMenu> ADAPTER = new ProtoAdapter_PermissionMenu();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_ICON = "";

  /**
   * 菜单名
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  @WireField(
      tag = 2,
      adapter = "com.yijianyi.protocol.PermissionMenuItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PermissionMenuItem> menu;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String icon;

  public PermissionMenu(String name, List<PermissionMenuItem> menu, String icon) {
    this(name, menu, icon, ByteString.EMPTY);
  }

  public PermissionMenu(String name, List<PermissionMenuItem> menu, String icon, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.name = name;
    this.menu = Internal.immutableCopyOf("menu", menu);
    this.icon = icon;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.menu = Internal.copyOf("menu", menu);
    builder.icon = icon;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PermissionMenu)) return false;
    PermissionMenu o = (PermissionMenu) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(name, o.name)
        && menu.equals(o.menu)
        && Internal.equals(icon, o.icon);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + menu.hashCode();
      result = result * 37 + (icon != null ? icon.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(name);
    if (!menu.isEmpty()) builder.append(", menu=").append(menu);
    if (icon != null) builder.append(", icon=").append(icon);
    return builder.replace(0, 2, "PermissionMenu{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PermissionMenu, Builder> {
    public String name;

    public List<PermissionMenuItem> menu;

    public String icon;

    public Builder() {
      menu = Internal.newMutableList();
    }

    /**
     * 菜单名
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder menu(List<PermissionMenuItem> menu) {
      Internal.checkElementsNotNull(menu);
      this.menu = menu;
      return this;
    }

    public Builder icon(String icon) {
      this.icon = icon;
      return this;
    }

    @Override
    public PermissionMenu build() {
      return new PermissionMenu(name, menu, icon, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PermissionMenu extends ProtoAdapter<PermissionMenu> {
    ProtoAdapter_PermissionMenu() {
      super(FieldEncoding.LENGTH_DELIMITED, PermissionMenu.class);
    }

    @Override
    public int encodedSize(PermissionMenu value) {
      return (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) : 0)
          + PermissionMenuItem.ADAPTER.asRepeated().encodedSizeWithTag(2, value.menu)
          + (value.icon != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.icon) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PermissionMenu value) throws IOException {
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      PermissionMenuItem.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.menu);
      if (value.icon != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.icon);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PermissionMenu decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.menu.add(PermissionMenuItem.ADAPTER.decode(reader)); break;
          case 3: builder.icon(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PermissionMenu redact(PermissionMenu value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.menu, PermissionMenuItem.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
