// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 217:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import java.util.Map;
import okio.ByteString;

public final class GetRoomListRsp extends Message<GetRoomListRsp, GetRoomListRsp.Builder> {
  public static final ProtoAdapter<GetRoomListRsp> ADAPTER = new ProtoAdapter_GetRoomListRsp();

  private static final long serialVersionUID = 0L;

  /**
   * 房间列表
   */
  @WireField(
      tag = 1,
      adapter = "com.yijianyi.protocol.RoomModel#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<RoomModel> roomList;

  /**
   * 房间和床的map
   */
  @WireField(
      tag = 2,
      keyAdapter = "com.squareup.wire.ProtoAdapter#UINT64",
      adapter = "com.yijianyi.protocol.BedModelList#ADAPTER"
  )
  public final Map<Long, BedModelList> map;

  public GetRoomListRsp(List<RoomModel> roomList, Map<Long, BedModelList> map) {
    this(roomList, map, ByteString.EMPTY);
  }

  public GetRoomListRsp(List<RoomModel> roomList, Map<Long, BedModelList> map, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.roomList = Internal.immutableCopyOf("roomList", roomList);
    this.map = Internal.immutableCopyOf("map", map);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.roomList = Internal.copyOf("roomList", roomList);
    builder.map = Internal.copyOf("map", map);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetRoomListRsp)) return false;
    GetRoomListRsp o = (GetRoomListRsp) other;
    return unknownFields().equals(o.unknownFields())
        && roomList.equals(o.roomList)
        && map.equals(o.map);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + roomList.hashCode();
      result = result * 37 + map.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!roomList.isEmpty()) builder.append(", roomList=").append(roomList);
    if (!map.isEmpty()) builder.append(", map=").append(map);
    return builder.replace(0, 2, "GetRoomListRsp{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetRoomListRsp, Builder> {
    public List<RoomModel> roomList;

    public Map<Long, BedModelList> map;

    public Builder() {
      roomList = Internal.newMutableList();
      map = Internal.newMutableMap();
    }

    /**
     * 房间列表
     */
    public Builder roomList(List<RoomModel> roomList) {
      Internal.checkElementsNotNull(roomList);
      this.roomList = roomList;
      return this;
    }

    /**
     * 房间和床的map
     */
    public Builder map(Map<Long, BedModelList> map) {
      Internal.checkElementsNotNull(map);
      this.map = map;
      return this;
    }

    @Override
    public GetRoomListRsp build() {
      return new GetRoomListRsp(roomList, map, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetRoomListRsp extends ProtoAdapter<GetRoomListRsp> {
    private final ProtoAdapter<Map<Long, BedModelList>> map = ProtoAdapter.newMapAdapter(ProtoAdapter.UINT64, BedModelList.ADAPTER);

    ProtoAdapter_GetRoomListRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetRoomListRsp.class);
    }

    @Override
    public int encodedSize(GetRoomListRsp value) {
      return RoomModel.ADAPTER.asRepeated().encodedSizeWithTag(1, value.roomList)
          + map.encodedSizeWithTag(2, value.map)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetRoomListRsp value) throws IOException {
      RoomModel.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.roomList);
      map.encodeWithTag(writer, 2, value.map);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetRoomListRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.roomList.add(RoomModel.ADAPTER.decode(reader)); break;
          case 2: builder.map.putAll(map.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetRoomListRsp redact(GetRoomListRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.roomList, RoomModel.ADAPTER);
      Internal.redactElements(builder.map, BedModelList.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
