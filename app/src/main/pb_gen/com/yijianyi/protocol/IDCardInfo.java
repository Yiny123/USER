// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 284:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 识别身份信息的proto
 */
public final class IDCardInfo extends Message<IDCardInfo, IDCardInfo.Builder> {
  public static final ProtoAdapter<IDCardInfo> ADAPTER = new ProtoAdapter_IDCardInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ISSUED_BY = "";

  public static final Long DEFAULT_IDCARDEXPIREDDATE = 0L;

  public static final Integer DEFAULT_SIDE = 0;

  public static final Integer DEFAULT_SEX = 0;

  public static final String DEFAULT_FULLNAME = "";

  public static final String DEFAULT_IDCARD = "";

  public static final String DEFAULT_BIRTHDAY = "";

  public static final String DEFAULT_NATIVEPLACE = "";

  public static final String DEFAULT_NATION = "";

  public static final Integer DEFAULT_AGE = 0;

  /**
   * 某某公安局发行
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String issued_by;

  /**
   * 身份证过期时间 该属性叫valid_date  2011.05.13-2021.05.13
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long idcardExpiredDate;

  /**
   * 正反面 1  正面  2 反面
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer side;

  /**
   * 性别 1- 男 2-女  json中该属性叫gender
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sex;

  /**
   * 全名 json中该属性叫name
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String fullName;

  /**
   * 身份证号码 json中该属性叫做id_card_number
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcard;

  /**
   * 生日 格式 1982-07-12
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String birthday;

  /**
   * 籍贯 json中该属性叫address
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nativeplace;

  /**
   * 民族 json中该属性叫race
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nation;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer age;

  public IDCardInfo(String issued_by, Long idcardExpiredDate, Integer side, Integer sex, String fullName, String idcard, String birthday, String nativeplace, String nation, Integer age) {
    this(issued_by, idcardExpiredDate, side, sex, fullName, idcard, birthday, nativeplace, nation, age, ByteString.EMPTY);
  }

  public IDCardInfo(String issued_by, Long idcardExpiredDate, Integer side, Integer sex, String fullName, String idcard, String birthday, String nativeplace, String nation, Integer age, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.issued_by = issued_by;
    this.idcardExpiredDate = idcardExpiredDate;
    this.side = side;
    this.sex = sex;
    this.fullName = fullName;
    this.idcard = idcard;
    this.birthday = birthday;
    this.nativeplace = nativeplace;
    this.nation = nation;
    this.age = age;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.issued_by = issued_by;
    builder.idcardExpiredDate = idcardExpiredDate;
    builder.side = side;
    builder.sex = sex;
    builder.fullName = fullName;
    builder.idcard = idcard;
    builder.birthday = birthday;
    builder.nativeplace = nativeplace;
    builder.nation = nation;
    builder.age = age;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof IDCardInfo)) return false;
    IDCardInfo o = (IDCardInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(issued_by, o.issued_by)
        && Internal.equals(idcardExpiredDate, o.idcardExpiredDate)
        && Internal.equals(side, o.side)
        && Internal.equals(sex, o.sex)
        && Internal.equals(fullName, o.fullName)
        && Internal.equals(idcard, o.idcard)
        && Internal.equals(birthday, o.birthday)
        && Internal.equals(nativeplace, o.nativeplace)
        && Internal.equals(nation, o.nation)
        && Internal.equals(age, o.age);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (issued_by != null ? issued_by.hashCode() : 0);
      result = result * 37 + (idcardExpiredDate != null ? idcardExpiredDate.hashCode() : 0);
      result = result * 37 + (side != null ? side.hashCode() : 0);
      result = result * 37 + (sex != null ? sex.hashCode() : 0);
      result = result * 37 + (fullName != null ? fullName.hashCode() : 0);
      result = result * 37 + (idcard != null ? idcard.hashCode() : 0);
      result = result * 37 + (birthday != null ? birthday.hashCode() : 0);
      result = result * 37 + (nativeplace != null ? nativeplace.hashCode() : 0);
      result = result * 37 + (nation != null ? nation.hashCode() : 0);
      result = result * 37 + (age != null ? age.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (issued_by != null) builder.append(", issued_by=").append(issued_by);
    if (idcardExpiredDate != null) builder.append(", idcardExpiredDate=").append(idcardExpiredDate);
    if (side != null) builder.append(", side=").append(side);
    if (sex != null) builder.append(", sex=").append(sex);
    if (fullName != null) builder.append(", fullName=").append(fullName);
    if (idcard != null) builder.append(", idcard=").append(idcard);
    if (birthday != null) builder.append(", birthday=").append(birthday);
    if (nativeplace != null) builder.append(", nativeplace=").append(nativeplace);
    if (nation != null) builder.append(", nation=").append(nation);
    if (age != null) builder.append(", age=").append(age);
    return builder.replace(0, 2, "IDCardInfo{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<IDCardInfo, Builder> {
    public String issued_by;

    public Long idcardExpiredDate;

    public Integer side;

    public Integer sex;

    public String fullName;

    public String idcard;

    public String birthday;

    public String nativeplace;

    public String nation;

    public Integer age;

    public Builder() {
    }

    /**
     * 某某公安局发行
     */
    public Builder issued_by(String issued_by) {
      this.issued_by = issued_by;
      return this;
    }

    /**
     * 身份证过期时间 该属性叫valid_date  2011.05.13-2021.05.13
     */
    public Builder idcardExpiredDate(Long idcardExpiredDate) {
      this.idcardExpiredDate = idcardExpiredDate;
      return this;
    }

    /**
     * 正反面 1  正面  2 反面
     */
    public Builder side(Integer side) {
      this.side = side;
      return this;
    }

    /**
     * 性别 1- 男 2-女  json中该属性叫gender
     */
    public Builder sex(Integer sex) {
      this.sex = sex;
      return this;
    }

    /**
     * 全名 json中该属性叫name
     */
    public Builder fullName(String fullName) {
      this.fullName = fullName;
      return this;
    }

    /**
     * 身份证号码 json中该属性叫做id_card_number
     */
    public Builder idcard(String idcard) {
      this.idcard = idcard;
      return this;
    }

    /**
     * 生日 格式 1982-07-12
     */
    public Builder birthday(String birthday) {
      this.birthday = birthday;
      return this;
    }

    /**
     * 籍贯 json中该属性叫address
     */
    public Builder nativeplace(String nativeplace) {
      this.nativeplace = nativeplace;
      return this;
    }

    /**
     * 民族 json中该属性叫race
     */
    public Builder nation(String nation) {
      this.nation = nation;
      return this;
    }

    public Builder age(Integer age) {
      this.age = age;
      return this;
    }

    @Override
    public IDCardInfo build() {
      return new IDCardInfo(issued_by, idcardExpiredDate, side, sex, fullName, idcard, birthday, nativeplace, nation, age, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_IDCardInfo extends ProtoAdapter<IDCardInfo> {
    ProtoAdapter_IDCardInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, IDCardInfo.class);
    }

    @Override
    public int encodedSize(IDCardInfo value) {
      return (value.issued_by != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.issued_by) : 0)
          + (value.idcardExpiredDate != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.idcardExpiredDate) : 0)
          + (value.side != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.side) : 0)
          + (value.sex != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.sex) : 0)
          + (value.fullName != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.fullName) : 0)
          + (value.idcard != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.idcard) : 0)
          + (value.birthday != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.birthday) : 0)
          + (value.nativeplace != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.nativeplace) : 0)
          + (value.nation != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.nation) : 0)
          + (value.age != null ? ProtoAdapter.UINT32.encodedSizeWithTag(10, value.age) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, IDCardInfo value) throws IOException {
      if (value.issued_by != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.issued_by);
      if (value.idcardExpiredDate != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.idcardExpiredDate);
      if (value.side != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.side);
      if (value.sex != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.sex);
      if (value.fullName != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.fullName);
      if (value.idcard != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.idcard);
      if (value.birthday != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.birthday);
      if (value.nativeplace != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.nativeplace);
      if (value.nation != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.nation);
      if (value.age != null) ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.age);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public IDCardInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.issued_by(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.idcardExpiredDate(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.side(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.sex(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.fullName(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.idcard(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.birthday(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.nativeplace(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.nation(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.age(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public IDCardInfo redact(IDCardInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
