// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 160:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 用户亲属请求
 */
public final class KinsfolkReq extends Message<KinsfolkReq, KinsfolkReq.Builder> {
  public static final ProtoAdapter<KinsfolkReq> ADAPTER = new ProtoAdapter_KinsfolkReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_KINSID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final Integer DEFAULT_AGE = 0;

  public static final Integer DEFAULT_SEX = 0;

  public static final String DEFAULT_RELATION = "";

  public static final String DEFAULT_IDCARDNO = "";

  public static final String DEFAULT_HEIGHT = "";

  public static final String DEFAULT_WEIGHT = "";

  public static final String DEFAULT_PHYSICALSTATE = "";

  public static final String DEFAULT_IDPIC = "";

  public static final String DEFAULT_EXTRAINFO = "";

  public static final String DEFAULT_MEDICALNO = "";

  public static final Integer DEFAULT_ACTABILITY = 0;

  public static final Boolean DEFAULT_FIRSTADD = false;

  public static final Integer DEFAULT_MEDICARETYPE = 0;

  public static final String DEFAULT_HEALTHCARENO = "";

  public static final Long DEFAULT_USERID = 0L;

  public static final String DEFAULT_IDPIC2 = "";

  public static final String DEFAULT_HEALTHCAREIMG = "";

  public static final String DEFAULT_KINSFOLKIMG = "";

  public static final Integer DEFAULT_KINSTYPE = 0;

  public static final Integer DEFAULT_STAFFTYPE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kinsId;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer age;

  /**
   * 1 - 男, 2 - 女
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sex;

  /**
   * 亲属关系
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String relation;

  /**
   * 身份证号
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idCardNo;

  /**
   * 身高
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String height;

  /**
   * 体重
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String weight;

  /**
   * 身体情况
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String physicalState;

  /**
   * 身份证图片ID
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idPic;

  /**
   * 补充说明
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String extraInfo;

  /**
   * 医院就诊卡号
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String medicalNO;

  /**
   * 常用语言 1 - 普通话 2 - 粤语 3-客家 4-潮汕
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> language;

  /**
   * 行动能力 1-自理 2-半失能 3-失能
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer actAbility;

  /**
   * 首次添加亲属
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean firstAdd;

  /**
   * 医保类型
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer medicareType;

  /**
   * 医保卡号
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String healthCareNO;

  /**
   * 用户id
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 身份证反面id
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idPic2;

  /**
   * 医保卡信息照片
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String healthCareImg;

  /**
   * 参保人照片
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kinsfolkImg;

  /**
   * 添加类型 0-亲属 1-参保人
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer kinsType;

  /**
   * 人员类型 0-未设置 1-在职 2-离职
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer staffType;

  public KinsfolkReq(Long kinsId, String name, Integer age, Integer sex, String relation, String idCardNo, String height, String weight, String physicalState, String idPic, String extraInfo, String medicalNO, List<Integer> language, Integer actAbility, Boolean firstAdd, Integer medicareType, String healthCareNO, Long userId, String idPic2, String healthCareImg, String kinsfolkImg, Integer kinsType, Integer staffType) {
    this(kinsId, name, age, sex, relation, idCardNo, height, weight, physicalState, idPic, extraInfo, medicalNO, language, actAbility, firstAdd, medicareType, healthCareNO, userId, idPic2, healthCareImg, kinsfolkImg, kinsType, staffType, ByteString.EMPTY);
  }

  public KinsfolkReq(Long kinsId, String name, Integer age, Integer sex, String relation, String idCardNo, String height, String weight, String physicalState, String idPic, String extraInfo, String medicalNO, List<Integer> language, Integer actAbility, Boolean firstAdd, Integer medicareType, String healthCareNO, Long userId, String idPic2, String healthCareImg, String kinsfolkImg, Integer kinsType, Integer staffType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.kinsId = kinsId;
    this.name = name;
    this.age = age;
    this.sex = sex;
    this.relation = relation;
    this.idCardNo = idCardNo;
    this.height = height;
    this.weight = weight;
    this.physicalState = physicalState;
    this.idPic = idPic;
    this.extraInfo = extraInfo;
    this.medicalNO = medicalNO;
    this.language = Internal.immutableCopyOf("language", language);
    this.actAbility = actAbility;
    this.firstAdd = firstAdd;
    this.medicareType = medicareType;
    this.healthCareNO = healthCareNO;
    this.userId = userId;
    this.idPic2 = idPic2;
    this.healthCareImg = healthCareImg;
    this.kinsfolkImg = kinsfolkImg;
    this.kinsType = kinsType;
    this.staffType = staffType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.kinsId = kinsId;
    builder.name = name;
    builder.age = age;
    builder.sex = sex;
    builder.relation = relation;
    builder.idCardNo = idCardNo;
    builder.height = height;
    builder.weight = weight;
    builder.physicalState = physicalState;
    builder.idPic = idPic;
    builder.extraInfo = extraInfo;
    builder.medicalNO = medicalNO;
    builder.language = Internal.copyOf("language", language);
    builder.actAbility = actAbility;
    builder.firstAdd = firstAdd;
    builder.medicareType = medicareType;
    builder.healthCareNO = healthCareNO;
    builder.userId = userId;
    builder.idPic2 = idPic2;
    builder.healthCareImg = healthCareImg;
    builder.kinsfolkImg = kinsfolkImg;
    builder.kinsType = kinsType;
    builder.staffType = staffType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof KinsfolkReq)) return false;
    KinsfolkReq o = (KinsfolkReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(kinsId, o.kinsId)
        && Internal.equals(name, o.name)
        && Internal.equals(age, o.age)
        && Internal.equals(sex, o.sex)
        && Internal.equals(relation, o.relation)
        && Internal.equals(idCardNo, o.idCardNo)
        && Internal.equals(height, o.height)
        && Internal.equals(weight, o.weight)
        && Internal.equals(physicalState, o.physicalState)
        && Internal.equals(idPic, o.idPic)
        && Internal.equals(extraInfo, o.extraInfo)
        && Internal.equals(medicalNO, o.medicalNO)
        && language.equals(o.language)
        && Internal.equals(actAbility, o.actAbility)
        && Internal.equals(firstAdd, o.firstAdd)
        && Internal.equals(medicareType, o.medicareType)
        && Internal.equals(healthCareNO, o.healthCareNO)
        && Internal.equals(userId, o.userId)
        && Internal.equals(idPic2, o.idPic2)
        && Internal.equals(healthCareImg, o.healthCareImg)
        && Internal.equals(kinsfolkImg, o.kinsfolkImg)
        && Internal.equals(kinsType, o.kinsType)
        && Internal.equals(staffType, o.staffType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (kinsId != null ? kinsId.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (age != null ? age.hashCode() : 0);
      result = result * 37 + (sex != null ? sex.hashCode() : 0);
      result = result * 37 + (relation != null ? relation.hashCode() : 0);
      result = result * 37 + (idCardNo != null ? idCardNo.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      result = result * 37 + (weight != null ? weight.hashCode() : 0);
      result = result * 37 + (physicalState != null ? physicalState.hashCode() : 0);
      result = result * 37 + (idPic != null ? idPic.hashCode() : 0);
      result = result * 37 + (extraInfo != null ? extraInfo.hashCode() : 0);
      result = result * 37 + (medicalNO != null ? medicalNO.hashCode() : 0);
      result = result * 37 + language.hashCode();
      result = result * 37 + (actAbility != null ? actAbility.hashCode() : 0);
      result = result * 37 + (firstAdd != null ? firstAdd.hashCode() : 0);
      result = result * 37 + (medicareType != null ? medicareType.hashCode() : 0);
      result = result * 37 + (healthCareNO != null ? healthCareNO.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (idPic2 != null ? idPic2.hashCode() : 0);
      result = result * 37 + (healthCareImg != null ? healthCareImg.hashCode() : 0);
      result = result * 37 + (kinsfolkImg != null ? kinsfolkImg.hashCode() : 0);
      result = result * 37 + (kinsType != null ? kinsType.hashCode() : 0);
      result = result * 37 + (staffType != null ? staffType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (kinsId != null) builder.append(", kinsId=").append(kinsId);
    if (name != null) builder.append(", name=").append(name);
    if (age != null) builder.append(", age=").append(age);
    if (sex != null) builder.append(", sex=").append(sex);
    if (relation != null) builder.append(", relation=").append(relation);
    if (idCardNo != null) builder.append(", idCardNo=").append(idCardNo);
    if (height != null) builder.append(", height=").append(height);
    if (weight != null) builder.append(", weight=").append(weight);
    if (physicalState != null) builder.append(", physicalState=").append(physicalState);
    if (idPic != null) builder.append(", idPic=").append(idPic);
    if (extraInfo != null) builder.append(", extraInfo=").append(extraInfo);
    if (medicalNO != null) builder.append(", medicalNO=").append(medicalNO);
    if (!language.isEmpty()) builder.append(", language=").append(language);
    if (actAbility != null) builder.append(", actAbility=").append(actAbility);
    if (firstAdd != null) builder.append(", firstAdd=").append(firstAdd);
    if (medicareType != null) builder.append(", medicareType=").append(medicareType);
    if (healthCareNO != null) builder.append(", healthCareNO=").append(healthCareNO);
    if (userId != null) builder.append(", userId=").append(userId);
    if (idPic2 != null) builder.append(", idPic2=").append(idPic2);
    if (healthCareImg != null) builder.append(", healthCareImg=").append(healthCareImg);
    if (kinsfolkImg != null) builder.append(", kinsfolkImg=").append(kinsfolkImg);
    if (kinsType != null) builder.append(", kinsType=").append(kinsType);
    if (staffType != null) builder.append(", staffType=").append(staffType);
    return builder.replace(0, 2, "KinsfolkReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<KinsfolkReq, Builder> {
    public Long kinsId;

    public String name;

    public Integer age;

    public Integer sex;

    public String relation;

    public String idCardNo;

    public String height;

    public String weight;

    public String physicalState;

    public String idPic;

    public String extraInfo;

    public String medicalNO;

    public List<Integer> language;

    public Integer actAbility;

    public Boolean firstAdd;

    public Integer medicareType;

    public String healthCareNO;

    public Long userId;

    public String idPic2;

    public String healthCareImg;

    public String kinsfolkImg;

    public Integer kinsType;

    public Integer staffType;

    public Builder() {
      language = Internal.newMutableList();
    }

    public Builder kinsId(Long kinsId) {
      this.kinsId = kinsId;
      return this;
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder age(Integer age) {
      this.age = age;
      return this;
    }

    /**
     * 1 - 男, 2 - 女
     */
    public Builder sex(Integer sex) {
      this.sex = sex;
      return this;
    }

    /**
     * 亲属关系
     */
    public Builder relation(String relation) {
      this.relation = relation;
      return this;
    }

    /**
     * 身份证号
     */
    public Builder idCardNo(String idCardNo) {
      this.idCardNo = idCardNo;
      return this;
    }

    /**
     * 身高
     */
    public Builder height(String height) {
      this.height = height;
      return this;
    }

    /**
     * 体重
     */
    public Builder weight(String weight) {
      this.weight = weight;
      return this;
    }

    /**
     * 身体情况
     */
    public Builder physicalState(String physicalState) {
      this.physicalState = physicalState;
      return this;
    }

    /**
     * 身份证图片ID
     */
    public Builder idPic(String idPic) {
      this.idPic = idPic;
      return this;
    }

    /**
     * 补充说明
     */
    public Builder extraInfo(String extraInfo) {
      this.extraInfo = extraInfo;
      return this;
    }

    /**
     * 医院就诊卡号
     */
    public Builder medicalNO(String medicalNO) {
      this.medicalNO = medicalNO;
      return this;
    }

    /**
     * 常用语言 1 - 普通话 2 - 粤语 3-客家 4-潮汕
     */
    public Builder language(List<Integer> language) {
      Internal.checkElementsNotNull(language);
      this.language = language;
      return this;
    }

    /**
     * 行动能力 1-自理 2-半失能 3-失能
     */
    public Builder actAbility(Integer actAbility) {
      this.actAbility = actAbility;
      return this;
    }

    /**
     * 首次添加亲属
     */
    public Builder firstAdd(Boolean firstAdd) {
      this.firstAdd = firstAdd;
      return this;
    }

    /**
     * 医保类型
     */
    public Builder medicareType(Integer medicareType) {
      this.medicareType = medicareType;
      return this;
    }

    /**
     * 医保卡号
     */
    public Builder healthCareNO(String healthCareNO) {
      this.healthCareNO = healthCareNO;
      return this;
    }

    /**
     * 用户id
     */
    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 身份证反面id
     */
    public Builder idPic2(String idPic2) {
      this.idPic2 = idPic2;
      return this;
    }

    /**
     * 医保卡信息照片
     */
    public Builder healthCareImg(String healthCareImg) {
      this.healthCareImg = healthCareImg;
      return this;
    }

    /**
     * 参保人照片
     */
    public Builder kinsfolkImg(String kinsfolkImg) {
      this.kinsfolkImg = kinsfolkImg;
      return this;
    }

    /**
     * 添加类型 0-亲属 1-参保人
     */
    public Builder kinsType(Integer kinsType) {
      this.kinsType = kinsType;
      return this;
    }

    /**
     * 人员类型 0-未设置 1-在职 2-离职
     */
    public Builder staffType(Integer staffType) {
      this.staffType = staffType;
      return this;
    }

    @Override
    public KinsfolkReq build() {
      return new KinsfolkReq(kinsId, name, age, sex, relation, idCardNo, height, weight, physicalState, idPic, extraInfo, medicalNO, language, actAbility, firstAdd, medicareType, healthCareNO, userId, idPic2, healthCareImg, kinsfolkImg, kinsType, staffType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_KinsfolkReq extends ProtoAdapter<KinsfolkReq> {
    ProtoAdapter_KinsfolkReq() {
      super(FieldEncoding.LENGTH_DELIMITED, KinsfolkReq.class);
    }

    @Override
    public int encodedSize(KinsfolkReq value) {
      return (value.kinsId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.kinsId) : 0)
          + (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.name) : 0)
          + (value.age != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.age) : 0)
          + (value.sex != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.sex) : 0)
          + (value.relation != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.relation) : 0)
          + (value.idCardNo != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.idCardNo) : 0)
          + (value.height != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.height) : 0)
          + (value.weight != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.weight) : 0)
          + (value.physicalState != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.physicalState) : 0)
          + (value.idPic != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.idPic) : 0)
          + (value.extraInfo != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.extraInfo) : 0)
          + (value.medicalNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.medicalNO) : 0)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(13, value.language)
          + (value.actAbility != null ? ProtoAdapter.UINT32.encodedSizeWithTag(14, value.actAbility) : 0)
          + (value.firstAdd != null ? ProtoAdapter.BOOL.encodedSizeWithTag(15, value.firstAdd) : 0)
          + (value.medicareType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(16, value.medicareType) : 0)
          + (value.healthCareNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.healthCareNO) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(18, value.userId) : 0)
          + (value.idPic2 != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.idPic2) : 0)
          + (value.healthCareImg != null ? ProtoAdapter.STRING.encodedSizeWithTag(20, value.healthCareImg) : 0)
          + (value.kinsfolkImg != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.kinsfolkImg) : 0)
          + (value.kinsType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(22, value.kinsType) : 0)
          + (value.staffType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(23, value.staffType) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, KinsfolkReq value) throws IOException {
      if (value.kinsId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.kinsId);
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.name);
      if (value.age != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.age);
      if (value.sex != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.sex);
      if (value.relation != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.relation);
      if (value.idCardNo != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.idCardNo);
      if (value.height != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.height);
      if (value.weight != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.weight);
      if (value.physicalState != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.physicalState);
      if (value.idPic != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.idPic);
      if (value.extraInfo != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.extraInfo);
      if (value.medicalNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.medicalNO);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 13, value.language);
      if (value.actAbility != null) ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.actAbility);
      if (value.firstAdd != null) ProtoAdapter.BOOL.encodeWithTag(writer, 15, value.firstAdd);
      if (value.medicareType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.medicareType);
      if (value.healthCareNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.healthCareNO);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 18, value.userId);
      if (value.idPic2 != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.idPic2);
      if (value.healthCareImg != null) ProtoAdapter.STRING.encodeWithTag(writer, 20, value.healthCareImg);
      if (value.kinsfolkImg != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.kinsfolkImg);
      if (value.kinsType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 22, value.kinsType);
      if (value.staffType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 23, value.staffType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public KinsfolkReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.kinsId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.age(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.sex(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.relation(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.idCardNo(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.height(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.weight(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.physicalState(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.idPic(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.extraInfo(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.medicalNO(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.language.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.actAbility(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.firstAdd(ProtoAdapter.BOOL.decode(reader)); break;
          case 16: builder.medicareType(ProtoAdapter.UINT32.decode(reader)); break;
          case 17: builder.healthCareNO(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 19: builder.idPic2(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.healthCareImg(ProtoAdapter.STRING.decode(reader)); break;
          case 21: builder.kinsfolkImg(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.kinsType(ProtoAdapter.UINT32.decode(reader)); break;
          case 23: builder.staffType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public KinsfolkReq redact(KinsfolkReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
