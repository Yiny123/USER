// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 1017:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class AdlAssessItem extends Message<AdlAssessItem, AdlAssessItem.Builder> {
  public static final ProtoAdapter<AdlAssessItem> ADAPTER = new ProtoAdapter_AdlAssessItem();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ITEMNAME = "";

  public static final Integer DEFAULT_RESULT = 0;

  public static final String DEFAULT_REMARK = "";

  public static final Integer DEFAULT_SCORE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String itemName;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer result;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String remark;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer score;

  public AdlAssessItem(String itemName, Integer result, String remark, Integer score) {
    this(itemName, result, remark, score, ByteString.EMPTY);
  }

  public AdlAssessItem(String itemName, Integer result, String remark, Integer score, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.itemName = itemName;
    this.result = result;
    this.remark = remark;
    this.score = score;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.itemName = itemName;
    builder.result = result;
    builder.remark = remark;
    builder.score = score;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AdlAssessItem)) return false;
    AdlAssessItem o = (AdlAssessItem) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(itemName, o.itemName)
        && Internal.equals(result, o.result)
        && Internal.equals(remark, o.remark)
        && Internal.equals(score, o.score);
  }

  @Override
  public int hashCode() {
    int result_ = super.hashCode;
    if (result_ == 0) {
      result_ = unknownFields().hashCode();
      result_ = result_ * 37 + (itemName != null ? itemName.hashCode() : 0);
      result_ = result_ * 37 + (result != null ? result.hashCode() : 0);
      result_ = result_ * 37 + (remark != null ? remark.hashCode() : 0);
      result_ = result_ * 37 + (score != null ? score.hashCode() : 0);
      super.hashCode = result_;
    }
    return result_;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (itemName != null) builder.append(", itemName=").append(itemName);
    if (result != null) builder.append(", result=").append(result);
    if (remark != null) builder.append(", remark=").append(remark);
    if (score != null) builder.append(", score=").append(score);
    return builder.replace(0, 2, "AdlAssessItem{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<AdlAssessItem, Builder> {
    public String itemName;

    public Integer result;

    public String remark;

    public Integer score;

    public Builder() {
    }

    public Builder itemName(String itemName) {
      this.itemName = itemName;
      return this;
    }

    public Builder result(Integer result) {
      this.result = result;
      return this;
    }

    public Builder remark(String remark) {
      this.remark = remark;
      return this;
    }

    public Builder score(Integer score) {
      this.score = score;
      return this;
    }

    @Override
    public AdlAssessItem build() {
      return new AdlAssessItem(itemName, result, remark, score, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_AdlAssessItem extends ProtoAdapter<AdlAssessItem> {
    ProtoAdapter_AdlAssessItem() {
      super(FieldEncoding.LENGTH_DELIMITED, AdlAssessItem.class);
    }

    @Override
    public int encodedSize(AdlAssessItem value) {
      return (value.itemName != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.itemName) : 0)
          + (value.result != null ? ProtoAdapter.UINT32.encodedSizeWithTag(2, value.result) : 0)
          + (value.remark != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.remark) : 0)
          + (value.score != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.score) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AdlAssessItem value) throws IOException {
      if (value.itemName != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.itemName);
      if (value.result != null) ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.result);
      if (value.remark != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.remark);
      if (value.score != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.score);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AdlAssessItem decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.itemName(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.result(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.remark(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.score(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AdlAssessItem redact(AdlAssessItem value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
