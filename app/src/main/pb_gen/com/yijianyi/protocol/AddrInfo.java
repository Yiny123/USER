// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Lbs.proto at 35:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class AddrInfo extends Message<AddrInfo, AddrInfo.Builder> {
  public static final ProtoAdapter<AddrInfo> ADAPTER = new ProtoAdapter_AddrInfo();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_PROVINCE = "";

  public static final String DEFAULT_CITY = "";

  public static final String DEFAULT_DISTRICT = "";

  public static final String DEFAULT_STREETNAME = "";

  public static final String DEFAULT_STREETNUM = "";

  public static final String DEFAULT_ADDRSTR = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String province;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String city;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String district;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String streetName;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String streetNum;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String addrStr;

  public AddrInfo(String province, String city, String district, String streetName, String streetNum, String addrStr) {
    this(province, city, district, streetName, streetNum, addrStr, ByteString.EMPTY);
  }

  public AddrInfo(String province, String city, String district, String streetName, String streetNum, String addrStr, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.province = province;
    this.city = city;
    this.district = district;
    this.streetName = streetName;
    this.streetNum = streetNum;
    this.addrStr = addrStr;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.province = province;
    builder.city = city;
    builder.district = district;
    builder.streetName = streetName;
    builder.streetNum = streetNum;
    builder.addrStr = addrStr;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AddrInfo)) return false;
    AddrInfo o = (AddrInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(province, o.province)
        && Internal.equals(city, o.city)
        && Internal.equals(district, o.district)
        && Internal.equals(streetName, o.streetName)
        && Internal.equals(streetNum, o.streetNum)
        && Internal.equals(addrStr, o.addrStr);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (province != null ? province.hashCode() : 0);
      result = result * 37 + (city != null ? city.hashCode() : 0);
      result = result * 37 + (district != null ? district.hashCode() : 0);
      result = result * 37 + (streetName != null ? streetName.hashCode() : 0);
      result = result * 37 + (streetNum != null ? streetNum.hashCode() : 0);
      result = result * 37 + (addrStr != null ? addrStr.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (province != null) builder.append(", province=").append(province);
    if (city != null) builder.append(", city=").append(city);
    if (district != null) builder.append(", district=").append(district);
    if (streetName != null) builder.append(", streetName=").append(streetName);
    if (streetNum != null) builder.append(", streetNum=").append(streetNum);
    if (addrStr != null) builder.append(", addrStr=").append(addrStr);
    return builder.replace(0, 2, "AddrInfo{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<AddrInfo, Builder> {
    public String province;

    public String city;

    public String district;

    public String streetName;

    public String streetNum;

    public String addrStr;

    public Builder() {
    }

    public Builder province(String province) {
      this.province = province;
      return this;
    }

    public Builder city(String city) {
      this.city = city;
      return this;
    }

    public Builder district(String district) {
      this.district = district;
      return this;
    }

    public Builder streetName(String streetName) {
      this.streetName = streetName;
      return this;
    }

    public Builder streetNum(String streetNum) {
      this.streetNum = streetNum;
      return this;
    }

    public Builder addrStr(String addrStr) {
      this.addrStr = addrStr;
      return this;
    }

    @Override
    public AddrInfo build() {
      return new AddrInfo(province, city, district, streetName, streetNum, addrStr, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_AddrInfo extends ProtoAdapter<AddrInfo> {
    ProtoAdapter_AddrInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, AddrInfo.class);
    }

    @Override
    public int encodedSize(AddrInfo value) {
      return (value.province != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.province) : 0)
          + (value.city != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.city) : 0)
          + (value.district != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.district) : 0)
          + (value.streetName != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.streetName) : 0)
          + (value.streetNum != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.streetNum) : 0)
          + (value.addrStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.addrStr) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AddrInfo value) throws IOException {
      if (value.province != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.province);
      if (value.city != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.city);
      if (value.district != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.district);
      if (value.streetName != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.streetName);
      if (value.streetNum != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.streetNum);
      if (value.addrStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.addrStr);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AddrInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.province(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.city(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.district(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.streetName(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.streetNum(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.addrStr(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AddrInfo redact(AddrInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
