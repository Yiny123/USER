// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 245:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 护工银行卡信息
 */
public final class HGBankCard extends Message<HGBankCard, HGBankCard.Builder> {
  public static final ProtoAdapter<HGBankCard> ADAPTER = new ProtoAdapter_HGBankCard();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_CARDNO = "";

  public static final String DEFAULT_BANK = "";

  public static final String DEFAULT_CITY = "";

  public static final String DEFAULT_BRANCH = "";

  public static final String DEFAULT_PIC1 = "";

  public static final String DEFAULT_PIC2 = "";

  public static final Long DEFAULT_EXPIREDDATE = 0L;

  public static final Integer DEFAULT_STATE = 0;

  public static final Long DEFAULT_HGID = 0L;

  public static final Long DEFAULT_COMPANYID = 0L;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Integer DEFAULT_CREATETYPE = 0;

  public static final String DEFAULT_CREATECHANNEL = "";

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  /**
   * 主键
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 银行卡号
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cardNo;

  /**
   * 开户行
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bank;

  /**
   * 开户城市
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String city;

  /**
   * 开户支行
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String branch;

  /**
   * 银行卡正面照片
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String pic1;

  /**
   * 银行卡反面照片
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String pic2;

  /**
   * 身份证有效期，过期时间
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long expiredDate;

  /**
   * 银行卡的状态,0 正在使用 -1 已删除
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer state;

  /**
   * 护工的id
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long hgId;

  /**
   * 公司ID
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long companyId;

  /**
   * 创建时间
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 1-护工自己注册  2-公司添加
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer createType;

  /**
   * 创建渠道
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createChannel;

  /**
   * 创建员工ID
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 创建员工名称
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  public HGBankCard(Long id, String cardNo, String bank, String city, String branch, String pic1, String pic2, Long expiredDate, Integer state, Long hgId, Long companyId, Long createTime, Integer createType, String createChannel, Long createStaffId, String createStaffName) {
    this(id, cardNo, bank, city, branch, pic1, pic2, expiredDate, state, hgId, companyId, createTime, createType, createChannel, createStaffId, createStaffName, ByteString.EMPTY);
  }

  public HGBankCard(Long id, String cardNo, String bank, String city, String branch, String pic1, String pic2, Long expiredDate, Integer state, Long hgId, Long companyId, Long createTime, Integer createType, String createChannel, Long createStaffId, String createStaffName, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.cardNo = cardNo;
    this.bank = bank;
    this.city = city;
    this.branch = branch;
    this.pic1 = pic1;
    this.pic2 = pic2;
    this.expiredDate = expiredDate;
    this.state = state;
    this.hgId = hgId;
    this.companyId = companyId;
    this.createTime = createTime;
    this.createType = createType;
    this.createChannel = createChannel;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.cardNo = cardNo;
    builder.bank = bank;
    builder.city = city;
    builder.branch = branch;
    builder.pic1 = pic1;
    builder.pic2 = pic2;
    builder.expiredDate = expiredDate;
    builder.state = state;
    builder.hgId = hgId;
    builder.companyId = companyId;
    builder.createTime = createTime;
    builder.createType = createType;
    builder.createChannel = createChannel;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HGBankCard)) return false;
    HGBankCard o = (HGBankCard) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(cardNo, o.cardNo)
        && Internal.equals(bank, o.bank)
        && Internal.equals(city, o.city)
        && Internal.equals(branch, o.branch)
        && Internal.equals(pic1, o.pic1)
        && Internal.equals(pic2, o.pic2)
        && Internal.equals(expiredDate, o.expiredDate)
        && Internal.equals(state, o.state)
        && Internal.equals(hgId, o.hgId)
        && Internal.equals(companyId, o.companyId)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createType, o.createType)
        && Internal.equals(createChannel, o.createChannel)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (cardNo != null ? cardNo.hashCode() : 0);
      result = result * 37 + (bank != null ? bank.hashCode() : 0);
      result = result * 37 + (city != null ? city.hashCode() : 0);
      result = result * 37 + (branch != null ? branch.hashCode() : 0);
      result = result * 37 + (pic1 != null ? pic1.hashCode() : 0);
      result = result * 37 + (pic2 != null ? pic2.hashCode() : 0);
      result = result * 37 + (expiredDate != null ? expiredDate.hashCode() : 0);
      result = result * 37 + (state != null ? state.hashCode() : 0);
      result = result * 37 + (hgId != null ? hgId.hashCode() : 0);
      result = result * 37 + (companyId != null ? companyId.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createType != null ? createType.hashCode() : 0);
      result = result * 37 + (createChannel != null ? createChannel.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (cardNo != null) builder.append(", cardNo=").append(cardNo);
    if (bank != null) builder.append(", bank=").append(bank);
    if (city != null) builder.append(", city=").append(city);
    if (branch != null) builder.append(", branch=").append(branch);
    if (pic1 != null) builder.append(", pic1=").append(pic1);
    if (pic2 != null) builder.append(", pic2=").append(pic2);
    if (expiredDate != null) builder.append(", expiredDate=").append(expiredDate);
    if (state != null) builder.append(", state=").append(state);
    if (hgId != null) builder.append(", hgId=").append(hgId);
    if (companyId != null) builder.append(", companyId=").append(companyId);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createType != null) builder.append(", createType=").append(createType);
    if (createChannel != null) builder.append(", createChannel=").append(createChannel);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    return builder.replace(0, 2, "HGBankCard{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<HGBankCard, Builder> {
    public Long id;

    public String cardNo;

    public String bank;

    public String city;

    public String branch;

    public String pic1;

    public String pic2;

    public Long expiredDate;

    public Integer state;

    public Long hgId;

    public Long companyId;

    public Long createTime;

    public Integer createType;

    public String createChannel;

    public Long createStaffId;

    public String createStaffName;

    public Builder() {
    }

    /**
     * 主键
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 银行卡号
     */
    public Builder cardNo(String cardNo) {
      this.cardNo = cardNo;
      return this;
    }

    /**
     * 开户行
     */
    public Builder bank(String bank) {
      this.bank = bank;
      return this;
    }

    /**
     * 开户城市
     */
    public Builder city(String city) {
      this.city = city;
      return this;
    }

    /**
     * 开户支行
     */
    public Builder branch(String branch) {
      this.branch = branch;
      return this;
    }

    /**
     * 银行卡正面照片
     */
    public Builder pic1(String pic1) {
      this.pic1 = pic1;
      return this;
    }

    /**
     * 银行卡反面照片
     */
    public Builder pic2(String pic2) {
      this.pic2 = pic2;
      return this;
    }

    /**
     * 身份证有效期，过期时间
     */
    public Builder expiredDate(Long expiredDate) {
      this.expiredDate = expiredDate;
      return this;
    }

    /**
     * 银行卡的状态,0 正在使用 -1 已删除
     */
    public Builder state(Integer state) {
      this.state = state;
      return this;
    }

    /**
     * 护工的id
     */
    public Builder hgId(Long hgId) {
      this.hgId = hgId;
      return this;
    }

    /**
     * 公司ID
     */
    public Builder companyId(Long companyId) {
      this.companyId = companyId;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 1-护工自己注册  2-公司添加
     */
    public Builder createType(Integer createType) {
      this.createType = createType;
      return this;
    }

    /**
     * 创建渠道
     */
    public Builder createChannel(String createChannel) {
      this.createChannel = createChannel;
      return this;
    }

    /**
     * 创建员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 创建员工名称
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    @Override
    public HGBankCard build() {
      return new HGBankCard(id, cardNo, bank, city, branch, pic1, pic2, expiredDate, state, hgId, companyId, createTime, createType, createChannel, createStaffId, createStaffName, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_HGBankCard extends ProtoAdapter<HGBankCard> {
    ProtoAdapter_HGBankCard() {
      super(FieldEncoding.LENGTH_DELIMITED, HGBankCard.class);
    }

    @Override
    public int encodedSize(HGBankCard value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.cardNo != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.cardNo) : 0)
          + (value.bank != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.bank) : 0)
          + (value.city != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.city) : 0)
          + (value.branch != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.branch) : 0)
          + (value.pic1 != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.pic1) : 0)
          + (value.pic2 != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.pic2) : 0)
          + (value.expiredDate != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.expiredDate) : 0)
          + (value.state != null ? ProtoAdapter.UINT32.encodedSizeWithTag(9, value.state) : 0)
          + (value.hgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(10, value.hgId) : 0)
          + (value.companyId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(11, value.companyId) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(12, value.createTime) : 0)
          + (value.createType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(13, value.createType) : 0)
          + (value.createChannel != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.createChannel) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(15, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.createStaffName) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, HGBankCard value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.cardNo != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.cardNo);
      if (value.bank != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.bank);
      if (value.city != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.city);
      if (value.branch != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.branch);
      if (value.pic1 != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.pic1);
      if (value.pic2 != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.pic2);
      if (value.expiredDate != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.expiredDate);
      if (value.state != null) ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.state);
      if (value.hgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 10, value.hgId);
      if (value.companyId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.companyId);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 12, value.createTime);
      if (value.createType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.createType);
      if (value.createChannel != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.createChannel);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 15, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.createStaffName);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public HGBankCard decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.cardNo(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.bank(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.city(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.branch(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.pic1(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.pic2(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.expiredDate(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.state(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.hgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 11: builder.companyId(ProtoAdapter.UINT64.decode(reader)); break;
          case 12: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 13: builder.createType(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.createChannel(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 16: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public HGBankCard redact(HGBankCard value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
