// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 392:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class DayTimeData extends Message<DayTimeData, DayTimeData.Builder> {
  public static final ProtoAdapter<DayTimeData> ADAPTER = new ProtoAdapter_DayTimeData();

  private static final long serialVersionUID = 0L;

  /**
   * 居家字段
   * 上午时间
   */
  @WireField(
      tag = 1,
      adapter = "com.yijianyi.protocol.OrderTimeData#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<OrderTimeData> amList;

  /**
   * 下午午时间
   */
  @WireField(
      tag = 2,
      adapter = "com.yijianyi.protocol.OrderTimeData#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<OrderTimeData> pmList;

  /**
   * 机构字段
   */
  @WireField(
      tag = 3,
      adapter = "com.yijianyi.protocol.OrderTimeData#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<OrderTimeData> mList;

  public DayTimeData(List<OrderTimeData> amList, List<OrderTimeData> pmList, List<OrderTimeData> mList) {
    this(amList, pmList, mList, ByteString.EMPTY);
  }

  public DayTimeData(List<OrderTimeData> amList, List<OrderTimeData> pmList, List<OrderTimeData> mList, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.amList = Internal.immutableCopyOf("amList", amList);
    this.pmList = Internal.immutableCopyOf("pmList", pmList);
    this.mList = Internal.immutableCopyOf("mList", mList);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.amList = Internal.copyOf("amList", amList);
    builder.pmList = Internal.copyOf("pmList", pmList);
    builder.mList = Internal.copyOf("mList", mList);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DayTimeData)) return false;
    DayTimeData o = (DayTimeData) other;
    return unknownFields().equals(o.unknownFields())
        && amList.equals(o.amList)
        && pmList.equals(o.pmList)
        && mList.equals(o.mList);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + amList.hashCode();
      result = result * 37 + pmList.hashCode();
      result = result * 37 + mList.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!amList.isEmpty()) builder.append(", amList=").append(amList);
    if (!pmList.isEmpty()) builder.append(", pmList=").append(pmList);
    if (!mList.isEmpty()) builder.append(", mList=").append(mList);
    return builder.replace(0, 2, "DayTimeData{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<DayTimeData, Builder> {
    public List<OrderTimeData> amList;

    public List<OrderTimeData> pmList;

    public List<OrderTimeData> mList;

    public Builder() {
      amList = Internal.newMutableList();
      pmList = Internal.newMutableList();
      mList = Internal.newMutableList();
    }

    /**
     * 居家字段
     * 上午时间
     */
    public Builder amList(List<OrderTimeData> amList) {
      Internal.checkElementsNotNull(amList);
      this.amList = amList;
      return this;
    }

    /**
     * 下午午时间
     */
    public Builder pmList(List<OrderTimeData> pmList) {
      Internal.checkElementsNotNull(pmList);
      this.pmList = pmList;
      return this;
    }

    /**
     * 机构字段
     */
    public Builder mList(List<OrderTimeData> mList) {
      Internal.checkElementsNotNull(mList);
      this.mList = mList;
      return this;
    }

    @Override
    public DayTimeData build() {
      return new DayTimeData(amList, pmList, mList, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DayTimeData extends ProtoAdapter<DayTimeData> {
    ProtoAdapter_DayTimeData() {
      super(FieldEncoding.LENGTH_DELIMITED, DayTimeData.class);
    }

    @Override
    public int encodedSize(DayTimeData value) {
      return OrderTimeData.ADAPTER.asRepeated().encodedSizeWithTag(1, value.amList)
          + OrderTimeData.ADAPTER.asRepeated().encodedSizeWithTag(2, value.pmList)
          + OrderTimeData.ADAPTER.asRepeated().encodedSizeWithTag(3, value.mList)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, DayTimeData value) throws IOException {
      OrderTimeData.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.amList);
      OrderTimeData.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.pmList);
      OrderTimeData.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.mList);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DayTimeData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.amList.add(OrderTimeData.ADAPTER.decode(reader)); break;
          case 2: builder.pmList.add(OrderTimeData.ADAPTER.decode(reader)); break;
          case 3: builder.mList.add(OrderTimeData.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public DayTimeData redact(DayTimeData value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.amList, OrderTimeData.ADAPTER);
      Internal.redactElements(builder.pmList, OrderTimeData.ADAPTER);
      Internal.redactElements(builder.mList, OrderTimeData.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
