// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 138:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class CompanyOrg extends Message<CompanyOrg, CompanyOrg.Builder> {
  public static final ProtoAdapter<CompanyOrg> ADAPTER = new ProtoAdapter_CompanyOrg();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Long DEFAULT_COMPANYID = 0L;

  public static final Long DEFAULT_ORGID = 0L;

  public static final Long DEFAULT_BRANCHID = 0L;

  public static final Long DEFAULT_PREPAYAMOUNT = 0L;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Integer DEFAULT_CREATETYPE = 0;

  public static final String DEFAULT_CREATECHANNEL = "";

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final Long DEFAULT_CHAIRMANID = 0L;

  public static final String DEFAULT_CHAIRMANNAME = "";

  public static final String DEFAULT_CHAIRMANPHONE = "";

  public static final Integer DEFAULT_ISALL = 0;

  public static final String DEFAULT_BRANCHNAME = "";

  public static final Integer DEFAULT_HAVAENTRANCECARD = 0;

  public static final Long DEFAULT_ENTRANCECARDPRICE = 0L;

  public static final String DEFAULT_MPQRCODE = "";

  public static final Integer DEFAULT_CHANGESERVICECONFIG = 0;

  public static final Integer DEFAULT_DUDAOCHARGECONFIG = 0;

  public static final Integer DEFAULT_LASTDAYFEECONFIG = 0;

  public static final String DEFAULT_KFPHONE = "";

  public static final Integer DEFAULT_MEASUREMENTCONFIG = 0;

  public static final Integer DEFAULT_ISSHOWCLIENTEXTRA = 0;

  public static final Integer DEFAULT_CHANGEBRANCHCONFIG = 0;

  /**
   * 关联关系的id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 公司ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long companyId;

  /**
   * 机构ID
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long orgId;

  /**
   * 科室ID
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long branchId;

  /**
   * 预付金 单位分
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long prepayAmount;

  /**
   * 创建时间
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 1-自己注册  2-公司添加
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer createType;

  /**
   * 创建渠道
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createChannel;

  /**
   * 创建员工ID
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 创建员工名称
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 对应的机构
   */
  @WireField(
      tag = 11,
      adapter = "com.yijianyi.protocol.OrgModel#ADAPTER"
  )
  public final OrgModel org;

  /**
   * 对应的科室
   */
  @WireField(
      tag = 12,
      adapter = "com.yijianyi.protocol.BranchModel#ADAPTER"
  )
  public final BranchModel branch;

  /**
   * 对应的公司
   */
  @WireField(
      tag = 13,
      adapter = "com.yijianyi.protocol.Company#ADAPTER"
  )
  public final Company company;

  /**
   * 督导id
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> dudaoId;

  /**
   * 主任id
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long chairmanId;

  /**
   * 主任姓名
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String chairmanName;

  /**
   * 主任手机号
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String chairmanPhone;

  /**
   * 0 -未定义 1 - 承包 2 - 非承包
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer isAll;

  /**
   * 科室名称
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String branchName;

  /**
   * 是否有门禁卡 0 没有 1 有
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer havaEntranceCard;

  /**
   * 门禁卡价格
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long entranceCardPrice;

  /**
   * 公众号二维码地址
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String mpQRCode;

  /**
   * 变更服务配置 1-变更后当天费用各收一半 2-变更后当天费用收变更后套餐 3-变更后超时时间 4-变更当天手动选择
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer changeServiceConfig;

  /**
   * 督导收费配置 1-不可收费 2-可收费
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer dudaoChargeConfig;

  /**
   * 最后一天收费标准 1-超时收费 2-三个时间段收费 3-收头不收尾
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer lastDayFeeConfig;

  /**
   * 客服电话
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kfPhone;

  /**
   * 该机构是否在客户端享受 0-显示 1-不显示
   */
  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer measurementConfig;

  /**
   * 该科室是否在客户端门禁卡 0-显示 1-不显示
   */
  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer isShowClientExtra;

  /**
   * 转科是否收取预付款 1-不收 2-收
   */
  @WireField(
      tag = 30,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer changeBranchConfig;

  public CompanyOrg(Long id, Long companyId, Long orgId, Long branchId, Long prepayAmount, Long createTime, Integer createType, String createChannel, Long createStaffId, String createStaffName, OrgModel org, BranchModel branch, Company company, List<Long> dudaoId, Long chairmanId, String chairmanName, String chairmanPhone, Integer isAll, String branchName, Integer havaEntranceCard, Long entranceCardPrice, String mpQRCode, Integer changeServiceConfig, Integer dudaoChargeConfig, Integer lastDayFeeConfig, String kfPhone, Integer measurementConfig, Integer isShowClientExtra, Integer changeBranchConfig) {
    this(id, companyId, orgId, branchId, prepayAmount, createTime, createType, createChannel, createStaffId, createStaffName, org, branch, company, dudaoId, chairmanId, chairmanName, chairmanPhone, isAll, branchName, havaEntranceCard, entranceCardPrice, mpQRCode, changeServiceConfig, dudaoChargeConfig, lastDayFeeConfig, kfPhone, measurementConfig, isShowClientExtra, changeBranchConfig, ByteString.EMPTY);
  }

  public CompanyOrg(Long id, Long companyId, Long orgId, Long branchId, Long prepayAmount, Long createTime, Integer createType, String createChannel, Long createStaffId, String createStaffName, OrgModel org, BranchModel branch, Company company, List<Long> dudaoId, Long chairmanId, String chairmanName, String chairmanPhone, Integer isAll, String branchName, Integer havaEntranceCard, Long entranceCardPrice, String mpQRCode, Integer changeServiceConfig, Integer dudaoChargeConfig, Integer lastDayFeeConfig, String kfPhone, Integer measurementConfig, Integer isShowClientExtra, Integer changeBranchConfig, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.companyId = companyId;
    this.orgId = orgId;
    this.branchId = branchId;
    this.prepayAmount = prepayAmount;
    this.createTime = createTime;
    this.createType = createType;
    this.createChannel = createChannel;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.org = org;
    this.branch = branch;
    this.company = company;
    this.dudaoId = Internal.immutableCopyOf("dudaoId", dudaoId);
    this.chairmanId = chairmanId;
    this.chairmanName = chairmanName;
    this.chairmanPhone = chairmanPhone;
    this.isAll = isAll;
    this.branchName = branchName;
    this.havaEntranceCard = havaEntranceCard;
    this.entranceCardPrice = entranceCardPrice;
    this.mpQRCode = mpQRCode;
    this.changeServiceConfig = changeServiceConfig;
    this.dudaoChargeConfig = dudaoChargeConfig;
    this.lastDayFeeConfig = lastDayFeeConfig;
    this.kfPhone = kfPhone;
    this.measurementConfig = measurementConfig;
    this.isShowClientExtra = isShowClientExtra;
    this.changeBranchConfig = changeBranchConfig;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.companyId = companyId;
    builder.orgId = orgId;
    builder.branchId = branchId;
    builder.prepayAmount = prepayAmount;
    builder.createTime = createTime;
    builder.createType = createType;
    builder.createChannel = createChannel;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.org = org;
    builder.branch = branch;
    builder.company = company;
    builder.dudaoId = Internal.copyOf("dudaoId", dudaoId);
    builder.chairmanId = chairmanId;
    builder.chairmanName = chairmanName;
    builder.chairmanPhone = chairmanPhone;
    builder.isAll = isAll;
    builder.branchName = branchName;
    builder.havaEntranceCard = havaEntranceCard;
    builder.entranceCardPrice = entranceCardPrice;
    builder.mpQRCode = mpQRCode;
    builder.changeServiceConfig = changeServiceConfig;
    builder.dudaoChargeConfig = dudaoChargeConfig;
    builder.lastDayFeeConfig = lastDayFeeConfig;
    builder.kfPhone = kfPhone;
    builder.measurementConfig = measurementConfig;
    builder.isShowClientExtra = isShowClientExtra;
    builder.changeBranchConfig = changeBranchConfig;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CompanyOrg)) return false;
    CompanyOrg o = (CompanyOrg) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(companyId, o.companyId)
        && Internal.equals(orgId, o.orgId)
        && Internal.equals(branchId, o.branchId)
        && Internal.equals(prepayAmount, o.prepayAmount)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createType, o.createType)
        && Internal.equals(createChannel, o.createChannel)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(org, o.org)
        && Internal.equals(branch, o.branch)
        && Internal.equals(company, o.company)
        && dudaoId.equals(o.dudaoId)
        && Internal.equals(chairmanId, o.chairmanId)
        && Internal.equals(chairmanName, o.chairmanName)
        && Internal.equals(chairmanPhone, o.chairmanPhone)
        && Internal.equals(isAll, o.isAll)
        && Internal.equals(branchName, o.branchName)
        && Internal.equals(havaEntranceCard, o.havaEntranceCard)
        && Internal.equals(entranceCardPrice, o.entranceCardPrice)
        && Internal.equals(mpQRCode, o.mpQRCode)
        && Internal.equals(changeServiceConfig, o.changeServiceConfig)
        && Internal.equals(dudaoChargeConfig, o.dudaoChargeConfig)
        && Internal.equals(lastDayFeeConfig, o.lastDayFeeConfig)
        && Internal.equals(kfPhone, o.kfPhone)
        && Internal.equals(measurementConfig, o.measurementConfig)
        && Internal.equals(isShowClientExtra, o.isShowClientExtra)
        && Internal.equals(changeBranchConfig, o.changeBranchConfig);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (companyId != null ? companyId.hashCode() : 0);
      result = result * 37 + (orgId != null ? orgId.hashCode() : 0);
      result = result * 37 + (branchId != null ? branchId.hashCode() : 0);
      result = result * 37 + (prepayAmount != null ? prepayAmount.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createType != null ? createType.hashCode() : 0);
      result = result * 37 + (createChannel != null ? createChannel.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (org != null ? org.hashCode() : 0);
      result = result * 37 + (branch != null ? branch.hashCode() : 0);
      result = result * 37 + (company != null ? company.hashCode() : 0);
      result = result * 37 + dudaoId.hashCode();
      result = result * 37 + (chairmanId != null ? chairmanId.hashCode() : 0);
      result = result * 37 + (chairmanName != null ? chairmanName.hashCode() : 0);
      result = result * 37 + (chairmanPhone != null ? chairmanPhone.hashCode() : 0);
      result = result * 37 + (isAll != null ? isAll.hashCode() : 0);
      result = result * 37 + (branchName != null ? branchName.hashCode() : 0);
      result = result * 37 + (havaEntranceCard != null ? havaEntranceCard.hashCode() : 0);
      result = result * 37 + (entranceCardPrice != null ? entranceCardPrice.hashCode() : 0);
      result = result * 37 + (mpQRCode != null ? mpQRCode.hashCode() : 0);
      result = result * 37 + (changeServiceConfig != null ? changeServiceConfig.hashCode() : 0);
      result = result * 37 + (dudaoChargeConfig != null ? dudaoChargeConfig.hashCode() : 0);
      result = result * 37 + (lastDayFeeConfig != null ? lastDayFeeConfig.hashCode() : 0);
      result = result * 37 + (kfPhone != null ? kfPhone.hashCode() : 0);
      result = result * 37 + (measurementConfig != null ? measurementConfig.hashCode() : 0);
      result = result * 37 + (isShowClientExtra != null ? isShowClientExtra.hashCode() : 0);
      result = result * 37 + (changeBranchConfig != null ? changeBranchConfig.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (companyId != null) builder.append(", companyId=").append(companyId);
    if (orgId != null) builder.append(", orgId=").append(orgId);
    if (branchId != null) builder.append(", branchId=").append(branchId);
    if (prepayAmount != null) builder.append(", prepayAmount=").append(prepayAmount);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createType != null) builder.append(", createType=").append(createType);
    if (createChannel != null) builder.append(", createChannel=").append(createChannel);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (org != null) builder.append(", org=").append(org);
    if (branch != null) builder.append(", branch=").append(branch);
    if (company != null) builder.append(", company=").append(company);
    if (!dudaoId.isEmpty()) builder.append(", dudaoId=").append(dudaoId);
    if (chairmanId != null) builder.append(", chairmanId=").append(chairmanId);
    if (chairmanName != null) builder.append(", chairmanName=").append(chairmanName);
    if (chairmanPhone != null) builder.append(", chairmanPhone=").append(chairmanPhone);
    if (isAll != null) builder.append(", isAll=").append(isAll);
    if (branchName != null) builder.append(", branchName=").append(branchName);
    if (havaEntranceCard != null) builder.append(", havaEntranceCard=").append(havaEntranceCard);
    if (entranceCardPrice != null) builder.append(", entranceCardPrice=").append(entranceCardPrice);
    if (mpQRCode != null) builder.append(", mpQRCode=").append(mpQRCode);
    if (changeServiceConfig != null) builder.append(", changeServiceConfig=").append(changeServiceConfig);
    if (dudaoChargeConfig != null) builder.append(", dudaoChargeConfig=").append(dudaoChargeConfig);
    if (lastDayFeeConfig != null) builder.append(", lastDayFeeConfig=").append(lastDayFeeConfig);
    if (kfPhone != null) builder.append(", kfPhone=").append(kfPhone);
    if (measurementConfig != null) builder.append(", measurementConfig=").append(measurementConfig);
    if (isShowClientExtra != null) builder.append(", isShowClientExtra=").append(isShowClientExtra);
    if (changeBranchConfig != null) builder.append(", changeBranchConfig=").append(changeBranchConfig);
    return builder.replace(0, 2, "CompanyOrg{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CompanyOrg, Builder> {
    public Long id;

    public Long companyId;

    public Long orgId;

    public Long branchId;

    public Long prepayAmount;

    public Long createTime;

    public Integer createType;

    public String createChannel;

    public Long createStaffId;

    public String createStaffName;

    public OrgModel org;

    public BranchModel branch;

    public Company company;

    public List<Long> dudaoId;

    public Long chairmanId;

    public String chairmanName;

    public String chairmanPhone;

    public Integer isAll;

    public String branchName;

    public Integer havaEntranceCard;

    public Long entranceCardPrice;

    public String mpQRCode;

    public Integer changeServiceConfig;

    public Integer dudaoChargeConfig;

    public Integer lastDayFeeConfig;

    public String kfPhone;

    public Integer measurementConfig;

    public Integer isShowClientExtra;

    public Integer changeBranchConfig;

    public Builder() {
      dudaoId = Internal.newMutableList();
    }

    /**
     * 关联关系的id
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 公司ID
     */
    public Builder companyId(Long companyId) {
      this.companyId = companyId;
      return this;
    }

    /**
     * 机构ID
     */
    public Builder orgId(Long orgId) {
      this.orgId = orgId;
      return this;
    }

    /**
     * 科室ID
     */
    public Builder branchId(Long branchId) {
      this.branchId = branchId;
      return this;
    }

    /**
     * 预付金 单位分
     */
    public Builder prepayAmount(Long prepayAmount) {
      this.prepayAmount = prepayAmount;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 1-自己注册  2-公司添加
     */
    public Builder createType(Integer createType) {
      this.createType = createType;
      return this;
    }

    /**
     * 创建渠道
     */
    public Builder createChannel(String createChannel) {
      this.createChannel = createChannel;
      return this;
    }

    /**
     * 创建员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 创建员工名称
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 对应的机构
     */
    public Builder org(OrgModel org) {
      this.org = org;
      return this;
    }

    /**
     * 对应的科室
     */
    public Builder branch(BranchModel branch) {
      this.branch = branch;
      return this;
    }

    /**
     * 对应的公司
     */
    public Builder company(Company company) {
      this.company = company;
      return this;
    }

    /**
     * 督导id
     */
    public Builder dudaoId(List<Long> dudaoId) {
      Internal.checkElementsNotNull(dudaoId);
      this.dudaoId = dudaoId;
      return this;
    }

    /**
     * 主任id
     */
    public Builder chairmanId(Long chairmanId) {
      this.chairmanId = chairmanId;
      return this;
    }

    /**
     * 主任姓名
     */
    public Builder chairmanName(String chairmanName) {
      this.chairmanName = chairmanName;
      return this;
    }

    /**
     * 主任手机号
     */
    public Builder chairmanPhone(String chairmanPhone) {
      this.chairmanPhone = chairmanPhone;
      return this;
    }

    /**
     * 0 -未定义 1 - 承包 2 - 非承包
     */
    public Builder isAll(Integer isAll) {
      this.isAll = isAll;
      return this;
    }

    /**
     * 科室名称
     */
    public Builder branchName(String branchName) {
      this.branchName = branchName;
      return this;
    }

    /**
     * 是否有门禁卡 0 没有 1 有
     */
    public Builder havaEntranceCard(Integer havaEntranceCard) {
      this.havaEntranceCard = havaEntranceCard;
      return this;
    }

    /**
     * 门禁卡价格
     */
    public Builder entranceCardPrice(Long entranceCardPrice) {
      this.entranceCardPrice = entranceCardPrice;
      return this;
    }

    /**
     * 公众号二维码地址
     */
    public Builder mpQRCode(String mpQRCode) {
      this.mpQRCode = mpQRCode;
      return this;
    }

    /**
     * 变更服务配置 1-变更后当天费用各收一半 2-变更后当天费用收变更后套餐 3-变更后超时时间 4-变更当天手动选择
     */
    public Builder changeServiceConfig(Integer changeServiceConfig) {
      this.changeServiceConfig = changeServiceConfig;
      return this;
    }

    /**
     * 督导收费配置 1-不可收费 2-可收费
     */
    public Builder dudaoChargeConfig(Integer dudaoChargeConfig) {
      this.dudaoChargeConfig = dudaoChargeConfig;
      return this;
    }

    /**
     * 最后一天收费标准 1-超时收费 2-三个时间段收费 3-收头不收尾
     */
    public Builder lastDayFeeConfig(Integer lastDayFeeConfig) {
      this.lastDayFeeConfig = lastDayFeeConfig;
      return this;
    }

    /**
     * 客服电话
     */
    public Builder kfPhone(String kfPhone) {
      this.kfPhone = kfPhone;
      return this;
    }

    /**
     * 该机构是否在客户端享受 0-显示 1-不显示
     */
    public Builder measurementConfig(Integer measurementConfig) {
      this.measurementConfig = measurementConfig;
      return this;
    }

    /**
     * 该科室是否在客户端门禁卡 0-显示 1-不显示
     */
    public Builder isShowClientExtra(Integer isShowClientExtra) {
      this.isShowClientExtra = isShowClientExtra;
      return this;
    }

    /**
     * 转科是否收取预付款 1-不收 2-收
     */
    public Builder changeBranchConfig(Integer changeBranchConfig) {
      this.changeBranchConfig = changeBranchConfig;
      return this;
    }

    @Override
    public CompanyOrg build() {
      return new CompanyOrg(id, companyId, orgId, branchId, prepayAmount, createTime, createType, createChannel, createStaffId, createStaffName, org, branch, company, dudaoId, chairmanId, chairmanName, chairmanPhone, isAll, branchName, havaEntranceCard, entranceCardPrice, mpQRCode, changeServiceConfig, dudaoChargeConfig, lastDayFeeConfig, kfPhone, measurementConfig, isShowClientExtra, changeBranchConfig, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CompanyOrg extends ProtoAdapter<CompanyOrg> {
    ProtoAdapter_CompanyOrg() {
      super(FieldEncoding.LENGTH_DELIMITED, CompanyOrg.class);
    }

    @Override
    public int encodedSize(CompanyOrg value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.companyId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.companyId) : 0)
          + (value.orgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.orgId) : 0)
          + (value.branchId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.branchId) : 0)
          + (value.prepayAmount != null ? ProtoAdapter.UINT64.encodedSizeWithTag(5, value.prepayAmount) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(6, value.createTime) : 0)
          + (value.createType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(7, value.createType) : 0)
          + (value.createChannel != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.createChannel) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.createStaffName) : 0)
          + (value.org != null ? OrgModel.ADAPTER.encodedSizeWithTag(11, value.org) : 0)
          + (value.branch != null ? BranchModel.ADAPTER.encodedSizeWithTag(12, value.branch) : 0)
          + (value.company != null ? Company.ADAPTER.encodedSizeWithTag(13, value.company) : 0)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(14, value.dudaoId)
          + (value.chairmanId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(15, value.chairmanId) : 0)
          + (value.chairmanName != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.chairmanName) : 0)
          + (value.chairmanPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.chairmanPhone) : 0)
          + (value.isAll != null ? ProtoAdapter.UINT32.encodedSizeWithTag(18, value.isAll) : 0)
          + (value.branchName != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.branchName) : 0)
          + (value.havaEntranceCard != null ? ProtoAdapter.UINT32.encodedSizeWithTag(20, value.havaEntranceCard) : 0)
          + (value.entranceCardPrice != null ? ProtoAdapter.UINT64.encodedSizeWithTag(21, value.entranceCardPrice) : 0)
          + (value.mpQRCode != null ? ProtoAdapter.STRING.encodedSizeWithTag(22, value.mpQRCode) : 0)
          + (value.changeServiceConfig != null ? ProtoAdapter.UINT32.encodedSizeWithTag(23, value.changeServiceConfig) : 0)
          + (value.dudaoChargeConfig != null ? ProtoAdapter.UINT32.encodedSizeWithTag(24, value.dudaoChargeConfig) : 0)
          + (value.lastDayFeeConfig != null ? ProtoAdapter.UINT32.encodedSizeWithTag(26, value.lastDayFeeConfig) : 0)
          + (value.kfPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(27, value.kfPhone) : 0)
          + (value.measurementConfig != null ? ProtoAdapter.UINT32.encodedSizeWithTag(28, value.measurementConfig) : 0)
          + (value.isShowClientExtra != null ? ProtoAdapter.UINT32.encodedSizeWithTag(29, value.isShowClientExtra) : 0)
          + (value.changeBranchConfig != null ? ProtoAdapter.UINT32.encodedSizeWithTag(30, value.changeBranchConfig) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CompanyOrg value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.companyId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.companyId);
      if (value.orgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.orgId);
      if (value.branchId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.branchId);
      if (value.prepayAmount != null) ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.prepayAmount);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.createTime);
      if (value.createType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.createType);
      if (value.createChannel != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.createChannel);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.createStaffName);
      if (value.org != null) OrgModel.ADAPTER.encodeWithTag(writer, 11, value.org);
      if (value.branch != null) BranchModel.ADAPTER.encodeWithTag(writer, 12, value.branch);
      if (value.company != null) Company.ADAPTER.encodeWithTag(writer, 13, value.company);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 14, value.dudaoId);
      if (value.chairmanId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 15, value.chairmanId);
      if (value.chairmanName != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.chairmanName);
      if (value.chairmanPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.chairmanPhone);
      if (value.isAll != null) ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.isAll);
      if (value.branchName != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.branchName);
      if (value.havaEntranceCard != null) ProtoAdapter.UINT32.encodeWithTag(writer, 20, value.havaEntranceCard);
      if (value.entranceCardPrice != null) ProtoAdapter.UINT64.encodeWithTag(writer, 21, value.entranceCardPrice);
      if (value.mpQRCode != null) ProtoAdapter.STRING.encodeWithTag(writer, 22, value.mpQRCode);
      if (value.changeServiceConfig != null) ProtoAdapter.UINT32.encodeWithTag(writer, 23, value.changeServiceConfig);
      if (value.dudaoChargeConfig != null) ProtoAdapter.UINT32.encodeWithTag(writer, 24, value.dudaoChargeConfig);
      if (value.lastDayFeeConfig != null) ProtoAdapter.UINT32.encodeWithTag(writer, 26, value.lastDayFeeConfig);
      if (value.kfPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 27, value.kfPhone);
      if (value.measurementConfig != null) ProtoAdapter.UINT32.encodeWithTag(writer, 28, value.measurementConfig);
      if (value.isShowClientExtra != null) ProtoAdapter.UINT32.encodeWithTag(writer, 29, value.isShowClientExtra);
      if (value.changeBranchConfig != null) ProtoAdapter.UINT32.encodeWithTag(writer, 30, value.changeBranchConfig);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CompanyOrg decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.companyId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.orgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.branchId(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.prepayAmount(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.createType(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.createChannel(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.org(OrgModel.ADAPTER.decode(reader)); break;
          case 12: builder.branch(BranchModel.ADAPTER.decode(reader)); break;
          case 13: builder.company(Company.ADAPTER.decode(reader)); break;
          case 14: builder.dudaoId.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 15: builder.chairmanId(ProtoAdapter.UINT64.decode(reader)); break;
          case 16: builder.chairmanName(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.chairmanPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.isAll(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.branchName(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.havaEntranceCard(ProtoAdapter.UINT32.decode(reader)); break;
          case 21: builder.entranceCardPrice(ProtoAdapter.UINT64.decode(reader)); break;
          case 22: builder.mpQRCode(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.changeServiceConfig(ProtoAdapter.UINT32.decode(reader)); break;
          case 24: builder.dudaoChargeConfig(ProtoAdapter.UINT32.decode(reader)); break;
          case 26: builder.lastDayFeeConfig(ProtoAdapter.UINT32.decode(reader)); break;
          case 27: builder.kfPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 28: builder.measurementConfig(ProtoAdapter.UINT32.decode(reader)); break;
          case 29: builder.isShowClientExtra(ProtoAdapter.UINT32.decode(reader)); break;
          case 30: builder.changeBranchConfig(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CompanyOrg redact(CompanyOrg value) {
      Builder builder = value.newBuilder();
      if (builder.org != null) builder.org = OrgModel.ADAPTER.redact(builder.org);
      if (builder.branch != null) builder.branch = BranchModel.ADAPTER.redact(builder.branch);
      if (builder.company != null) builder.company = Company.ADAPTER.redact(builder.company);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
