// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Lbs.proto at 45:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class LbsData extends Message<LbsData, LbsData.Builder> {
  public static final ProtoAdapter<LbsData> ADAPTER = new ProtoAdapter_LbsData();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.yijianyi.protocol.LbsLocation#ADAPTER"
  )
  public final LbsLocation location;

  @WireField(
      tag = 2,
      adapter = "com.yijianyi.protocol.AddrInfo#ADAPTER"
  )
  public final AddrInfo addrInfo;

  @WireField(
      tag = 3,
      adapter = "com.yijianyi.protocol.LbsCell#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<LbsCell> cells;

  @WireField(
      tag = 4,
      adapter = "com.yijianyi.protocol.LbsWifiMac#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<LbsWifiMac> wifis;

  public LbsData(LbsLocation location, AddrInfo addrInfo, List<LbsCell> cells, List<LbsWifiMac> wifis) {
    this(location, addrInfo, cells, wifis, ByteString.EMPTY);
  }

  public LbsData(LbsLocation location, AddrInfo addrInfo, List<LbsCell> cells, List<LbsWifiMac> wifis, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.location = location;
    this.addrInfo = addrInfo;
    this.cells = Internal.immutableCopyOf("cells", cells);
    this.wifis = Internal.immutableCopyOf("wifis", wifis);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.location = location;
    builder.addrInfo = addrInfo;
    builder.cells = Internal.copyOf("cells", cells);
    builder.wifis = Internal.copyOf("wifis", wifis);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LbsData)) return false;
    LbsData o = (LbsData) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(location, o.location)
        && Internal.equals(addrInfo, o.addrInfo)
        && cells.equals(o.cells)
        && wifis.equals(o.wifis);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (location != null ? location.hashCode() : 0);
      result = result * 37 + (addrInfo != null ? addrInfo.hashCode() : 0);
      result = result * 37 + cells.hashCode();
      result = result * 37 + wifis.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (location != null) builder.append(", location=").append(location);
    if (addrInfo != null) builder.append(", addrInfo=").append(addrInfo);
    if (!cells.isEmpty()) builder.append(", cells=").append(cells);
    if (!wifis.isEmpty()) builder.append(", wifis=").append(wifis);
    return builder.replace(0, 2, "LbsData{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<LbsData, Builder> {
    public LbsLocation location;

    public AddrInfo addrInfo;

    public List<LbsCell> cells;

    public List<LbsWifiMac> wifis;

    public Builder() {
      cells = Internal.newMutableList();
      wifis = Internal.newMutableList();
    }

    public Builder location(LbsLocation location) {
      this.location = location;
      return this;
    }

    public Builder addrInfo(AddrInfo addrInfo) {
      this.addrInfo = addrInfo;
      return this;
    }

    public Builder cells(List<LbsCell> cells) {
      Internal.checkElementsNotNull(cells);
      this.cells = cells;
      return this;
    }

    public Builder wifis(List<LbsWifiMac> wifis) {
      Internal.checkElementsNotNull(wifis);
      this.wifis = wifis;
      return this;
    }

    @Override
    public LbsData build() {
      return new LbsData(location, addrInfo, cells, wifis, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_LbsData extends ProtoAdapter<LbsData> {
    ProtoAdapter_LbsData() {
      super(FieldEncoding.LENGTH_DELIMITED, LbsData.class);
    }

    @Override
    public int encodedSize(LbsData value) {
      return (value.location != null ? LbsLocation.ADAPTER.encodedSizeWithTag(1, value.location) : 0)
          + (value.addrInfo != null ? AddrInfo.ADAPTER.encodedSizeWithTag(2, value.addrInfo) : 0)
          + LbsCell.ADAPTER.asRepeated().encodedSizeWithTag(3, value.cells)
          + LbsWifiMac.ADAPTER.asRepeated().encodedSizeWithTag(4, value.wifis)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, LbsData value) throws IOException {
      if (value.location != null) LbsLocation.ADAPTER.encodeWithTag(writer, 1, value.location);
      if (value.addrInfo != null) AddrInfo.ADAPTER.encodeWithTag(writer, 2, value.addrInfo);
      LbsCell.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.cells);
      LbsWifiMac.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.wifis);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public LbsData decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.location(LbsLocation.ADAPTER.decode(reader)); break;
          case 2: builder.addrInfo(AddrInfo.ADAPTER.decode(reader)); break;
          case 3: builder.cells.add(LbsCell.ADAPTER.decode(reader)); break;
          case 4: builder.wifis.add(LbsWifiMac.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public LbsData redact(LbsData value) {
      Builder builder = value.newBuilder();
      if (builder.location != null) builder.location = LbsLocation.ADAPTER.redact(builder.location);
      if (builder.addrInfo != null) builder.addrInfo = AddrInfo.ADAPTER.redact(builder.addrInfo);
      Internal.redactElements(builder.cells, LbsCell.ADAPTER);
      Internal.redactElements(builder.wifis, LbsWifiMac.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
