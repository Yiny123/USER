// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 144:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class GetSettingRsp extends Message<GetSettingRsp, GetSettingRsp.Builder> {
  public static final ProtoAdapter<GetSettingRsp> ADAPTER = new ProtoAdapter_GetSettingRsp();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_ISVALIDCITY = false;

  public static final String DEFAULT_INSUREDESCURL = "";

  public static final Boolean DEFAULT_NEEDORDER = false;

  public static final Integer DEFAULT_UPDATEFLAG = 0;

  public static final Boolean DEFAULT_NEEDONDUTY = false;

  /**
   * 首页icon/链接列表
   */
  @WireField(
      tag = 1,
      adapter = "com.yijianyi.protocol.IndexServiceItem#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<IndexServiceItem> items;

  /**
   * 已开通服务的城市
   */
  @WireField(
      tag = 2,
      adapter = "com.yijianyi.protocol.ServiceCityModel#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ServiceCityModel> citys;

  /**
   * banner列表
   */
  @WireField(
      tag = 3,
      adapter = "com.yijianyi.protocol.BannerModel#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<BannerModel> bannerList;

  /**
   * 当前所在地(城市)是否可用
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isValidCity;

  /**
   * 语种列表
   */
  @WireField(
      tag = 5,
      adapter = "com.yijianyi.protocol.Language#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Language> languageList;

  /**
   * 健康咨询
   */
  @WireField(
      tag = 6,
      adapter = "com.yijianyi.protocol.Information#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Information> inforList;

  /**
   * 距离用户最近的机构
   */
  @WireField(
      tag = 7,
      adapter = "com.yijianyi.protocol.OrgVO#ADAPTER"
  )
  public final OrgVO orgVO;

  /**
   * 医保类型
   */
  @WireField(
      tag = 8,
      adapter = "com.yijianyi.protocol.MedicareType#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<MedicareType> medicareList;

  /**
   * 长护险介绍
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String insureDescUrl;

  /**
   * 是否需要订单模块
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean needOrder;

  /**
   * 是否需要更新 0-不需要 1-更新提醒 2-强制更新
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer updateFlag;

  /**
   * 是否显示值班切换按钮
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean needOnduty;

  public GetSettingRsp(List<IndexServiceItem> items, List<ServiceCityModel> citys, List<BannerModel> bannerList, Boolean isValidCity, List<Language> languageList, List<Information> inforList, OrgVO orgVO, List<MedicareType> medicareList, String insureDescUrl, Boolean needOrder, Integer updateFlag, Boolean needOnduty) {
    this(items, citys, bannerList, isValidCity, languageList, inforList, orgVO, medicareList, insureDescUrl, needOrder, updateFlag, needOnduty, ByteString.EMPTY);
  }

  public GetSettingRsp(List<IndexServiceItem> items, List<ServiceCityModel> citys, List<BannerModel> bannerList, Boolean isValidCity, List<Language> languageList, List<Information> inforList, OrgVO orgVO, List<MedicareType> medicareList, String insureDescUrl, Boolean needOrder, Integer updateFlag, Boolean needOnduty, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.items = Internal.immutableCopyOf("items", items);
    this.citys = Internal.immutableCopyOf("citys", citys);
    this.bannerList = Internal.immutableCopyOf("bannerList", bannerList);
    this.isValidCity = isValidCity;
    this.languageList = Internal.immutableCopyOf("languageList", languageList);
    this.inforList = Internal.immutableCopyOf("inforList", inforList);
    this.orgVO = orgVO;
    this.medicareList = Internal.immutableCopyOf("medicareList", medicareList);
    this.insureDescUrl = insureDescUrl;
    this.needOrder = needOrder;
    this.updateFlag = updateFlag;
    this.needOnduty = needOnduty;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.items = Internal.copyOf("items", items);
    builder.citys = Internal.copyOf("citys", citys);
    builder.bannerList = Internal.copyOf("bannerList", bannerList);
    builder.isValidCity = isValidCity;
    builder.languageList = Internal.copyOf("languageList", languageList);
    builder.inforList = Internal.copyOf("inforList", inforList);
    builder.orgVO = orgVO;
    builder.medicareList = Internal.copyOf("medicareList", medicareList);
    builder.insureDescUrl = insureDescUrl;
    builder.needOrder = needOrder;
    builder.updateFlag = updateFlag;
    builder.needOnduty = needOnduty;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetSettingRsp)) return false;
    GetSettingRsp o = (GetSettingRsp) other;
    return unknownFields().equals(o.unknownFields())
        && items.equals(o.items)
        && citys.equals(o.citys)
        && bannerList.equals(o.bannerList)
        && Internal.equals(isValidCity, o.isValidCity)
        && languageList.equals(o.languageList)
        && inforList.equals(o.inforList)
        && Internal.equals(orgVO, o.orgVO)
        && medicareList.equals(o.medicareList)
        && Internal.equals(insureDescUrl, o.insureDescUrl)
        && Internal.equals(needOrder, o.needOrder)
        && Internal.equals(updateFlag, o.updateFlag)
        && Internal.equals(needOnduty, o.needOnduty);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + items.hashCode();
      result = result * 37 + citys.hashCode();
      result = result * 37 + bannerList.hashCode();
      result = result * 37 + (isValidCity != null ? isValidCity.hashCode() : 0);
      result = result * 37 + languageList.hashCode();
      result = result * 37 + inforList.hashCode();
      result = result * 37 + (orgVO != null ? orgVO.hashCode() : 0);
      result = result * 37 + medicareList.hashCode();
      result = result * 37 + (insureDescUrl != null ? insureDescUrl.hashCode() : 0);
      result = result * 37 + (needOrder != null ? needOrder.hashCode() : 0);
      result = result * 37 + (updateFlag != null ? updateFlag.hashCode() : 0);
      result = result * 37 + (needOnduty != null ? needOnduty.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!items.isEmpty()) builder.append(", items=").append(items);
    if (!citys.isEmpty()) builder.append(", citys=").append(citys);
    if (!bannerList.isEmpty()) builder.append(", bannerList=").append(bannerList);
    if (isValidCity != null) builder.append(", isValidCity=").append(isValidCity);
    if (!languageList.isEmpty()) builder.append(", languageList=").append(languageList);
    if (!inforList.isEmpty()) builder.append(", inforList=").append(inforList);
    if (orgVO != null) builder.append(", orgVO=").append(orgVO);
    if (!medicareList.isEmpty()) builder.append(", medicareList=").append(medicareList);
    if (insureDescUrl != null) builder.append(", insureDescUrl=").append(insureDescUrl);
    if (needOrder != null) builder.append(", needOrder=").append(needOrder);
    if (updateFlag != null) builder.append(", updateFlag=").append(updateFlag);
    if (needOnduty != null) builder.append(", needOnduty=").append(needOnduty);
    return builder.replace(0, 2, "GetSettingRsp{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetSettingRsp, Builder> {
    public List<IndexServiceItem> items;

    public List<ServiceCityModel> citys;

    public List<BannerModel> bannerList;

    public Boolean isValidCity;

    public List<Language> languageList;

    public List<Information> inforList;

    public OrgVO orgVO;

    public List<MedicareType> medicareList;

    public String insureDescUrl;

    public Boolean needOrder;

    public Integer updateFlag;

    public Boolean needOnduty;

    public Builder() {
      items = Internal.newMutableList();
      citys = Internal.newMutableList();
      bannerList = Internal.newMutableList();
      languageList = Internal.newMutableList();
      inforList = Internal.newMutableList();
      medicareList = Internal.newMutableList();
    }

    /**
     * 首页icon/链接列表
     */
    public Builder items(List<IndexServiceItem> items) {
      Internal.checkElementsNotNull(items);
      this.items = items;
      return this;
    }

    /**
     * 已开通服务的城市
     */
    public Builder citys(List<ServiceCityModel> citys) {
      Internal.checkElementsNotNull(citys);
      this.citys = citys;
      return this;
    }

    /**
     * banner列表
     */
    public Builder bannerList(List<BannerModel> bannerList) {
      Internal.checkElementsNotNull(bannerList);
      this.bannerList = bannerList;
      return this;
    }

    /**
     * 当前所在地(城市)是否可用
     */
    public Builder isValidCity(Boolean isValidCity) {
      this.isValidCity = isValidCity;
      return this;
    }

    /**
     * 语种列表
     */
    public Builder languageList(List<Language> languageList) {
      Internal.checkElementsNotNull(languageList);
      this.languageList = languageList;
      return this;
    }

    /**
     * 健康咨询
     */
    public Builder inforList(List<Information> inforList) {
      Internal.checkElementsNotNull(inforList);
      this.inforList = inforList;
      return this;
    }

    /**
     * 距离用户最近的机构
     */
    public Builder orgVO(OrgVO orgVO) {
      this.orgVO = orgVO;
      return this;
    }

    /**
     * 医保类型
     */
    public Builder medicareList(List<MedicareType> medicareList) {
      Internal.checkElementsNotNull(medicareList);
      this.medicareList = medicareList;
      return this;
    }

    /**
     * 长护险介绍
     */
    public Builder insureDescUrl(String insureDescUrl) {
      this.insureDescUrl = insureDescUrl;
      return this;
    }

    /**
     * 是否需要订单模块
     */
    public Builder needOrder(Boolean needOrder) {
      this.needOrder = needOrder;
      return this;
    }

    /**
     * 是否需要更新 0-不需要 1-更新提醒 2-强制更新
     */
    public Builder updateFlag(Integer updateFlag) {
      this.updateFlag = updateFlag;
      return this;
    }

    /**
     * 是否显示值班切换按钮
     */
    public Builder needOnduty(Boolean needOnduty) {
      this.needOnduty = needOnduty;
      return this;
    }

    @Override
    public GetSettingRsp build() {
      return new GetSettingRsp(items, citys, bannerList, isValidCity, languageList, inforList, orgVO, medicareList, insureDescUrl, needOrder, updateFlag, needOnduty, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetSettingRsp extends ProtoAdapter<GetSettingRsp> {
    ProtoAdapter_GetSettingRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetSettingRsp.class);
    }

    @Override
    public int encodedSize(GetSettingRsp value) {
      return IndexServiceItem.ADAPTER.asRepeated().encodedSizeWithTag(1, value.items)
          + ServiceCityModel.ADAPTER.asRepeated().encodedSizeWithTag(2, value.citys)
          + BannerModel.ADAPTER.asRepeated().encodedSizeWithTag(3, value.bannerList)
          + (value.isValidCity != null ? ProtoAdapter.BOOL.encodedSizeWithTag(4, value.isValidCity) : 0)
          + Language.ADAPTER.asRepeated().encodedSizeWithTag(5, value.languageList)
          + Information.ADAPTER.asRepeated().encodedSizeWithTag(6, value.inforList)
          + (value.orgVO != null ? OrgVO.ADAPTER.encodedSizeWithTag(7, value.orgVO) : 0)
          + MedicareType.ADAPTER.asRepeated().encodedSizeWithTag(8, value.medicareList)
          + (value.insureDescUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.insureDescUrl) : 0)
          + (value.needOrder != null ? ProtoAdapter.BOOL.encodedSizeWithTag(10, value.needOrder) : 0)
          + (value.updateFlag != null ? ProtoAdapter.UINT32.encodedSizeWithTag(11, value.updateFlag) : 0)
          + (value.needOnduty != null ? ProtoAdapter.BOOL.encodedSizeWithTag(12, value.needOnduty) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetSettingRsp value) throws IOException {
      IndexServiceItem.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.items);
      ServiceCityModel.ADAPTER.asRepeated().encodeWithTag(writer, 2, value.citys);
      BannerModel.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.bannerList);
      if (value.isValidCity != null) ProtoAdapter.BOOL.encodeWithTag(writer, 4, value.isValidCity);
      Language.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.languageList);
      Information.ADAPTER.asRepeated().encodeWithTag(writer, 6, value.inforList);
      if (value.orgVO != null) OrgVO.ADAPTER.encodeWithTag(writer, 7, value.orgVO);
      MedicareType.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.medicareList);
      if (value.insureDescUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.insureDescUrl);
      if (value.needOrder != null) ProtoAdapter.BOOL.encodeWithTag(writer, 10, value.needOrder);
      if (value.updateFlag != null) ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.updateFlag);
      if (value.needOnduty != null) ProtoAdapter.BOOL.encodeWithTag(writer, 12, value.needOnduty);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetSettingRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.items.add(IndexServiceItem.ADAPTER.decode(reader)); break;
          case 2: builder.citys.add(ServiceCityModel.ADAPTER.decode(reader)); break;
          case 3: builder.bannerList.add(BannerModel.ADAPTER.decode(reader)); break;
          case 4: builder.isValidCity(ProtoAdapter.BOOL.decode(reader)); break;
          case 5: builder.languageList.add(Language.ADAPTER.decode(reader)); break;
          case 6: builder.inforList.add(Information.ADAPTER.decode(reader)); break;
          case 7: builder.orgVO(OrgVO.ADAPTER.decode(reader)); break;
          case 8: builder.medicareList.add(MedicareType.ADAPTER.decode(reader)); break;
          case 9: builder.insureDescUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.needOrder(ProtoAdapter.BOOL.decode(reader)); break;
          case 11: builder.updateFlag(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.needOnduty(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetSettingRsp redact(GetSettingRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.items, IndexServiceItem.ADAPTER);
      Internal.redactElements(builder.citys, ServiceCityModel.ADAPTER);
      Internal.redactElements(builder.bannerList, BannerModel.ADAPTER);
      Internal.redactElements(builder.languageList, Language.ADAPTER);
      Internal.redactElements(builder.inforList, Information.ADAPTER);
      if (builder.orgVO != null) builder.orgVO = OrgVO.ADAPTER.redact(builder.orgVO);
      Internal.redactElements(builder.medicareList, MedicareType.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
