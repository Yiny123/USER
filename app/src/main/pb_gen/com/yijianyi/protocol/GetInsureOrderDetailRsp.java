// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 1640:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class GetInsureOrderDetailRsp extends Message<GetInsureOrderDetailRsp, GetInsureOrderDetailRsp.Builder> {
  public static final ProtoAdapter<GetInsureOrderDetailRsp> ADAPTER = new ProtoAdapter_GetInsureOrderDetailRsp();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ADLSCORE = 0;

  public static final String DEFAULT_TRYSTARTDATE = "";

  public static final String DEFAULT_TRYENDDATE = "";

  public static final Integer DEFAULT_SERVICEDATENUM = 0;

  public static final String DEFAULT_ORDERSTARTDATE = "";

  public static final String DEFAULT_ORDERENDDATE = "";

  public static final Integer DEFAULT_CONDITION = 0;

  public static final String DEFAULT_CONDITIONSTR = "";

  public static final String DEFAULT_ADDRDETAIL = "";

  public static final Integer DEFAULT_SERVICEADDR = 0;

  public static final String DEFAULT_CREATETIMESTR = "";

  @WireField(
      tag = 1,
      adapter = "com.yijianyi.protocol.Order#ADAPTER"
  )
  public final Order order;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer adlScore;

  /**
   * 自照试用开始日期
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String tryStartDate;

  /**
   * 自照试用结束日期
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String tryEndDate;

  /**
   * 服务天数
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer serviceDateNum;

  /**
   * 订单开始日期
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderStartDate;

  /**
   * 订单结束日期
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderEndDate;

  /**
   * 订单流转状态（不同于status）-1-已取消 0-待接单 1-待支付 2-待发放 3-已发放 4-待指派 5-已指派 6-待服务 7-服务中 8-待结算 9-待评价 10-已完成
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer condition;

  /**
   * 订单流转状态
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String conditionStr;

  /**
   * 详细地址
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String addrDetail;

  /**
   * 订单按钮是否显示配置
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> buttons;

  /**
   * 今日服务地点 -1-暂未确认 0-无 1-在家 2-住院
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer serviceAddr;

  /**
   * 下单时间
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createTimeStr;

  public GetInsureOrderDetailRsp(Order order, Integer adlScore, String tryStartDate, String tryEndDate, Integer serviceDateNum, String orderStartDate, String orderEndDate, Integer condition, String conditionStr, String addrDetail, List<Integer> buttons, Integer serviceAddr, String createTimeStr) {
    this(order, adlScore, tryStartDate, tryEndDate, serviceDateNum, orderStartDate, orderEndDate, condition, conditionStr, addrDetail, buttons, serviceAddr, createTimeStr, ByteString.EMPTY);
  }

  public GetInsureOrderDetailRsp(Order order, Integer adlScore, String tryStartDate, String tryEndDate, Integer serviceDateNum, String orderStartDate, String orderEndDate, Integer condition, String conditionStr, String addrDetail, List<Integer> buttons, Integer serviceAddr, String createTimeStr, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.order = order;
    this.adlScore = adlScore;
    this.tryStartDate = tryStartDate;
    this.tryEndDate = tryEndDate;
    this.serviceDateNum = serviceDateNum;
    this.orderStartDate = orderStartDate;
    this.orderEndDate = orderEndDate;
    this.condition = condition;
    this.conditionStr = conditionStr;
    this.addrDetail = addrDetail;
    this.buttons = Internal.immutableCopyOf("buttons", buttons);
    this.serviceAddr = serviceAddr;
    this.createTimeStr = createTimeStr;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.order = order;
    builder.adlScore = adlScore;
    builder.tryStartDate = tryStartDate;
    builder.tryEndDate = tryEndDate;
    builder.serviceDateNum = serviceDateNum;
    builder.orderStartDate = orderStartDate;
    builder.orderEndDate = orderEndDate;
    builder.condition = condition;
    builder.conditionStr = conditionStr;
    builder.addrDetail = addrDetail;
    builder.buttons = Internal.copyOf("buttons", buttons);
    builder.serviceAddr = serviceAddr;
    builder.createTimeStr = createTimeStr;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetInsureOrderDetailRsp)) return false;
    GetInsureOrderDetailRsp o = (GetInsureOrderDetailRsp) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(order, o.order)
        && Internal.equals(adlScore, o.adlScore)
        && Internal.equals(tryStartDate, o.tryStartDate)
        && Internal.equals(tryEndDate, o.tryEndDate)
        && Internal.equals(serviceDateNum, o.serviceDateNum)
        && Internal.equals(orderStartDate, o.orderStartDate)
        && Internal.equals(orderEndDate, o.orderEndDate)
        && Internal.equals(condition, o.condition)
        && Internal.equals(conditionStr, o.conditionStr)
        && Internal.equals(addrDetail, o.addrDetail)
        && buttons.equals(o.buttons)
        && Internal.equals(serviceAddr, o.serviceAddr)
        && Internal.equals(createTimeStr, o.createTimeStr);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (order != null ? order.hashCode() : 0);
      result = result * 37 + (adlScore != null ? adlScore.hashCode() : 0);
      result = result * 37 + (tryStartDate != null ? tryStartDate.hashCode() : 0);
      result = result * 37 + (tryEndDate != null ? tryEndDate.hashCode() : 0);
      result = result * 37 + (serviceDateNum != null ? serviceDateNum.hashCode() : 0);
      result = result * 37 + (orderStartDate != null ? orderStartDate.hashCode() : 0);
      result = result * 37 + (orderEndDate != null ? orderEndDate.hashCode() : 0);
      result = result * 37 + (condition != null ? condition.hashCode() : 0);
      result = result * 37 + (conditionStr != null ? conditionStr.hashCode() : 0);
      result = result * 37 + (addrDetail != null ? addrDetail.hashCode() : 0);
      result = result * 37 + buttons.hashCode();
      result = result * 37 + (serviceAddr != null ? serviceAddr.hashCode() : 0);
      result = result * 37 + (createTimeStr != null ? createTimeStr.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (order != null) builder.append(", order=").append(order);
    if (adlScore != null) builder.append(", adlScore=").append(adlScore);
    if (tryStartDate != null) builder.append(", tryStartDate=").append(tryStartDate);
    if (tryEndDate != null) builder.append(", tryEndDate=").append(tryEndDate);
    if (serviceDateNum != null) builder.append(", serviceDateNum=").append(serviceDateNum);
    if (orderStartDate != null) builder.append(", orderStartDate=").append(orderStartDate);
    if (orderEndDate != null) builder.append(", orderEndDate=").append(orderEndDate);
    if (condition != null) builder.append(", condition=").append(condition);
    if (conditionStr != null) builder.append(", conditionStr=").append(conditionStr);
    if (addrDetail != null) builder.append(", addrDetail=").append(addrDetail);
    if (!buttons.isEmpty()) builder.append(", buttons=").append(buttons);
    if (serviceAddr != null) builder.append(", serviceAddr=").append(serviceAddr);
    if (createTimeStr != null) builder.append(", createTimeStr=").append(createTimeStr);
    return builder.replace(0, 2, "GetInsureOrderDetailRsp{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetInsureOrderDetailRsp, Builder> {
    public Order order;

    public Integer adlScore;

    public String tryStartDate;

    public String tryEndDate;

    public Integer serviceDateNum;

    public String orderStartDate;

    public String orderEndDate;

    public Integer condition;

    public String conditionStr;

    public String addrDetail;

    public List<Integer> buttons;

    public Integer serviceAddr;

    public String createTimeStr;

    public Builder() {
      buttons = Internal.newMutableList();
    }

    public Builder order(Order order) {
      this.order = order;
      return this;
    }

    public Builder adlScore(Integer adlScore) {
      this.adlScore = adlScore;
      return this;
    }

    /**
     * 自照试用开始日期
     */
    public Builder tryStartDate(String tryStartDate) {
      this.tryStartDate = tryStartDate;
      return this;
    }

    /**
     * 自照试用结束日期
     */
    public Builder tryEndDate(String tryEndDate) {
      this.tryEndDate = tryEndDate;
      return this;
    }

    /**
     * 服务天数
     */
    public Builder serviceDateNum(Integer serviceDateNum) {
      this.serviceDateNum = serviceDateNum;
      return this;
    }

    /**
     * 订单开始日期
     */
    public Builder orderStartDate(String orderStartDate) {
      this.orderStartDate = orderStartDate;
      return this;
    }

    /**
     * 订单结束日期
     */
    public Builder orderEndDate(String orderEndDate) {
      this.orderEndDate = orderEndDate;
      return this;
    }

    /**
     * 订单流转状态（不同于status）-1-已取消 0-待接单 1-待支付 2-待发放 3-已发放 4-待指派 5-已指派 6-待服务 7-服务中 8-待结算 9-待评价 10-已完成
     */
    public Builder condition(Integer condition) {
      this.condition = condition;
      return this;
    }

    /**
     * 订单流转状态
     */
    public Builder conditionStr(String conditionStr) {
      this.conditionStr = conditionStr;
      return this;
    }

    /**
     * 详细地址
     */
    public Builder addrDetail(String addrDetail) {
      this.addrDetail = addrDetail;
      return this;
    }

    /**
     * 订单按钮是否显示配置
     */
    public Builder buttons(List<Integer> buttons) {
      Internal.checkElementsNotNull(buttons);
      this.buttons = buttons;
      return this;
    }

    /**
     * 今日服务地点 -1-暂未确认 0-无 1-在家 2-住院
     */
    public Builder serviceAddr(Integer serviceAddr) {
      this.serviceAddr = serviceAddr;
      return this;
    }

    /**
     * 下单时间
     */
    public Builder createTimeStr(String createTimeStr) {
      this.createTimeStr = createTimeStr;
      return this;
    }

    @Override
    public GetInsureOrderDetailRsp build() {
      return new GetInsureOrderDetailRsp(order, adlScore, tryStartDate, tryEndDate, serviceDateNum, orderStartDate, orderEndDate, condition, conditionStr, addrDetail, buttons, serviceAddr, createTimeStr, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetInsureOrderDetailRsp extends ProtoAdapter<GetInsureOrderDetailRsp> {
    ProtoAdapter_GetInsureOrderDetailRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetInsureOrderDetailRsp.class);
    }

    @Override
    public int encodedSize(GetInsureOrderDetailRsp value) {
      return (value.order != null ? Order.ADAPTER.encodedSizeWithTag(1, value.order) : 0)
          + (value.adlScore != null ? ProtoAdapter.UINT32.encodedSizeWithTag(2, value.adlScore) : 0)
          + (value.tryStartDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.tryStartDate) : 0)
          + (value.tryEndDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.tryEndDate) : 0)
          + (value.serviceDateNum != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.serviceDateNum) : 0)
          + (value.orderStartDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.orderStartDate) : 0)
          + (value.orderEndDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.orderEndDate) : 0)
          + (value.condition != null ? ProtoAdapter.INT32.encodedSizeWithTag(11, value.condition) : 0)
          + (value.conditionStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.conditionStr) : 0)
          + (value.addrDetail != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.addrDetail) : 0)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(14, value.buttons)
          + (value.serviceAddr != null ? ProtoAdapter.UINT32.encodedSizeWithTag(15, value.serviceAddr) : 0)
          + (value.createTimeStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.createTimeStr) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetInsureOrderDetailRsp value) throws IOException {
      if (value.order != null) Order.ADAPTER.encodeWithTag(writer, 1, value.order);
      if (value.adlScore != null) ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.adlScore);
      if (value.tryStartDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.tryStartDate);
      if (value.tryEndDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.tryEndDate);
      if (value.serviceDateNum != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.serviceDateNum);
      if (value.orderStartDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.orderStartDate);
      if (value.orderEndDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.orderEndDate);
      if (value.condition != null) ProtoAdapter.INT32.encodeWithTag(writer, 11, value.condition);
      if (value.conditionStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.conditionStr);
      if (value.addrDetail != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.addrDetail);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 14, value.buttons);
      if (value.serviceAddr != null) ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.serviceAddr);
      if (value.createTimeStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.createTimeStr);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetInsureOrderDetailRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.order(Order.ADAPTER.decode(reader)); break;
          case 2: builder.adlScore(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.tryStartDate(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.tryEndDate(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.serviceDateNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.orderStartDate(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.orderEndDate(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.condition(ProtoAdapter.INT32.decode(reader)); break;
          case 12: builder.conditionStr(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.addrDetail(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.buttons.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.serviceAddr(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.createTimeStr(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetInsureOrderDetailRsp redact(GetInsureOrderDetailRsp value) {
      Builder builder = value.newBuilder();
      if (builder.order != null) builder.order = Order.ADAPTER.redact(builder.order);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
