// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 468:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 结算清单列表Rsp
 */
public final class ListSettlementRsp extends Message<ListSettlementRsp, ListSettlementRsp.Builder> {
  public static final ProtoAdapter<ListSettlementRsp> ADAPTER = new ProtoAdapter_ListSettlementRsp();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final String DEFAULT_PREPAYAMOUNT = "";

  public static final String DEFAULT_CONFIRMCOST = "";

  /**
   * 订单ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 预交金
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String prePayAmount;

  /**
   * 消费金额
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String confirmCost;

  /**
   * 结算清单列表
   */
  @WireField(
      tag = 4,
      adapter = "com.yijianyi.protocol.SettlementVO#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<SettlementVO> voList;

  public ListSettlementRsp(String orderId, String prePayAmount, String confirmCost, List<SettlementVO> voList) {
    this(orderId, prePayAmount, confirmCost, voList, ByteString.EMPTY);
  }

  public ListSettlementRsp(String orderId, String prePayAmount, String confirmCost, List<SettlementVO> voList, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.orderId = orderId;
    this.prePayAmount = prePayAmount;
    this.confirmCost = confirmCost;
    this.voList = Internal.immutableCopyOf("voList", voList);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.orderId = orderId;
    builder.prePayAmount = prePayAmount;
    builder.confirmCost = confirmCost;
    builder.voList = Internal.copyOf("voList", voList);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ListSettlementRsp)) return false;
    ListSettlementRsp o = (ListSettlementRsp) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(prePayAmount, o.prePayAmount)
        && Internal.equals(confirmCost, o.confirmCost)
        && voList.equals(o.voList);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (prePayAmount != null ? prePayAmount.hashCode() : 0);
      result = result * 37 + (confirmCost != null ? confirmCost.hashCode() : 0);
      result = result * 37 + voList.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (prePayAmount != null) builder.append(", prePayAmount=").append(prePayAmount);
    if (confirmCost != null) builder.append(", confirmCost=").append(confirmCost);
    if (!voList.isEmpty()) builder.append(", voList=").append(voList);
    return builder.replace(0, 2, "ListSettlementRsp{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ListSettlementRsp, Builder> {
    public String orderId;

    public String prePayAmount;

    public String confirmCost;

    public List<SettlementVO> voList;

    public Builder() {
      voList = Internal.newMutableList();
    }

    /**
     * 订单ID
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 预交金
     */
    public Builder prePayAmount(String prePayAmount) {
      this.prePayAmount = prePayAmount;
      return this;
    }

    /**
     * 消费金额
     */
    public Builder confirmCost(String confirmCost) {
      this.confirmCost = confirmCost;
      return this;
    }

    /**
     * 结算清单列表
     */
    public Builder voList(List<SettlementVO> voList) {
      Internal.checkElementsNotNull(voList);
      this.voList = voList;
      return this;
    }

    @Override
    public ListSettlementRsp build() {
      return new ListSettlementRsp(orderId, prePayAmount, confirmCost, voList, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ListSettlementRsp extends ProtoAdapter<ListSettlementRsp> {
    ProtoAdapter_ListSettlementRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, ListSettlementRsp.class);
    }

    @Override
    public int encodedSize(ListSettlementRsp value) {
      return (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.orderId) : 0)
          + (value.prePayAmount != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.prePayAmount) : 0)
          + (value.confirmCost != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.confirmCost) : 0)
          + SettlementVO.ADAPTER.asRepeated().encodedSizeWithTag(4, value.voList)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ListSettlementRsp value) throws IOException {
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.orderId);
      if (value.prePayAmount != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.prePayAmount);
      if (value.confirmCost != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.confirmCost);
      SettlementVO.ADAPTER.asRepeated().encodeWithTag(writer, 4, value.voList);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ListSettlementRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.prePayAmount(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.confirmCost(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.voList.add(SettlementVO.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ListSettlementRsp redact(ListSettlementRsp value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.voList, SettlementVO.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
