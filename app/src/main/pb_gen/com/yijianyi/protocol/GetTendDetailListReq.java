// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 1730:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 获取照护明细
 */
public final class GetTendDetailListReq extends Message<GetTendDetailListReq, GetTendDetailListReq.Builder> {
  public static final ProtoAdapter<GetTendDetailListReq> ADAPTER = new ProtoAdapter_GetTendDetailListReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_DETAILTYPEID = 0L;

  /**
   * 病症集合
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> illnessId;

  /**
   * 照护明细类型id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long detailTypeId;

  public GetTendDetailListReq(List<Long> illnessId, Long detailTypeId) {
    this(illnessId, detailTypeId, ByteString.EMPTY);
  }

  public GetTendDetailListReq(List<Long> illnessId, Long detailTypeId, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.illnessId = Internal.immutableCopyOf("illnessId", illnessId);
    this.detailTypeId = detailTypeId;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.illnessId = Internal.copyOf("illnessId", illnessId);
    builder.detailTypeId = detailTypeId;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetTendDetailListReq)) return false;
    GetTendDetailListReq o = (GetTendDetailListReq) other;
    return unknownFields().equals(o.unknownFields())
        && illnessId.equals(o.illnessId)
        && Internal.equals(detailTypeId, o.detailTypeId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + illnessId.hashCode();
      result = result * 37 + (detailTypeId != null ? detailTypeId.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!illnessId.isEmpty()) builder.append(", illnessId=").append(illnessId);
    if (detailTypeId != null) builder.append(", detailTypeId=").append(detailTypeId);
    return builder.replace(0, 2, "GetTendDetailListReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetTendDetailListReq, Builder> {
    public List<Long> illnessId;

    public Long detailTypeId;

    public Builder() {
      illnessId = Internal.newMutableList();
    }

    /**
     * 病症集合
     */
    public Builder illnessId(List<Long> illnessId) {
      Internal.checkElementsNotNull(illnessId);
      this.illnessId = illnessId;
      return this;
    }

    /**
     * 照护明细类型id
     */
    public Builder detailTypeId(Long detailTypeId) {
      this.detailTypeId = detailTypeId;
      return this;
    }

    @Override
    public GetTendDetailListReq build() {
      return new GetTendDetailListReq(illnessId, detailTypeId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetTendDetailListReq extends ProtoAdapter<GetTendDetailListReq> {
    ProtoAdapter_GetTendDetailListReq() {
      super(FieldEncoding.LENGTH_DELIMITED, GetTendDetailListReq.class);
    }

    @Override
    public int encodedSize(GetTendDetailListReq value) {
      return ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(1, value.illnessId)
          + (value.detailTypeId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.detailTypeId) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetTendDetailListReq value) throws IOException {
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 1, value.illnessId);
      if (value.detailTypeId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.detailTypeId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetTendDetailListReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.illnessId.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.detailTypeId(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetTendDetailListReq redact(GetTendDetailListReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
