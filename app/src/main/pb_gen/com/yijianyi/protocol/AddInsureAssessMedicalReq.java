// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 752:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 	护士病史
 */
public final class AddInsureAssessMedicalReq extends Message<AddInsureAssessMedicalReq, AddInsureAssessMedicalReq.Builder> {
  public static final ProtoAdapter<AddInsureAssessMedicalReq> ADAPTER = new ProtoAdapter_AddInsureAssessMedicalReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_INSURENO = "";

  public static final Integer DEFAULT_ISCOMMIT = 0;

  /**
   * 订单唯一id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String insureNO;

  /**
   * 1-保存 2-提交
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer isCommit;

  /**
   * 病例名称，数组形势存在
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> medicalList;

  public AddInsureAssessMedicalReq(String insureNO, Integer isCommit, List<String> medicalList) {
    this(insureNO, isCommit, medicalList, ByteString.EMPTY);
  }

  public AddInsureAssessMedicalReq(String insureNO, Integer isCommit, List<String> medicalList, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.insureNO = insureNO;
    this.isCommit = isCommit;
    this.medicalList = Internal.immutableCopyOf("medicalList", medicalList);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.insureNO = insureNO;
    builder.isCommit = isCommit;
    builder.medicalList = Internal.copyOf("medicalList", medicalList);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof AddInsureAssessMedicalReq)) return false;
    AddInsureAssessMedicalReq o = (AddInsureAssessMedicalReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(insureNO, o.insureNO)
        && Internal.equals(isCommit, o.isCommit)
        && medicalList.equals(o.medicalList);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (insureNO != null ? insureNO.hashCode() : 0);
      result = result * 37 + (isCommit != null ? isCommit.hashCode() : 0);
      result = result * 37 + medicalList.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (insureNO != null) builder.append(", insureNO=").append(insureNO);
    if (isCommit != null) builder.append(", isCommit=").append(isCommit);
    if (!medicalList.isEmpty()) builder.append(", medicalList=").append(medicalList);
    return builder.replace(0, 2, "AddInsureAssessMedicalReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<AddInsureAssessMedicalReq, Builder> {
    public String insureNO;

    public Integer isCommit;

    public List<String> medicalList;

    public Builder() {
      medicalList = Internal.newMutableList();
    }

    /**
     * 订单唯一id
     */
    public Builder insureNO(String insureNO) {
      this.insureNO = insureNO;
      return this;
    }

    /**
     * 1-保存 2-提交
     */
    public Builder isCommit(Integer isCommit) {
      this.isCommit = isCommit;
      return this;
    }

    /**
     * 病例名称，数组形势存在
     */
    public Builder medicalList(List<String> medicalList) {
      Internal.checkElementsNotNull(medicalList);
      this.medicalList = medicalList;
      return this;
    }

    @Override
    public AddInsureAssessMedicalReq build() {
      return new AddInsureAssessMedicalReq(insureNO, isCommit, medicalList, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_AddInsureAssessMedicalReq extends ProtoAdapter<AddInsureAssessMedicalReq> {
    ProtoAdapter_AddInsureAssessMedicalReq() {
      super(FieldEncoding.LENGTH_DELIMITED, AddInsureAssessMedicalReq.class);
    }

    @Override
    public int encodedSize(AddInsureAssessMedicalReq value) {
      return (value.insureNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.insureNO) : 0)
          + (value.isCommit != null ? ProtoAdapter.UINT32.encodedSizeWithTag(2, value.isCommit) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.medicalList)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, AddInsureAssessMedicalReq value) throws IOException {
      if (value.insureNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.insureNO);
      if (value.isCommit != null) ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.isCommit);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.medicalList);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public AddInsureAssessMedicalReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.insureNO(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.isCommit(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.medicalList.add(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public AddInsureAssessMedicalReq redact(AddInsureAssessMedicalReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
