// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 1102:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 变更服务
 */
public final class UpdateOrderServeReq extends Message<UpdateOrderServeReq, UpdateOrderServeReq.Builder> {
  public static final ProtoAdapter<UpdateOrderServeReq> ADAPTER = new ProtoAdapter_UpdateOrderServeReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_HGID = 0L;

  public static final Long DEFAULT_ADDRID = 0L;

  public static final Long DEFAULT_PRICEID = 0L;

  public static final Long DEFAULT_BRANCHID = 0L;

  public static final Long DEFAULT_ROOMID = 0L;

  public static final Long DEFAULT_BEDID = 0L;

  public static final String DEFAULT_PHONE = "";

  public static final String DEFAULT_BEDNO = "";

  public static final Integer DEFAULT_PRICEUPDATETYPE = 0;

  /**
   * 订单id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 变更服务人id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long hgId;

  /**
   * 服务地址id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long addrId;

  /**
   * 更改的基础服务项
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long priceId;

  /**
   * 变更长护险附加项服务
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> addition;

  /**
   * 科室id
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long branchId;

  /**
   * 房间id
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long roomId;

  /**
   * 床位id
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long bedId;

  /**
   * 联系电话
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String phone;

  /**
   * 床号
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bedNo;

  /**
   * 变更服务，科室配置为手动选择收费的时传。 1 - 收取变更前服务费用 2-收取变更后服务费用
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer priceUpdateType;

  public UpdateOrderServeReq(String orderId, Long hgId, Long addrId, Long priceId, List<Long> addition, Long branchId, Long roomId, Long bedId, String phone, String bedNo, Integer priceUpdateType) {
    this(orderId, hgId, addrId, priceId, addition, branchId, roomId, bedId, phone, bedNo, priceUpdateType, ByteString.EMPTY);
  }

  public UpdateOrderServeReq(String orderId, Long hgId, Long addrId, Long priceId, List<Long> addition, Long branchId, Long roomId, Long bedId, String phone, String bedNo, Integer priceUpdateType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.orderId = orderId;
    this.hgId = hgId;
    this.addrId = addrId;
    this.priceId = priceId;
    this.addition = Internal.immutableCopyOf("addition", addition);
    this.branchId = branchId;
    this.roomId = roomId;
    this.bedId = bedId;
    this.phone = phone;
    this.bedNo = bedNo;
    this.priceUpdateType = priceUpdateType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.orderId = orderId;
    builder.hgId = hgId;
    builder.addrId = addrId;
    builder.priceId = priceId;
    builder.addition = Internal.copyOf("addition", addition);
    builder.branchId = branchId;
    builder.roomId = roomId;
    builder.bedId = bedId;
    builder.phone = phone;
    builder.bedNo = bedNo;
    builder.priceUpdateType = priceUpdateType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UpdateOrderServeReq)) return false;
    UpdateOrderServeReq o = (UpdateOrderServeReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(hgId, o.hgId)
        && Internal.equals(addrId, o.addrId)
        && Internal.equals(priceId, o.priceId)
        && addition.equals(o.addition)
        && Internal.equals(branchId, o.branchId)
        && Internal.equals(roomId, o.roomId)
        && Internal.equals(bedId, o.bedId)
        && Internal.equals(phone, o.phone)
        && Internal.equals(bedNo, o.bedNo)
        && Internal.equals(priceUpdateType, o.priceUpdateType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (hgId != null ? hgId.hashCode() : 0);
      result = result * 37 + (addrId != null ? addrId.hashCode() : 0);
      result = result * 37 + (priceId != null ? priceId.hashCode() : 0);
      result = result * 37 + addition.hashCode();
      result = result * 37 + (branchId != null ? branchId.hashCode() : 0);
      result = result * 37 + (roomId != null ? roomId.hashCode() : 0);
      result = result * 37 + (bedId != null ? bedId.hashCode() : 0);
      result = result * 37 + (phone != null ? phone.hashCode() : 0);
      result = result * 37 + (bedNo != null ? bedNo.hashCode() : 0);
      result = result * 37 + (priceUpdateType != null ? priceUpdateType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (hgId != null) builder.append(", hgId=").append(hgId);
    if (addrId != null) builder.append(", addrId=").append(addrId);
    if (priceId != null) builder.append(", priceId=").append(priceId);
    if (!addition.isEmpty()) builder.append(", addition=").append(addition);
    if (branchId != null) builder.append(", branchId=").append(branchId);
    if (roomId != null) builder.append(", roomId=").append(roomId);
    if (bedId != null) builder.append(", bedId=").append(bedId);
    if (phone != null) builder.append(", phone=").append(phone);
    if (bedNo != null) builder.append(", bedNo=").append(bedNo);
    if (priceUpdateType != null) builder.append(", priceUpdateType=").append(priceUpdateType);
    return builder.replace(0, 2, "UpdateOrderServeReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<UpdateOrderServeReq, Builder> {
    public String orderId;

    public Long hgId;

    public Long addrId;

    public Long priceId;

    public List<Long> addition;

    public Long branchId;

    public Long roomId;

    public Long bedId;

    public String phone;

    public String bedNo;

    public Integer priceUpdateType;

    public Builder() {
      addition = Internal.newMutableList();
    }

    /**
     * 订单id
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 变更服务人id
     */
    public Builder hgId(Long hgId) {
      this.hgId = hgId;
      return this;
    }

    /**
     * 服务地址id
     */
    public Builder addrId(Long addrId) {
      this.addrId = addrId;
      return this;
    }

    /**
     * 更改的基础服务项
     */
    public Builder priceId(Long priceId) {
      this.priceId = priceId;
      return this;
    }

    /**
     * 变更长护险附加项服务
     */
    public Builder addition(List<Long> addition) {
      Internal.checkElementsNotNull(addition);
      this.addition = addition;
      return this;
    }

    /**
     * 科室id
     */
    public Builder branchId(Long branchId) {
      this.branchId = branchId;
      return this;
    }

    /**
     * 房间id
     */
    public Builder roomId(Long roomId) {
      this.roomId = roomId;
      return this;
    }

    /**
     * 床位id
     */
    public Builder bedId(Long bedId) {
      this.bedId = bedId;
      return this;
    }

    /**
     * 联系电话
     */
    public Builder phone(String phone) {
      this.phone = phone;
      return this;
    }

    /**
     * 床号
     */
    public Builder bedNo(String bedNo) {
      this.bedNo = bedNo;
      return this;
    }

    /**
     * 变更服务，科室配置为手动选择收费的时传。 1 - 收取变更前服务费用 2-收取变更后服务费用
     */
    public Builder priceUpdateType(Integer priceUpdateType) {
      this.priceUpdateType = priceUpdateType;
      return this;
    }

    @Override
    public UpdateOrderServeReq build() {
      return new UpdateOrderServeReq(orderId, hgId, addrId, priceId, addition, branchId, roomId, bedId, phone, bedNo, priceUpdateType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UpdateOrderServeReq extends ProtoAdapter<UpdateOrderServeReq> {
    ProtoAdapter_UpdateOrderServeReq() {
      super(FieldEncoding.LENGTH_DELIMITED, UpdateOrderServeReq.class);
    }

    @Override
    public int encodedSize(UpdateOrderServeReq value) {
      return (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.orderId) : 0)
          + (value.hgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.hgId) : 0)
          + (value.addrId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.addrId) : 0)
          + (value.priceId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.priceId) : 0)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(5, value.addition)
          + (value.branchId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(6, value.branchId) : 0)
          + (value.roomId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(7, value.roomId) : 0)
          + (value.bedId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.bedId) : 0)
          + (value.phone != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.phone) : 0)
          + (value.bedNo != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.bedNo) : 0)
          + (value.priceUpdateType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(11, value.priceUpdateType) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UpdateOrderServeReq value) throws IOException {
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.orderId);
      if (value.hgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.hgId);
      if (value.addrId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.addrId);
      if (value.priceId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.priceId);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 5, value.addition);
      if (value.branchId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.branchId);
      if (value.roomId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.roomId);
      if (value.bedId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.bedId);
      if (value.phone != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.phone);
      if (value.bedNo != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.bedNo);
      if (value.priceUpdateType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.priceUpdateType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UpdateOrderServeReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.hgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.addrId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.priceId(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.addition.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.branchId(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.roomId(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.bedId(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.phone(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.bedNo(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.priceUpdateType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UpdateOrderServeReq redact(UpdateOrderServeReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
