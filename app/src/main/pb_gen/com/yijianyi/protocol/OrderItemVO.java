// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 348:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class OrderItemVO extends Message<OrderItemVO, OrderItemVO.Builder> {
  public static final ProtoAdapter<OrderItemVO> ADAPTER = new ProtoAdapter_OrderItemVO();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_SERVICE = "";

  public static final String DEFAULT_SERVICETIME = "";

  public static final String DEFAULT_LOCATION = "";

  public static final Long DEFAULT_COST = 0L;

  public static final String DEFAULT_STAFFNAME = "";

  public static final Integer DEFAULT_PAYSTATE = 0;

  public static final Integer DEFAULT_HASEXTRA = 0;

  public static final Long DEFAULT_SORTSCORE = 0L;

  public static final String DEFAULT_COSTSTR = "";

  public static final Integer DEFAULT_AFFIRMSTATUS = 0;

  public static final Integer DEFAULT_STATUS = 0;

  public static final Long DEFAULT_STAFFID = 0L;

  public static final Integer DEFAULT_UPDATESTATUS = 0;

  public static final Long DEFAULT_EXTRAITEMCOST = 0L;

  public static final String DEFAULT_EXTRAITEMCOSTSTR = "";

  public static final Long DEFAULT_BASISCOST = 0L;

  public static final String DEFAULT_BASISCOSTSTR = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 服务内容
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String service;

  /**
   * 服务时间
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceTime;

  /**
   * 服务地点
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String location;

  /**
   * 费用（等于0即已取消）
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long cost;

  /**
   * 服务人员
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String staffName;

  /**
   * 支付状态
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payState;

  /**
   * 附加项列表
   */
  @WireField(
      tag = 8,
      adapter = "com.yijianyi.protocol.ExtraItemVO#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ExtraItemVO> extraVOList;

  /**
   * 是否有附加项 0-无 1-有
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer hasExtra;

  /**
   * 排序分数
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long sortScore;

  /**
   * 费用
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String costStr;

  /**
   * 协助护工
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> hgName;

  /**
   * 当日服务项状态 0-不可确认 1-已确认 2-待确认 3-已支付
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer affirmStatus;

  /**
   * -1-已取消 0-未确认 1-已完成
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer status;

  /**
   * 护工、协助护工id
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> hgId;

  /**
   * 服务人员id
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long staffId;

  /**
   * 是否允许修改子服务项： 0-允许 1-不允许
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer updateStatus;

  /**
   * 基础服务列表
   */
  @WireField(
      tag = 19,
      adapter = "com.yijianyi.protocol.ExtraItemVO#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<ExtraItemVO> basisVOList;

  /**
   * 附加服务总费用
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long extraitemCost;

  /**
   * 附加服务总费用（小数）
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String extraitemCostStr;

  /**
   * 基础服务费用
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long basisCost;

  /**
   * 基础服务费用（小数）
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String basisCostStr;

  public OrderItemVO(Long id, String service, String serviceTime, String location, Long cost, String staffName, Integer payState, List<ExtraItemVO> extraVOList, Integer hasExtra, Long sortScore, String costStr, List<String> hgName, Integer affirmStatus, Integer status, List<Long> hgId, Long staffId, Integer updateStatus, List<ExtraItemVO> basisVOList, Long extraitemCost, String extraitemCostStr, Long basisCost, String basisCostStr) {
    this(id, service, serviceTime, location, cost, staffName, payState, extraVOList, hasExtra, sortScore, costStr, hgName, affirmStatus, status, hgId, staffId, updateStatus, basisVOList, extraitemCost, extraitemCostStr, basisCost, basisCostStr, ByteString.EMPTY);
  }

  public OrderItemVO(Long id, String service, String serviceTime, String location, Long cost, String staffName, Integer payState, List<ExtraItemVO> extraVOList, Integer hasExtra, Long sortScore, String costStr, List<String> hgName, Integer affirmStatus, Integer status, List<Long> hgId, Long staffId, Integer updateStatus, List<ExtraItemVO> basisVOList, Long extraitemCost, String extraitemCostStr, Long basisCost, String basisCostStr, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.service = service;
    this.serviceTime = serviceTime;
    this.location = location;
    this.cost = cost;
    this.staffName = staffName;
    this.payState = payState;
    this.extraVOList = Internal.immutableCopyOf("extraVOList", extraVOList);
    this.hasExtra = hasExtra;
    this.sortScore = sortScore;
    this.costStr = costStr;
    this.hgName = Internal.immutableCopyOf("hgName", hgName);
    this.affirmStatus = affirmStatus;
    this.status = status;
    this.hgId = Internal.immutableCopyOf("hgId", hgId);
    this.staffId = staffId;
    this.updateStatus = updateStatus;
    this.basisVOList = Internal.immutableCopyOf("basisVOList", basisVOList);
    this.extraitemCost = extraitemCost;
    this.extraitemCostStr = extraitemCostStr;
    this.basisCost = basisCost;
    this.basisCostStr = basisCostStr;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.service = service;
    builder.serviceTime = serviceTime;
    builder.location = location;
    builder.cost = cost;
    builder.staffName = staffName;
    builder.payState = payState;
    builder.extraVOList = Internal.copyOf("extraVOList", extraVOList);
    builder.hasExtra = hasExtra;
    builder.sortScore = sortScore;
    builder.costStr = costStr;
    builder.hgName = Internal.copyOf("hgName", hgName);
    builder.affirmStatus = affirmStatus;
    builder.status = status;
    builder.hgId = Internal.copyOf("hgId", hgId);
    builder.staffId = staffId;
    builder.updateStatus = updateStatus;
    builder.basisVOList = Internal.copyOf("basisVOList", basisVOList);
    builder.extraitemCost = extraitemCost;
    builder.extraitemCostStr = extraitemCostStr;
    builder.basisCost = basisCost;
    builder.basisCostStr = basisCostStr;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OrderItemVO)) return false;
    OrderItemVO o = (OrderItemVO) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(service, o.service)
        && Internal.equals(serviceTime, o.serviceTime)
        && Internal.equals(location, o.location)
        && Internal.equals(cost, o.cost)
        && Internal.equals(staffName, o.staffName)
        && Internal.equals(payState, o.payState)
        && extraVOList.equals(o.extraVOList)
        && Internal.equals(hasExtra, o.hasExtra)
        && Internal.equals(sortScore, o.sortScore)
        && Internal.equals(costStr, o.costStr)
        && hgName.equals(o.hgName)
        && Internal.equals(affirmStatus, o.affirmStatus)
        && Internal.equals(status, o.status)
        && hgId.equals(o.hgId)
        && Internal.equals(staffId, o.staffId)
        && Internal.equals(updateStatus, o.updateStatus)
        && basisVOList.equals(o.basisVOList)
        && Internal.equals(extraitemCost, o.extraitemCost)
        && Internal.equals(extraitemCostStr, o.extraitemCostStr)
        && Internal.equals(basisCost, o.basisCost)
        && Internal.equals(basisCostStr, o.basisCostStr);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (service != null ? service.hashCode() : 0);
      result = result * 37 + (serviceTime != null ? serviceTime.hashCode() : 0);
      result = result * 37 + (location != null ? location.hashCode() : 0);
      result = result * 37 + (cost != null ? cost.hashCode() : 0);
      result = result * 37 + (staffName != null ? staffName.hashCode() : 0);
      result = result * 37 + (payState != null ? payState.hashCode() : 0);
      result = result * 37 + extraVOList.hashCode();
      result = result * 37 + (hasExtra != null ? hasExtra.hashCode() : 0);
      result = result * 37 + (sortScore != null ? sortScore.hashCode() : 0);
      result = result * 37 + (costStr != null ? costStr.hashCode() : 0);
      result = result * 37 + hgName.hashCode();
      result = result * 37 + (affirmStatus != null ? affirmStatus.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + hgId.hashCode();
      result = result * 37 + (staffId != null ? staffId.hashCode() : 0);
      result = result * 37 + (updateStatus != null ? updateStatus.hashCode() : 0);
      result = result * 37 + basisVOList.hashCode();
      result = result * 37 + (extraitemCost != null ? extraitemCost.hashCode() : 0);
      result = result * 37 + (extraitemCostStr != null ? extraitemCostStr.hashCode() : 0);
      result = result * 37 + (basisCost != null ? basisCost.hashCode() : 0);
      result = result * 37 + (basisCostStr != null ? basisCostStr.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (service != null) builder.append(", service=").append(service);
    if (serviceTime != null) builder.append(", serviceTime=").append(serviceTime);
    if (location != null) builder.append(", location=").append(location);
    if (cost != null) builder.append(", cost=").append(cost);
    if (staffName != null) builder.append(", staffName=").append(staffName);
    if (payState != null) builder.append(", payState=").append(payState);
    if (!extraVOList.isEmpty()) builder.append(", extraVOList=").append(extraVOList);
    if (hasExtra != null) builder.append(", hasExtra=").append(hasExtra);
    if (sortScore != null) builder.append(", sortScore=").append(sortScore);
    if (costStr != null) builder.append(", costStr=").append(costStr);
    if (!hgName.isEmpty()) builder.append(", hgName=").append(hgName);
    if (affirmStatus != null) builder.append(", affirmStatus=").append(affirmStatus);
    if (status != null) builder.append(", status=").append(status);
    if (!hgId.isEmpty()) builder.append(", hgId=").append(hgId);
    if (staffId != null) builder.append(", staffId=").append(staffId);
    if (updateStatus != null) builder.append(", updateStatus=").append(updateStatus);
    if (!basisVOList.isEmpty()) builder.append(", basisVOList=").append(basisVOList);
    if (extraitemCost != null) builder.append(", extraitemCost=").append(extraitemCost);
    if (extraitemCostStr != null) builder.append(", extraitemCostStr=").append(extraitemCostStr);
    if (basisCost != null) builder.append(", basisCost=").append(basisCost);
    if (basisCostStr != null) builder.append(", basisCostStr=").append(basisCostStr);
    return builder.replace(0, 2, "OrderItemVO{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<OrderItemVO, Builder> {
    public Long id;

    public String service;

    public String serviceTime;

    public String location;

    public Long cost;

    public String staffName;

    public Integer payState;

    public List<ExtraItemVO> extraVOList;

    public Integer hasExtra;

    public Long sortScore;

    public String costStr;

    public List<String> hgName;

    public Integer affirmStatus;

    public Integer status;

    public List<Long> hgId;

    public Long staffId;

    public Integer updateStatus;

    public List<ExtraItemVO> basisVOList;

    public Long extraitemCost;

    public String extraitemCostStr;

    public Long basisCost;

    public String basisCostStr;

    public Builder() {
      extraVOList = Internal.newMutableList();
      hgName = Internal.newMutableList();
      hgId = Internal.newMutableList();
      basisVOList = Internal.newMutableList();
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 服务内容
     */
    public Builder service(String service) {
      this.service = service;
      return this;
    }

    /**
     * 服务时间
     */
    public Builder serviceTime(String serviceTime) {
      this.serviceTime = serviceTime;
      return this;
    }

    /**
     * 服务地点
     */
    public Builder location(String location) {
      this.location = location;
      return this;
    }

    /**
     * 费用（等于0即已取消）
     */
    public Builder cost(Long cost) {
      this.cost = cost;
      return this;
    }

    /**
     * 服务人员
     */
    public Builder staffName(String staffName) {
      this.staffName = staffName;
      return this;
    }

    /**
     * 支付状态
     */
    public Builder payState(Integer payState) {
      this.payState = payState;
      return this;
    }

    /**
     * 附加项列表
     */
    public Builder extraVOList(List<ExtraItemVO> extraVOList) {
      Internal.checkElementsNotNull(extraVOList);
      this.extraVOList = extraVOList;
      return this;
    }

    /**
     * 是否有附加项 0-无 1-有
     */
    public Builder hasExtra(Integer hasExtra) {
      this.hasExtra = hasExtra;
      return this;
    }

    /**
     * 排序分数
     */
    public Builder sortScore(Long sortScore) {
      this.sortScore = sortScore;
      return this;
    }

    /**
     * 费用
     */
    public Builder costStr(String costStr) {
      this.costStr = costStr;
      return this;
    }

    /**
     * 协助护工
     */
    public Builder hgName(List<String> hgName) {
      Internal.checkElementsNotNull(hgName);
      this.hgName = hgName;
      return this;
    }

    /**
     * 当日服务项状态 0-不可确认 1-已确认 2-待确认 3-已支付
     */
    public Builder affirmStatus(Integer affirmStatus) {
      this.affirmStatus = affirmStatus;
      return this;
    }

    /**
     * -1-已取消 0-未确认 1-已完成
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 护工、协助护工id
     */
    public Builder hgId(List<Long> hgId) {
      Internal.checkElementsNotNull(hgId);
      this.hgId = hgId;
      return this;
    }

    /**
     * 服务人员id
     */
    public Builder staffId(Long staffId) {
      this.staffId = staffId;
      return this;
    }

    /**
     * 是否允许修改子服务项： 0-允许 1-不允许
     */
    public Builder updateStatus(Integer updateStatus) {
      this.updateStatus = updateStatus;
      return this;
    }

    /**
     * 基础服务列表
     */
    public Builder basisVOList(List<ExtraItemVO> basisVOList) {
      Internal.checkElementsNotNull(basisVOList);
      this.basisVOList = basisVOList;
      return this;
    }

    /**
     * 附加服务总费用
     */
    public Builder extraitemCost(Long extraitemCost) {
      this.extraitemCost = extraitemCost;
      return this;
    }

    /**
     * 附加服务总费用（小数）
     */
    public Builder extraitemCostStr(String extraitemCostStr) {
      this.extraitemCostStr = extraitemCostStr;
      return this;
    }

    /**
     * 基础服务费用
     */
    public Builder basisCost(Long basisCost) {
      this.basisCost = basisCost;
      return this;
    }

    /**
     * 基础服务费用（小数）
     */
    public Builder basisCostStr(String basisCostStr) {
      this.basisCostStr = basisCostStr;
      return this;
    }

    @Override
    public OrderItemVO build() {
      return new OrderItemVO(id, service, serviceTime, location, cost, staffName, payState, extraVOList, hasExtra, sortScore, costStr, hgName, affirmStatus, status, hgId, staffId, updateStatus, basisVOList, extraitemCost, extraitemCostStr, basisCost, basisCostStr, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OrderItemVO extends ProtoAdapter<OrderItemVO> {
    ProtoAdapter_OrderItemVO() {
      super(FieldEncoding.LENGTH_DELIMITED, OrderItemVO.class);
    }

    @Override
    public int encodedSize(OrderItemVO value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.service != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.service) : 0)
          + (value.serviceTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.serviceTime) : 0)
          + (value.location != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.location) : 0)
          + (value.cost != null ? ProtoAdapter.UINT64.encodedSizeWithTag(5, value.cost) : 0)
          + (value.staffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.staffName) : 0)
          + (value.payState != null ? ProtoAdapter.UINT32.encodedSizeWithTag(7, value.payState) : 0)
          + ExtraItemVO.ADAPTER.asRepeated().encodedSizeWithTag(8, value.extraVOList)
          + (value.hasExtra != null ? ProtoAdapter.UINT32.encodedSizeWithTag(9, value.hasExtra) : 0)
          + (value.sortScore != null ? ProtoAdapter.UINT64.encodedSizeWithTag(10, value.sortScore) : 0)
          + (value.costStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.costStr) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(12, value.hgName)
          + (value.affirmStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(13, value.affirmStatus) : 0)
          + (value.status != null ? ProtoAdapter.UINT32.encodedSizeWithTag(14, value.status) : 0)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(15, value.hgId)
          + (value.staffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(16, value.staffId) : 0)
          + (value.updateStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(18, value.updateStatus) : 0)
          + ExtraItemVO.ADAPTER.asRepeated().encodedSizeWithTag(19, value.basisVOList)
          + (value.extraitemCost != null ? ProtoAdapter.UINT64.encodedSizeWithTag(20, value.extraitemCost) : 0)
          + (value.extraitemCostStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.extraitemCostStr) : 0)
          + (value.basisCost != null ? ProtoAdapter.UINT64.encodedSizeWithTag(22, value.basisCost) : 0)
          + (value.basisCostStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.basisCostStr) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OrderItemVO value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.service != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.service);
      if (value.serviceTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.serviceTime);
      if (value.location != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.location);
      if (value.cost != null) ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.cost);
      if (value.staffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.staffName);
      if (value.payState != null) ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.payState);
      ExtraItemVO.ADAPTER.asRepeated().encodeWithTag(writer, 8, value.extraVOList);
      if (value.hasExtra != null) ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.hasExtra);
      if (value.sortScore != null) ProtoAdapter.UINT64.encodeWithTag(writer, 10, value.sortScore);
      if (value.costStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.costStr);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 12, value.hgName);
      if (value.affirmStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.affirmStatus);
      if (value.status != null) ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.status);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 15, value.hgId);
      if (value.staffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 16, value.staffId);
      if (value.updateStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.updateStatus);
      ExtraItemVO.ADAPTER.asRepeated().encodeWithTag(writer, 19, value.basisVOList);
      if (value.extraitemCost != null) ProtoAdapter.UINT64.encodeWithTag(writer, 20, value.extraitemCost);
      if (value.extraitemCostStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.extraitemCostStr);
      if (value.basisCost != null) ProtoAdapter.UINT64.encodeWithTag(writer, 22, value.basisCost);
      if (value.basisCostStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.basisCostStr);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OrderItemVO decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.service(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.serviceTime(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.location(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.cost(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.staffName(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.payState(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.extraVOList.add(ExtraItemVO.ADAPTER.decode(reader)); break;
          case 9: builder.hasExtra(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.sortScore(ProtoAdapter.UINT64.decode(reader)); break;
          case 11: builder.costStr(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.hgName.add(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.affirmStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.status(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.hgId.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 16: builder.staffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 18: builder.updateStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.basisVOList.add(ExtraItemVO.ADAPTER.decode(reader)); break;
          case 20: builder.extraitemCost(ProtoAdapter.UINT64.decode(reader)); break;
          case 21: builder.extraitemCostStr(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.basisCost(ProtoAdapter.UINT64.decode(reader)); break;
          case 23: builder.basisCostStr(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OrderItemVO redact(OrderItemVO value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.extraVOList, ExtraItemVO.ADAPTER);
      Internal.redactElements(builder.basisVOList, ExtraItemVO.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
