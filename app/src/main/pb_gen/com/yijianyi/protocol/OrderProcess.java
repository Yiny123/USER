// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 187:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 订单处理记录
 */
public final class OrderProcess extends Message<OrderProcess, OrderProcess.Builder> {
  public static final ProtoAdapter<OrderProcess> ADAPTER = new ProtoAdapter_OrderProcess();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_USERID = 0L;

  public static final Long DEFAULT_HGID = 0L;

  public static final String DEFAULT_USERNAME = "";

  public static final Integer DEFAULT_PROCESSTYPE = 0;

  public static final String DEFAULT_CONTENT = "";

  public static final Long DEFAULT_PROCESSTIME = 0L;

  public static final Long DEFAULT_EXTENDTYPE = 0L;

  public static final String DEFAULT_PROCESSTIMESTR = "";

  public static final String DEFAULT_SIGNIMGID = "";

  public static final Long DEFAULT_ORDEREXTRAID = 0L;

  public static final Integer DEFAULT_PAYTYPE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 订单号
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 处理人-用户
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 处理人-护工
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long hgId;

  /**
   * 处理人
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String userName;

  /**
   * 处理类型 0-创建订单 1-取消订单 2-分配护工 3-开启服务 4-确认服务 5-添加附加项 6-变更服务 7-校正附加项 8-结束订单 9-评价订单 10-支付预交金和门禁卡 11-支付订单 12-附加项收款 13-订单收款   14-添加分配协助护工 15-关闭订单项
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer processType;

  /**
   * 处理内容
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String content;

  /**
   * 处理时间
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long processTime;

  /**
   * 子类型（与processType关联）6变更服务：1-变更联系信息，2-变更服务项目，3-变更服务人员 4-变更科室 5-变更房号 6-变更床号
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long extendType;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String processTimeStr;

  /**
   * 订单签名
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String signImgId;

  /**
   * 门禁卡租借记录id
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long orderExtraId;

  /**
   * 暂时记录除下单时门禁卡的支付方式
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payType;

  public OrderProcess(Long id, String orderId, Long userId, Long hgId, String userName, Integer processType, String content, Long processTime, Long extendType, String processTimeStr, String signImgId, Long orderExtraId, Integer payType) {
    this(id, orderId, userId, hgId, userName, processType, content, processTime, extendType, processTimeStr, signImgId, orderExtraId, payType, ByteString.EMPTY);
  }

  public OrderProcess(Long id, String orderId, Long userId, Long hgId, String userName, Integer processType, String content, Long processTime, Long extendType, String processTimeStr, String signImgId, Long orderExtraId, Integer payType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.orderId = orderId;
    this.userId = userId;
    this.hgId = hgId;
    this.userName = userName;
    this.processType = processType;
    this.content = content;
    this.processTime = processTime;
    this.extendType = extendType;
    this.processTimeStr = processTimeStr;
    this.signImgId = signImgId;
    this.orderExtraId = orderExtraId;
    this.payType = payType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.orderId = orderId;
    builder.userId = userId;
    builder.hgId = hgId;
    builder.userName = userName;
    builder.processType = processType;
    builder.content = content;
    builder.processTime = processTime;
    builder.extendType = extendType;
    builder.processTimeStr = processTimeStr;
    builder.signImgId = signImgId;
    builder.orderExtraId = orderExtraId;
    builder.payType = payType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OrderProcess)) return false;
    OrderProcess o = (OrderProcess) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(userId, o.userId)
        && Internal.equals(hgId, o.hgId)
        && Internal.equals(userName, o.userName)
        && Internal.equals(processType, o.processType)
        && Internal.equals(content, o.content)
        && Internal.equals(processTime, o.processTime)
        && Internal.equals(extendType, o.extendType)
        && Internal.equals(processTimeStr, o.processTimeStr)
        && Internal.equals(signImgId, o.signImgId)
        && Internal.equals(orderExtraId, o.orderExtraId)
        && Internal.equals(payType, o.payType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (hgId != null ? hgId.hashCode() : 0);
      result = result * 37 + (userName != null ? userName.hashCode() : 0);
      result = result * 37 + (processType != null ? processType.hashCode() : 0);
      result = result * 37 + (content != null ? content.hashCode() : 0);
      result = result * 37 + (processTime != null ? processTime.hashCode() : 0);
      result = result * 37 + (extendType != null ? extendType.hashCode() : 0);
      result = result * 37 + (processTimeStr != null ? processTimeStr.hashCode() : 0);
      result = result * 37 + (signImgId != null ? signImgId.hashCode() : 0);
      result = result * 37 + (orderExtraId != null ? orderExtraId.hashCode() : 0);
      result = result * 37 + (payType != null ? payType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (userId != null) builder.append(", userId=").append(userId);
    if (hgId != null) builder.append(", hgId=").append(hgId);
    if (userName != null) builder.append(", userName=").append(userName);
    if (processType != null) builder.append(", processType=").append(processType);
    if (content != null) builder.append(", content=").append(content);
    if (processTime != null) builder.append(", processTime=").append(processTime);
    if (extendType != null) builder.append(", extendType=").append(extendType);
    if (processTimeStr != null) builder.append(", processTimeStr=").append(processTimeStr);
    if (signImgId != null) builder.append(", signImgId=").append(signImgId);
    if (orderExtraId != null) builder.append(", orderExtraId=").append(orderExtraId);
    if (payType != null) builder.append(", payType=").append(payType);
    return builder.replace(0, 2, "OrderProcess{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<OrderProcess, Builder> {
    public Long id;

    public String orderId;

    public Long userId;

    public Long hgId;

    public String userName;

    public Integer processType;

    public String content;

    public Long processTime;

    public Long extendType;

    public String processTimeStr;

    public String signImgId;

    public Long orderExtraId;

    public Integer payType;

    public Builder() {
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 订单号
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 处理人-用户
     */
    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 处理人-护工
     */
    public Builder hgId(Long hgId) {
      this.hgId = hgId;
      return this;
    }

    /**
     * 处理人
     */
    public Builder userName(String userName) {
      this.userName = userName;
      return this;
    }

    /**
     * 处理类型 0-创建订单 1-取消订单 2-分配护工 3-开启服务 4-确认服务 5-添加附加项 6-变更服务 7-校正附加项 8-结束订单 9-评价订单 10-支付预交金和门禁卡 11-支付订单 12-附加项收款 13-订单收款   14-添加分配协助护工 15-关闭订单项
     */
    public Builder processType(Integer processType) {
      this.processType = processType;
      return this;
    }

    /**
     * 处理内容
     */
    public Builder content(String content) {
      this.content = content;
      return this;
    }

    /**
     * 处理时间
     */
    public Builder processTime(Long processTime) {
      this.processTime = processTime;
      return this;
    }

    /**
     * 子类型（与processType关联）6变更服务：1-变更联系信息，2-变更服务项目，3-变更服务人员 4-变更科室 5-变更房号 6-变更床号
     */
    public Builder extendType(Long extendType) {
      this.extendType = extendType;
      return this;
    }

    public Builder processTimeStr(String processTimeStr) {
      this.processTimeStr = processTimeStr;
      return this;
    }

    /**
     * 订单签名
     */
    public Builder signImgId(String signImgId) {
      this.signImgId = signImgId;
      return this;
    }

    /**
     * 门禁卡租借记录id
     */
    public Builder orderExtraId(Long orderExtraId) {
      this.orderExtraId = orderExtraId;
      return this;
    }

    /**
     * 暂时记录除下单时门禁卡的支付方式
     */
    public Builder payType(Integer payType) {
      this.payType = payType;
      return this;
    }

    @Override
    public OrderProcess build() {
      return new OrderProcess(id, orderId, userId, hgId, userName, processType, content, processTime, extendType, processTimeStr, signImgId, orderExtraId, payType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OrderProcess extends ProtoAdapter<OrderProcess> {
    ProtoAdapter_OrderProcess() {
      super(FieldEncoding.LENGTH_DELIMITED, OrderProcess.class);
    }

    @Override
    public int encodedSize(OrderProcess value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.orderId) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.userId) : 0)
          + (value.hgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.hgId) : 0)
          + (value.userName != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.userName) : 0)
          + (value.processType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.processType) : 0)
          + (value.content != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.content) : 0)
          + (value.processTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.processTime) : 0)
          + (value.extendType != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.extendType) : 0)
          + (value.processTimeStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.processTimeStr) : 0)
          + (value.signImgId != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.signImgId) : 0)
          + (value.orderExtraId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(12, value.orderExtraId) : 0)
          + (value.payType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(13, value.payType) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OrderProcess value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.orderId);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.userId);
      if (value.hgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.hgId);
      if (value.userName != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.userName);
      if (value.processType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.processType);
      if (value.content != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.content);
      if (value.processTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.processTime);
      if (value.extendType != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.extendType);
      if (value.processTimeStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.processTimeStr);
      if (value.signImgId != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.signImgId);
      if (value.orderExtraId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 12, value.orderExtraId);
      if (value.payType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.payType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OrderProcess decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.hgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.userName(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.processType(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.content(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.processTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.extendType(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.processTimeStr(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.signImgId(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.orderExtraId(ProtoAdapter.UINT64.decode(reader)); break;
          case 13: builder.payType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OrderProcess redact(OrderProcess value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
