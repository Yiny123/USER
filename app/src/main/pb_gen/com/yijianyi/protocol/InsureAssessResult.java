// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AssessModel.proto at 8:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 评估报告
 */
public final class InsureAssessResult extends Message<InsureAssessResult, InsureAssessResult.Builder> {
  public static final ProtoAdapter<InsureAssessResult> ADAPTER = new ProtoAdapter_InsureAssessResult();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_IDCARD = "";

  public static final Integer DEFAULT_ASSESSTYPE = 0;

  public static final String DEFAULT_RELATION = "";

  public static final String DEFAULT_ASSISTIDCARD = "";

  public static final String DEFAULT_ASSISTPHONE = "";

  public static final Long DEFAULT_EVALUATIONID = 0L;

  public static final String DEFAULT_ASSESSADDR = "";

  public static final String DEFAULT_KINSSIGNPIC = "";

  public static final String DEFAULT_ASSESSSIGNPIC = "";

  public static final Integer DEFAULT_LEVEL = 0;

  public static final Integer DEFAULT_ABILITYLEVEL = 0;

  public static final Integer DEFAULT_NURSELEVEL = 0;

  public static final Integer DEFAULT_ILLLEVEL = 0;

  public static final Integer DEFAULT_SSRSLEVEL = 0;

  public static final Integer DEFAULT_TENDTYPE = 0;

  public static final Integer DEFAULT_SUGGESTSERVICETYPE = 0;

  public static final String DEFAULT_SUGGESTSERVICECONTENTOTHER = "";

  public static final String DEFAULT_SUGGESTSERVICETIME = "";

  public static final String DEFAULT_SPECIALREMARK = "";

  public static final Integer DEFAULT_STATUS = 0;

  public static final String DEFAULT_KINSNAME = "";

  public static final Integer DEFAULT_SEX = 0;

  public static final String DEFAULT_NATION = "";

  public static final String DEFAULT_BIRTHDAY = "";

  public static final String DEFAULT_DISTRICT = "";

  public static final String DEFAULT_PIC = "";

  public static final String DEFAULT_PROVINCE = "";

  public static final String DEFAULT_CITY = "";

  public static final Integer DEFAULT_MARRIAGE = 0;

  public static final Integer DEFAULT_DWELLING = 0;

  public static final Integer DEFAULT_EDUCATION = 0;

  public static final String DEFAULT_RELIGION = "";

  public static final Integer DEFAULT_PROFESSIONTYPE = 0;

  public static final Integer DEFAULT_NURSETYPE = 0;

  public static final Integer DEFAULT_CHILDRENSTATUS1 = 0;

  public static final Integer DEFAULT_CHILDRENSTATUS2 = 0;

  public static final String DEFAULT_HOUSINGTYPE = "";

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_CONFIRMTIME = 0L;

  public static final Long DEFAULT_FIANLTIME = 0L;

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final String DEFAULT_DYNAMICDESC = "";

  public static final Long DEFAULT_LASTTIME = 0L;

  public static final Long DEFAULT_KINSID = 0L;

  public static final String DEFAULT_ASSISTSIGNPIC = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 身份证号
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcard;

  /**
   * 评估类型 1-首次评估 2-复核评估 3-动态评估
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer assessType;

  /**
   * 协助评估人与评估对象的关系（配偶、子女、其他亲属、雇佣照顾者、其他）
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String relation;

  /**
   * 协助评估人身份证号
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String assistIdcard;

  /**
   * 协助评估人联系电话
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String assistPhone;

  /**
   * 评估点id
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long evaluationId;

  /**
   * 评估地点
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String assessAddr;

  /**
   * 评估对象签名照片id
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kinsSignPic;

  /**
   * 评估员签名照片id
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String assessSignPic;

  /**
   * 照护需求等级 0-6（0-2适合社区居家 3视情况社区居家或机构养老 4-6宜机构养老）
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer level;

  /**
   * 能力等级 0-能力完好 1-轻度失能 2-中度失能 3-重度失能
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer abilityLevel;

  /**
   * 医疗照护分级0（基础正常或轻度，常规和康复正常）-1（基础中度，常规和康复轻度）-2（基础重度，常规和康复重度）-3（常规或康复重度）-4（需接受特殊治疗/护理）
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer nurseLevel;

  /**
   * 疾病状况等级 0-无一类和二类疾病 1-有1到2种一类疾病 2-有3种及以上一类疾病 3-有二类疾病
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer illLevel;

  /**
   * 社会支持等级 1级-低水平（≤22分） 2级-中等水平（23-44分） 3级-高水平（≥45分）
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer ssrsLevel;

  /**
   * 养老意愿 1-家人照护 2-社区居家养老 3-机构养老 4-暂时社区居家，以后考虑机构养老
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer tendType;

  /**
   * 建议服务类型 2-社区居家养老 3-机构养老
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer suggestServiceType;

  /**
   * 建议服务内容，内容以英文逗号隔开
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> suggestServiceContent;

  /**
   * 建议服务内容-其他
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String suggestServiceContentOther;

  /**
   * 建议照顾时间
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String suggestServiceTime;

  /**
   * 特殊情况描述
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String specialRemark;

  /**
   * 状态 0-待确认 1-评估员已确认 2-评估机构已确认
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer status;

  /**
   * 姓名
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kinsName;

  /**
   * 性别 0-未知 1-男 2-女
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sex;

  /**
   * 民族
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nation;

  /**
   * 生日  1982-07-12 格式
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String birthday;

  /**
   * 区/街道
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String district;

  /**
   * 个人照片
   */
  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String pic;

  /**
   * 籍贯-省份
   */
  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String province;

  /**
   * 籍贯-城市
   */
  @WireField(
      tag = 30,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String city;

  /**
   * 婚姻状态 0-未知 1-未婚 2-已婚 3-丧偶 4-离异
   */
  @WireField(
      tag = 31,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer marriage;

  /**
   * 居住状况1-独居 2-与配偶/伴侣居住 3-与子女居住 4-与父母居住 5-与配偶和子女居住 6-与兄弟姐妹居住 7-与其他亲属居住 8-与非亲属关系的人居住 9-养老机构
   */
  @WireField(
      tag = 32,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer dwelling;

  /**
   * 教育程度 0-未知 1-文盲  2-小学  3-初中 4-高中 5-技校 6-职高 7-中专 8-大专 9-本科 10-硕士（及以上）
   */
  @WireField(
      tag = 33,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer education;

  /**
   * 宗教
   */
  @WireField(
      tag = 34,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String religion;

  /**
   * 职业类别 1-政府机关人员 2-事业单位人员 3-企业职工 4-个体户 5-自由职业 6-无业
   */
  @WireField(
      tag = 35,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer professionType;

  /**
   * 收入来源 机关事业单位离退休金 2-城乡居民养老保险 3-供养人员补贴 4-低保金 5-子女抚养/补贴 6-亲友自助 7-其他
   */
  @WireField(
      tag = 36,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> income;

  /**
   * 医疗类别 1-公费医疗 2-职工医保 3-居民医保 4-商业医疗保险 5-自费 6-其他
   */
  @WireField(
      tag = 37,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer nurseType;

  /**
   * 子女状况 儿子个数
   */
  @WireField(
      tag = 38,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer childrenStatus1;

  /**
   * 子女状况 女儿个数
   */
  @WireField(
      tag = 39,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer childrenStatus2;

  /**
   * 住房性质 自有产权房 、租赁住房 、借住 、廉租房 、公租房 、其他
   */
  @WireField(
      tag = 40,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String housingType;

  /**
   * 信息采集渠道 本人 、家属 、病历 、医院诊断 、健康档案 、其他
   */
  @WireField(
      tag = 41,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> infoChannel;

  /**
   * 参与评估人员 本人 、子女 、亲属 、朋友 、居委会工作人员 、其他
   */
  @WireField(
      tag = 42,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> assessMan;

  /**
   * 本次评估时间
   */
  @WireField(
      tag = 43,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 评估员确认时间
   */
  @WireField(
      tag = 44,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long confirmTime;

  /**
   * 评估机构确认时间
   */
  @WireField(
      tag = 45,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long fianlTime;

  /**
   * 操作员工ID
   */
  @WireField(
      tag = 46,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 评估人员
   */
  @WireField(
      tag = 47,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 动态评估事由
   */
  @WireField(
      tag = 48,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String dynamicDesc;

  /**
   * 上次评估时间
   */
  @WireField(
      tag = 49,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long lastTime;

  /**
   * 评估人id
   */
  @WireField(
      tag = 50,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kinsId;

  /**
   * 协助评估人签名
   */
  @WireField(
      tag = 51,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String assistSignPic;

  public InsureAssessResult(Long id, String idcard, Integer assessType, String relation, String assistIdcard, String assistPhone, Long evaluationId, String assessAddr, String kinsSignPic, String assessSignPic, Integer level, Integer abilityLevel, Integer nurseLevel, Integer illLevel, Integer ssrsLevel, Integer tendType, Integer suggestServiceType, List<String> suggestServiceContent, String suggestServiceContentOther, String suggestServiceTime, String specialRemark, Integer status, String kinsName, Integer sex, String nation, String birthday, String district, String pic, String province, String city, Integer marriage, Integer dwelling, Integer education, String religion, Integer professionType, List<String> income, Integer nurseType, Integer childrenStatus1, Integer childrenStatus2, String housingType, List<String> infoChannel, List<String> assessMan, Long createTime, Long confirmTime, Long fianlTime, Long createStaffId, String createStaffName, String dynamicDesc, Long lastTime, Long kinsId, String assistSignPic) {
    this(id, idcard, assessType, relation, assistIdcard, assistPhone, evaluationId, assessAddr, kinsSignPic, assessSignPic, level, abilityLevel, nurseLevel, illLevel, ssrsLevel, tendType, suggestServiceType, suggestServiceContent, suggestServiceContentOther, suggestServiceTime, specialRemark, status, kinsName, sex, nation, birthday, district, pic, province, city, marriage, dwelling, education, religion, professionType, income, nurseType, childrenStatus1, childrenStatus2, housingType, infoChannel, assessMan, createTime, confirmTime, fianlTime, createStaffId, createStaffName, dynamicDesc, lastTime, kinsId, assistSignPic, ByteString.EMPTY);
  }

  public InsureAssessResult(Long id, String idcard, Integer assessType, String relation, String assistIdcard, String assistPhone, Long evaluationId, String assessAddr, String kinsSignPic, String assessSignPic, Integer level, Integer abilityLevel, Integer nurseLevel, Integer illLevel, Integer ssrsLevel, Integer tendType, Integer suggestServiceType, List<String> suggestServiceContent, String suggestServiceContentOther, String suggestServiceTime, String specialRemark, Integer status, String kinsName, Integer sex, String nation, String birthday, String district, String pic, String province, String city, Integer marriage, Integer dwelling, Integer education, String religion, Integer professionType, List<String> income, Integer nurseType, Integer childrenStatus1, Integer childrenStatus2, String housingType, List<String> infoChannel, List<String> assessMan, Long createTime, Long confirmTime, Long fianlTime, Long createStaffId, String createStaffName, String dynamicDesc, Long lastTime, Long kinsId, String assistSignPic, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.idcard = idcard;
    this.assessType = assessType;
    this.relation = relation;
    this.assistIdcard = assistIdcard;
    this.assistPhone = assistPhone;
    this.evaluationId = evaluationId;
    this.assessAddr = assessAddr;
    this.kinsSignPic = kinsSignPic;
    this.assessSignPic = assessSignPic;
    this.level = level;
    this.abilityLevel = abilityLevel;
    this.nurseLevel = nurseLevel;
    this.illLevel = illLevel;
    this.ssrsLevel = ssrsLevel;
    this.tendType = tendType;
    this.suggestServiceType = suggestServiceType;
    this.suggestServiceContent = Internal.immutableCopyOf("suggestServiceContent", suggestServiceContent);
    this.suggestServiceContentOther = suggestServiceContentOther;
    this.suggestServiceTime = suggestServiceTime;
    this.specialRemark = specialRemark;
    this.status = status;
    this.kinsName = kinsName;
    this.sex = sex;
    this.nation = nation;
    this.birthday = birthday;
    this.district = district;
    this.pic = pic;
    this.province = province;
    this.city = city;
    this.marriage = marriage;
    this.dwelling = dwelling;
    this.education = education;
    this.religion = religion;
    this.professionType = professionType;
    this.income = Internal.immutableCopyOf("income", income);
    this.nurseType = nurseType;
    this.childrenStatus1 = childrenStatus1;
    this.childrenStatus2 = childrenStatus2;
    this.housingType = housingType;
    this.infoChannel = Internal.immutableCopyOf("infoChannel", infoChannel);
    this.assessMan = Internal.immutableCopyOf("assessMan", assessMan);
    this.createTime = createTime;
    this.confirmTime = confirmTime;
    this.fianlTime = fianlTime;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.dynamicDesc = dynamicDesc;
    this.lastTime = lastTime;
    this.kinsId = kinsId;
    this.assistSignPic = assistSignPic;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.idcard = idcard;
    builder.assessType = assessType;
    builder.relation = relation;
    builder.assistIdcard = assistIdcard;
    builder.assistPhone = assistPhone;
    builder.evaluationId = evaluationId;
    builder.assessAddr = assessAddr;
    builder.kinsSignPic = kinsSignPic;
    builder.assessSignPic = assessSignPic;
    builder.level = level;
    builder.abilityLevel = abilityLevel;
    builder.nurseLevel = nurseLevel;
    builder.illLevel = illLevel;
    builder.ssrsLevel = ssrsLevel;
    builder.tendType = tendType;
    builder.suggestServiceType = suggestServiceType;
    builder.suggestServiceContent = Internal.copyOf("suggestServiceContent", suggestServiceContent);
    builder.suggestServiceContentOther = suggestServiceContentOther;
    builder.suggestServiceTime = suggestServiceTime;
    builder.specialRemark = specialRemark;
    builder.status = status;
    builder.kinsName = kinsName;
    builder.sex = sex;
    builder.nation = nation;
    builder.birthday = birthday;
    builder.district = district;
    builder.pic = pic;
    builder.province = province;
    builder.city = city;
    builder.marriage = marriage;
    builder.dwelling = dwelling;
    builder.education = education;
    builder.religion = religion;
    builder.professionType = professionType;
    builder.income = Internal.copyOf("income", income);
    builder.nurseType = nurseType;
    builder.childrenStatus1 = childrenStatus1;
    builder.childrenStatus2 = childrenStatus2;
    builder.housingType = housingType;
    builder.infoChannel = Internal.copyOf("infoChannel", infoChannel);
    builder.assessMan = Internal.copyOf("assessMan", assessMan);
    builder.createTime = createTime;
    builder.confirmTime = confirmTime;
    builder.fianlTime = fianlTime;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.dynamicDesc = dynamicDesc;
    builder.lastTime = lastTime;
    builder.kinsId = kinsId;
    builder.assistSignPic = assistSignPic;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof InsureAssessResult)) return false;
    InsureAssessResult o = (InsureAssessResult) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(idcard, o.idcard)
        && Internal.equals(assessType, o.assessType)
        && Internal.equals(relation, o.relation)
        && Internal.equals(assistIdcard, o.assistIdcard)
        && Internal.equals(assistPhone, o.assistPhone)
        && Internal.equals(evaluationId, o.evaluationId)
        && Internal.equals(assessAddr, o.assessAddr)
        && Internal.equals(kinsSignPic, o.kinsSignPic)
        && Internal.equals(assessSignPic, o.assessSignPic)
        && Internal.equals(level, o.level)
        && Internal.equals(abilityLevel, o.abilityLevel)
        && Internal.equals(nurseLevel, o.nurseLevel)
        && Internal.equals(illLevel, o.illLevel)
        && Internal.equals(ssrsLevel, o.ssrsLevel)
        && Internal.equals(tendType, o.tendType)
        && Internal.equals(suggestServiceType, o.suggestServiceType)
        && suggestServiceContent.equals(o.suggestServiceContent)
        && Internal.equals(suggestServiceContentOther, o.suggestServiceContentOther)
        && Internal.equals(suggestServiceTime, o.suggestServiceTime)
        && Internal.equals(specialRemark, o.specialRemark)
        && Internal.equals(status, o.status)
        && Internal.equals(kinsName, o.kinsName)
        && Internal.equals(sex, o.sex)
        && Internal.equals(nation, o.nation)
        && Internal.equals(birthday, o.birthday)
        && Internal.equals(district, o.district)
        && Internal.equals(pic, o.pic)
        && Internal.equals(province, o.province)
        && Internal.equals(city, o.city)
        && Internal.equals(marriage, o.marriage)
        && Internal.equals(dwelling, o.dwelling)
        && Internal.equals(education, o.education)
        && Internal.equals(religion, o.religion)
        && Internal.equals(professionType, o.professionType)
        && income.equals(o.income)
        && Internal.equals(nurseType, o.nurseType)
        && Internal.equals(childrenStatus1, o.childrenStatus1)
        && Internal.equals(childrenStatus2, o.childrenStatus2)
        && Internal.equals(housingType, o.housingType)
        && infoChannel.equals(o.infoChannel)
        && assessMan.equals(o.assessMan)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(confirmTime, o.confirmTime)
        && Internal.equals(fianlTime, o.fianlTime)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(dynamicDesc, o.dynamicDesc)
        && Internal.equals(lastTime, o.lastTime)
        && Internal.equals(kinsId, o.kinsId)
        && Internal.equals(assistSignPic, o.assistSignPic);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (idcard != null ? idcard.hashCode() : 0);
      result = result * 37 + (assessType != null ? assessType.hashCode() : 0);
      result = result * 37 + (relation != null ? relation.hashCode() : 0);
      result = result * 37 + (assistIdcard != null ? assistIdcard.hashCode() : 0);
      result = result * 37 + (assistPhone != null ? assistPhone.hashCode() : 0);
      result = result * 37 + (evaluationId != null ? evaluationId.hashCode() : 0);
      result = result * 37 + (assessAddr != null ? assessAddr.hashCode() : 0);
      result = result * 37 + (kinsSignPic != null ? kinsSignPic.hashCode() : 0);
      result = result * 37 + (assessSignPic != null ? assessSignPic.hashCode() : 0);
      result = result * 37 + (level != null ? level.hashCode() : 0);
      result = result * 37 + (abilityLevel != null ? abilityLevel.hashCode() : 0);
      result = result * 37 + (nurseLevel != null ? nurseLevel.hashCode() : 0);
      result = result * 37 + (illLevel != null ? illLevel.hashCode() : 0);
      result = result * 37 + (ssrsLevel != null ? ssrsLevel.hashCode() : 0);
      result = result * 37 + (tendType != null ? tendType.hashCode() : 0);
      result = result * 37 + (suggestServiceType != null ? suggestServiceType.hashCode() : 0);
      result = result * 37 + suggestServiceContent.hashCode();
      result = result * 37 + (suggestServiceContentOther != null ? suggestServiceContentOther.hashCode() : 0);
      result = result * 37 + (suggestServiceTime != null ? suggestServiceTime.hashCode() : 0);
      result = result * 37 + (specialRemark != null ? specialRemark.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (kinsName != null ? kinsName.hashCode() : 0);
      result = result * 37 + (sex != null ? sex.hashCode() : 0);
      result = result * 37 + (nation != null ? nation.hashCode() : 0);
      result = result * 37 + (birthday != null ? birthday.hashCode() : 0);
      result = result * 37 + (district != null ? district.hashCode() : 0);
      result = result * 37 + (pic != null ? pic.hashCode() : 0);
      result = result * 37 + (province != null ? province.hashCode() : 0);
      result = result * 37 + (city != null ? city.hashCode() : 0);
      result = result * 37 + (marriage != null ? marriage.hashCode() : 0);
      result = result * 37 + (dwelling != null ? dwelling.hashCode() : 0);
      result = result * 37 + (education != null ? education.hashCode() : 0);
      result = result * 37 + (religion != null ? religion.hashCode() : 0);
      result = result * 37 + (professionType != null ? professionType.hashCode() : 0);
      result = result * 37 + income.hashCode();
      result = result * 37 + (nurseType != null ? nurseType.hashCode() : 0);
      result = result * 37 + (childrenStatus1 != null ? childrenStatus1.hashCode() : 0);
      result = result * 37 + (childrenStatus2 != null ? childrenStatus2.hashCode() : 0);
      result = result * 37 + (housingType != null ? housingType.hashCode() : 0);
      result = result * 37 + infoChannel.hashCode();
      result = result * 37 + assessMan.hashCode();
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (confirmTime != null ? confirmTime.hashCode() : 0);
      result = result * 37 + (fianlTime != null ? fianlTime.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (dynamicDesc != null ? dynamicDesc.hashCode() : 0);
      result = result * 37 + (lastTime != null ? lastTime.hashCode() : 0);
      result = result * 37 + (kinsId != null ? kinsId.hashCode() : 0);
      result = result * 37 + (assistSignPic != null ? assistSignPic.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (idcard != null) builder.append(", idcard=").append(idcard);
    if (assessType != null) builder.append(", assessType=").append(assessType);
    if (relation != null) builder.append(", relation=").append(relation);
    if (assistIdcard != null) builder.append(", assistIdcard=").append(assistIdcard);
    if (assistPhone != null) builder.append(", assistPhone=").append(assistPhone);
    if (evaluationId != null) builder.append(", evaluationId=").append(evaluationId);
    if (assessAddr != null) builder.append(", assessAddr=").append(assessAddr);
    if (kinsSignPic != null) builder.append(", kinsSignPic=").append(kinsSignPic);
    if (assessSignPic != null) builder.append(", assessSignPic=").append(assessSignPic);
    if (level != null) builder.append(", level=").append(level);
    if (abilityLevel != null) builder.append(", abilityLevel=").append(abilityLevel);
    if (nurseLevel != null) builder.append(", nurseLevel=").append(nurseLevel);
    if (illLevel != null) builder.append(", illLevel=").append(illLevel);
    if (ssrsLevel != null) builder.append(", ssrsLevel=").append(ssrsLevel);
    if (tendType != null) builder.append(", tendType=").append(tendType);
    if (suggestServiceType != null) builder.append(", suggestServiceType=").append(suggestServiceType);
    if (!suggestServiceContent.isEmpty()) builder.append(", suggestServiceContent=").append(suggestServiceContent);
    if (suggestServiceContentOther != null) builder.append(", suggestServiceContentOther=").append(suggestServiceContentOther);
    if (suggestServiceTime != null) builder.append(", suggestServiceTime=").append(suggestServiceTime);
    if (specialRemark != null) builder.append(", specialRemark=").append(specialRemark);
    if (status != null) builder.append(", status=").append(status);
    if (kinsName != null) builder.append(", kinsName=").append(kinsName);
    if (sex != null) builder.append(", sex=").append(sex);
    if (nation != null) builder.append(", nation=").append(nation);
    if (birthday != null) builder.append(", birthday=").append(birthday);
    if (district != null) builder.append(", district=").append(district);
    if (pic != null) builder.append(", pic=").append(pic);
    if (province != null) builder.append(", province=").append(province);
    if (city != null) builder.append(", city=").append(city);
    if (marriage != null) builder.append(", marriage=").append(marriage);
    if (dwelling != null) builder.append(", dwelling=").append(dwelling);
    if (education != null) builder.append(", education=").append(education);
    if (religion != null) builder.append(", religion=").append(religion);
    if (professionType != null) builder.append(", professionType=").append(professionType);
    if (!income.isEmpty()) builder.append(", income=").append(income);
    if (nurseType != null) builder.append(", nurseType=").append(nurseType);
    if (childrenStatus1 != null) builder.append(", childrenStatus1=").append(childrenStatus1);
    if (childrenStatus2 != null) builder.append(", childrenStatus2=").append(childrenStatus2);
    if (housingType != null) builder.append(", housingType=").append(housingType);
    if (!infoChannel.isEmpty()) builder.append(", infoChannel=").append(infoChannel);
    if (!assessMan.isEmpty()) builder.append(", assessMan=").append(assessMan);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (confirmTime != null) builder.append(", confirmTime=").append(confirmTime);
    if (fianlTime != null) builder.append(", fianlTime=").append(fianlTime);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (dynamicDesc != null) builder.append(", dynamicDesc=").append(dynamicDesc);
    if (lastTime != null) builder.append(", lastTime=").append(lastTime);
    if (kinsId != null) builder.append(", kinsId=").append(kinsId);
    if (assistSignPic != null) builder.append(", assistSignPic=").append(assistSignPic);
    return builder.replace(0, 2, "InsureAssessResult{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<InsureAssessResult, Builder> {
    public Long id;

    public String idcard;

    public Integer assessType;

    public String relation;

    public String assistIdcard;

    public String assistPhone;

    public Long evaluationId;

    public String assessAddr;

    public String kinsSignPic;

    public String assessSignPic;

    public Integer level;

    public Integer abilityLevel;

    public Integer nurseLevel;

    public Integer illLevel;

    public Integer ssrsLevel;

    public Integer tendType;

    public Integer suggestServiceType;

    public List<String> suggestServiceContent;

    public String suggestServiceContentOther;

    public String suggestServiceTime;

    public String specialRemark;

    public Integer status;

    public String kinsName;

    public Integer sex;

    public String nation;

    public String birthday;

    public String district;

    public String pic;

    public String province;

    public String city;

    public Integer marriage;

    public Integer dwelling;

    public Integer education;

    public String religion;

    public Integer professionType;

    public List<String> income;

    public Integer nurseType;

    public Integer childrenStatus1;

    public Integer childrenStatus2;

    public String housingType;

    public List<String> infoChannel;

    public List<String> assessMan;

    public Long createTime;

    public Long confirmTime;

    public Long fianlTime;

    public Long createStaffId;

    public String createStaffName;

    public String dynamicDesc;

    public Long lastTime;

    public Long kinsId;

    public String assistSignPic;

    public Builder() {
      suggestServiceContent = Internal.newMutableList();
      income = Internal.newMutableList();
      infoChannel = Internal.newMutableList();
      assessMan = Internal.newMutableList();
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 身份证号
     */
    public Builder idcard(String idcard) {
      this.idcard = idcard;
      return this;
    }

    /**
     * 评估类型 1-首次评估 2-复核评估 3-动态评估
     */
    public Builder assessType(Integer assessType) {
      this.assessType = assessType;
      return this;
    }

    /**
     * 协助评估人与评估对象的关系（配偶、子女、其他亲属、雇佣照顾者、其他）
     */
    public Builder relation(String relation) {
      this.relation = relation;
      return this;
    }

    /**
     * 协助评估人身份证号
     */
    public Builder assistIdcard(String assistIdcard) {
      this.assistIdcard = assistIdcard;
      return this;
    }

    /**
     * 协助评估人联系电话
     */
    public Builder assistPhone(String assistPhone) {
      this.assistPhone = assistPhone;
      return this;
    }

    /**
     * 评估点id
     */
    public Builder evaluationId(Long evaluationId) {
      this.evaluationId = evaluationId;
      return this;
    }

    /**
     * 评估地点
     */
    public Builder assessAddr(String assessAddr) {
      this.assessAddr = assessAddr;
      return this;
    }

    /**
     * 评估对象签名照片id
     */
    public Builder kinsSignPic(String kinsSignPic) {
      this.kinsSignPic = kinsSignPic;
      return this;
    }

    /**
     * 评估员签名照片id
     */
    public Builder assessSignPic(String assessSignPic) {
      this.assessSignPic = assessSignPic;
      return this;
    }

    /**
     * 照护需求等级 0-6（0-2适合社区居家 3视情况社区居家或机构养老 4-6宜机构养老）
     */
    public Builder level(Integer level) {
      this.level = level;
      return this;
    }

    /**
     * 能力等级 0-能力完好 1-轻度失能 2-中度失能 3-重度失能
     */
    public Builder abilityLevel(Integer abilityLevel) {
      this.abilityLevel = abilityLevel;
      return this;
    }

    /**
     * 医疗照护分级0（基础正常或轻度，常规和康复正常）-1（基础中度，常规和康复轻度）-2（基础重度，常规和康复重度）-3（常规或康复重度）-4（需接受特殊治疗/护理）
     */
    public Builder nurseLevel(Integer nurseLevel) {
      this.nurseLevel = nurseLevel;
      return this;
    }

    /**
     * 疾病状况等级 0-无一类和二类疾病 1-有1到2种一类疾病 2-有3种及以上一类疾病 3-有二类疾病
     */
    public Builder illLevel(Integer illLevel) {
      this.illLevel = illLevel;
      return this;
    }

    /**
     * 社会支持等级 1级-低水平（≤22分） 2级-中等水平（23-44分） 3级-高水平（≥45分）
     */
    public Builder ssrsLevel(Integer ssrsLevel) {
      this.ssrsLevel = ssrsLevel;
      return this;
    }

    /**
     * 养老意愿 1-家人照护 2-社区居家养老 3-机构养老 4-暂时社区居家，以后考虑机构养老
     */
    public Builder tendType(Integer tendType) {
      this.tendType = tendType;
      return this;
    }

    /**
     * 建议服务类型 2-社区居家养老 3-机构养老
     */
    public Builder suggestServiceType(Integer suggestServiceType) {
      this.suggestServiceType = suggestServiceType;
      return this;
    }

    /**
     * 建议服务内容，内容以英文逗号隔开
     */
    public Builder suggestServiceContent(List<String> suggestServiceContent) {
      Internal.checkElementsNotNull(suggestServiceContent);
      this.suggestServiceContent = suggestServiceContent;
      return this;
    }

    /**
     * 建议服务内容-其他
     */
    public Builder suggestServiceContentOther(String suggestServiceContentOther) {
      this.suggestServiceContentOther = suggestServiceContentOther;
      return this;
    }

    /**
     * 建议照顾时间
     */
    public Builder suggestServiceTime(String suggestServiceTime) {
      this.suggestServiceTime = suggestServiceTime;
      return this;
    }

    /**
     * 特殊情况描述
     */
    public Builder specialRemark(String specialRemark) {
      this.specialRemark = specialRemark;
      return this;
    }

    /**
     * 状态 0-待确认 1-评估员已确认 2-评估机构已确认
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 姓名
     */
    public Builder kinsName(String kinsName) {
      this.kinsName = kinsName;
      return this;
    }

    /**
     * 性别 0-未知 1-男 2-女
     */
    public Builder sex(Integer sex) {
      this.sex = sex;
      return this;
    }

    /**
     * 民族
     */
    public Builder nation(String nation) {
      this.nation = nation;
      return this;
    }

    /**
     * 生日  1982-07-12 格式
     */
    public Builder birthday(String birthday) {
      this.birthday = birthday;
      return this;
    }

    /**
     * 区/街道
     */
    public Builder district(String district) {
      this.district = district;
      return this;
    }

    /**
     * 个人照片
     */
    public Builder pic(String pic) {
      this.pic = pic;
      return this;
    }

    /**
     * 籍贯-省份
     */
    public Builder province(String province) {
      this.province = province;
      return this;
    }

    /**
     * 籍贯-城市
     */
    public Builder city(String city) {
      this.city = city;
      return this;
    }

    /**
     * 婚姻状态 0-未知 1-未婚 2-已婚 3-丧偶 4-离异
     */
    public Builder marriage(Integer marriage) {
      this.marriage = marriage;
      return this;
    }

    /**
     * 居住状况1-独居 2-与配偶/伴侣居住 3-与子女居住 4-与父母居住 5-与配偶和子女居住 6-与兄弟姐妹居住 7-与其他亲属居住 8-与非亲属关系的人居住 9-养老机构
     */
    public Builder dwelling(Integer dwelling) {
      this.dwelling = dwelling;
      return this;
    }

    /**
     * 教育程度 0-未知 1-文盲  2-小学  3-初中 4-高中 5-技校 6-职高 7-中专 8-大专 9-本科 10-硕士（及以上）
     */
    public Builder education(Integer education) {
      this.education = education;
      return this;
    }

    /**
     * 宗教
     */
    public Builder religion(String religion) {
      this.religion = religion;
      return this;
    }

    /**
     * 职业类别 1-政府机关人员 2-事业单位人员 3-企业职工 4-个体户 5-自由职业 6-无业
     */
    public Builder professionType(Integer professionType) {
      this.professionType = professionType;
      return this;
    }

    /**
     * 收入来源 机关事业单位离退休金 2-城乡居民养老保险 3-供养人员补贴 4-低保金 5-子女抚养/补贴 6-亲友自助 7-其他
     */
    public Builder income(List<String> income) {
      Internal.checkElementsNotNull(income);
      this.income = income;
      return this;
    }

    /**
     * 医疗类别 1-公费医疗 2-职工医保 3-居民医保 4-商业医疗保险 5-自费 6-其他
     */
    public Builder nurseType(Integer nurseType) {
      this.nurseType = nurseType;
      return this;
    }

    /**
     * 子女状况 儿子个数
     */
    public Builder childrenStatus1(Integer childrenStatus1) {
      this.childrenStatus1 = childrenStatus1;
      return this;
    }

    /**
     * 子女状况 女儿个数
     */
    public Builder childrenStatus2(Integer childrenStatus2) {
      this.childrenStatus2 = childrenStatus2;
      return this;
    }

    /**
     * 住房性质 自有产权房 、租赁住房 、借住 、廉租房 、公租房 、其他
     */
    public Builder housingType(String housingType) {
      this.housingType = housingType;
      return this;
    }

    /**
     * 信息采集渠道 本人 、家属 、病历 、医院诊断 、健康档案 、其他
     */
    public Builder infoChannel(List<String> infoChannel) {
      Internal.checkElementsNotNull(infoChannel);
      this.infoChannel = infoChannel;
      return this;
    }

    /**
     * 参与评估人员 本人 、子女 、亲属 、朋友 、居委会工作人员 、其他
     */
    public Builder assessMan(List<String> assessMan) {
      Internal.checkElementsNotNull(assessMan);
      this.assessMan = assessMan;
      return this;
    }

    /**
     * 本次评估时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 评估员确认时间
     */
    public Builder confirmTime(Long confirmTime) {
      this.confirmTime = confirmTime;
      return this;
    }

    /**
     * 评估机构确认时间
     */
    public Builder fianlTime(Long fianlTime) {
      this.fianlTime = fianlTime;
      return this;
    }

    /**
     * 操作员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 评估人员
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 动态评估事由
     */
    public Builder dynamicDesc(String dynamicDesc) {
      this.dynamicDesc = dynamicDesc;
      return this;
    }

    /**
     * 上次评估时间
     */
    public Builder lastTime(Long lastTime) {
      this.lastTime = lastTime;
      return this;
    }

    /**
     * 评估人id
     */
    public Builder kinsId(Long kinsId) {
      this.kinsId = kinsId;
      return this;
    }

    /**
     * 协助评估人签名
     */
    public Builder assistSignPic(String assistSignPic) {
      this.assistSignPic = assistSignPic;
      return this;
    }

    @Override
    public InsureAssessResult build() {
      return new InsureAssessResult(id, idcard, assessType, relation, assistIdcard, assistPhone, evaluationId, assessAddr, kinsSignPic, assessSignPic, level, abilityLevel, nurseLevel, illLevel, ssrsLevel, tendType, suggestServiceType, suggestServiceContent, suggestServiceContentOther, suggestServiceTime, specialRemark, status, kinsName, sex, nation, birthday, district, pic, province, city, marriage, dwelling, education, religion, professionType, income, nurseType, childrenStatus1, childrenStatus2, housingType, infoChannel, assessMan, createTime, confirmTime, fianlTime, createStaffId, createStaffName, dynamicDesc, lastTime, kinsId, assistSignPic, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_InsureAssessResult extends ProtoAdapter<InsureAssessResult> {
    ProtoAdapter_InsureAssessResult() {
      super(FieldEncoding.LENGTH_DELIMITED, InsureAssessResult.class);
    }

    @Override
    public int encodedSize(InsureAssessResult value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.idcard != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.idcard) : 0)
          + (value.assessType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.assessType) : 0)
          + (value.relation != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.relation) : 0)
          + (value.assistIdcard != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.assistIdcard) : 0)
          + (value.assistPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.assistPhone) : 0)
          + (value.evaluationId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.evaluationId) : 0)
          + (value.assessAddr != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.assessAddr) : 0)
          + (value.kinsSignPic != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.kinsSignPic) : 0)
          + (value.assessSignPic != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.assessSignPic) : 0)
          + (value.level != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.level) : 0)
          + (value.abilityLevel != null ? ProtoAdapter.UINT32.encodedSizeWithTag(12, value.abilityLevel) : 0)
          + (value.nurseLevel != null ? ProtoAdapter.UINT32.encodedSizeWithTag(13, value.nurseLevel) : 0)
          + (value.illLevel != null ? ProtoAdapter.UINT32.encodedSizeWithTag(14, value.illLevel) : 0)
          + (value.ssrsLevel != null ? ProtoAdapter.UINT32.encodedSizeWithTag(15, value.ssrsLevel) : 0)
          + (value.tendType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(16, value.tendType) : 0)
          + (value.suggestServiceType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(17, value.suggestServiceType) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(18, value.suggestServiceContent)
          + (value.suggestServiceContentOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.suggestServiceContentOther) : 0)
          + (value.suggestServiceTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(20, value.suggestServiceTime) : 0)
          + (value.specialRemark != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.specialRemark) : 0)
          + (value.status != null ? ProtoAdapter.UINT32.encodedSizeWithTag(22, value.status) : 0)
          + (value.kinsName != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.kinsName) : 0)
          + (value.sex != null ? ProtoAdapter.UINT32.encodedSizeWithTag(24, value.sex) : 0)
          + (value.nation != null ? ProtoAdapter.STRING.encodedSizeWithTag(25, value.nation) : 0)
          + (value.birthday != null ? ProtoAdapter.STRING.encodedSizeWithTag(26, value.birthday) : 0)
          + (value.district != null ? ProtoAdapter.STRING.encodedSizeWithTag(27, value.district) : 0)
          + (value.pic != null ? ProtoAdapter.STRING.encodedSizeWithTag(28, value.pic) : 0)
          + (value.province != null ? ProtoAdapter.STRING.encodedSizeWithTag(29, value.province) : 0)
          + (value.city != null ? ProtoAdapter.STRING.encodedSizeWithTag(30, value.city) : 0)
          + (value.marriage != null ? ProtoAdapter.INT32.encodedSizeWithTag(31, value.marriage) : 0)
          + (value.dwelling != null ? ProtoAdapter.UINT32.encodedSizeWithTag(32, value.dwelling) : 0)
          + (value.education != null ? ProtoAdapter.UINT32.encodedSizeWithTag(33, value.education) : 0)
          + (value.religion != null ? ProtoAdapter.STRING.encodedSizeWithTag(34, value.religion) : 0)
          + (value.professionType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(35, value.professionType) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(36, value.income)
          + (value.nurseType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(37, value.nurseType) : 0)
          + (value.childrenStatus1 != null ? ProtoAdapter.UINT32.encodedSizeWithTag(38, value.childrenStatus1) : 0)
          + (value.childrenStatus2 != null ? ProtoAdapter.UINT32.encodedSizeWithTag(39, value.childrenStatus2) : 0)
          + (value.housingType != null ? ProtoAdapter.STRING.encodedSizeWithTag(40, value.housingType) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(41, value.infoChannel)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(42, value.assessMan)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(43, value.createTime) : 0)
          + (value.confirmTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(44, value.confirmTime) : 0)
          + (value.fianlTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(45, value.fianlTime) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(46, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(47, value.createStaffName) : 0)
          + (value.dynamicDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(48, value.dynamicDesc) : 0)
          + (value.lastTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(49, value.lastTime) : 0)
          + (value.kinsId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(50, value.kinsId) : 0)
          + (value.assistSignPic != null ? ProtoAdapter.STRING.encodedSizeWithTag(51, value.assistSignPic) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, InsureAssessResult value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.idcard != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.idcard);
      if (value.assessType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.assessType);
      if (value.relation != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.relation);
      if (value.assistIdcard != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.assistIdcard);
      if (value.assistPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.assistPhone);
      if (value.evaluationId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.evaluationId);
      if (value.assessAddr != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.assessAddr);
      if (value.kinsSignPic != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.kinsSignPic);
      if (value.assessSignPic != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.assessSignPic);
      if (value.level != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.level);
      if (value.abilityLevel != null) ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.abilityLevel);
      if (value.nurseLevel != null) ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.nurseLevel);
      if (value.illLevel != null) ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.illLevel);
      if (value.ssrsLevel != null) ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.ssrsLevel);
      if (value.tendType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.tendType);
      if (value.suggestServiceType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.suggestServiceType);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 18, value.suggestServiceContent);
      if (value.suggestServiceContentOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.suggestServiceContentOther);
      if (value.suggestServiceTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 20, value.suggestServiceTime);
      if (value.specialRemark != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.specialRemark);
      if (value.status != null) ProtoAdapter.UINT32.encodeWithTag(writer, 22, value.status);
      if (value.kinsName != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.kinsName);
      if (value.sex != null) ProtoAdapter.UINT32.encodeWithTag(writer, 24, value.sex);
      if (value.nation != null) ProtoAdapter.STRING.encodeWithTag(writer, 25, value.nation);
      if (value.birthday != null) ProtoAdapter.STRING.encodeWithTag(writer, 26, value.birthday);
      if (value.district != null) ProtoAdapter.STRING.encodeWithTag(writer, 27, value.district);
      if (value.pic != null) ProtoAdapter.STRING.encodeWithTag(writer, 28, value.pic);
      if (value.province != null) ProtoAdapter.STRING.encodeWithTag(writer, 29, value.province);
      if (value.city != null) ProtoAdapter.STRING.encodeWithTag(writer, 30, value.city);
      if (value.marriage != null) ProtoAdapter.INT32.encodeWithTag(writer, 31, value.marriage);
      if (value.dwelling != null) ProtoAdapter.UINT32.encodeWithTag(writer, 32, value.dwelling);
      if (value.education != null) ProtoAdapter.UINT32.encodeWithTag(writer, 33, value.education);
      if (value.religion != null) ProtoAdapter.STRING.encodeWithTag(writer, 34, value.religion);
      if (value.professionType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 35, value.professionType);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 36, value.income);
      if (value.nurseType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 37, value.nurseType);
      if (value.childrenStatus1 != null) ProtoAdapter.UINT32.encodeWithTag(writer, 38, value.childrenStatus1);
      if (value.childrenStatus2 != null) ProtoAdapter.UINT32.encodeWithTag(writer, 39, value.childrenStatus2);
      if (value.housingType != null) ProtoAdapter.STRING.encodeWithTag(writer, 40, value.housingType);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 41, value.infoChannel);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 42, value.assessMan);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 43, value.createTime);
      if (value.confirmTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 44, value.confirmTime);
      if (value.fianlTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 45, value.fianlTime);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 46, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 47, value.createStaffName);
      if (value.dynamicDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 48, value.dynamicDesc);
      if (value.lastTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 49, value.lastTime);
      if (value.kinsId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 50, value.kinsId);
      if (value.assistSignPic != null) ProtoAdapter.STRING.encodeWithTag(writer, 51, value.assistSignPic);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public InsureAssessResult decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.idcard(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.assessType(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.relation(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.assistIdcard(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.assistPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.evaluationId(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.assessAddr(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.kinsSignPic(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.assessSignPic(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.level(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.abilityLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 13: builder.nurseLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.illLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.ssrsLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.tendType(ProtoAdapter.UINT32.decode(reader)); break;
          case 17: builder.suggestServiceType(ProtoAdapter.UINT32.decode(reader)); break;
          case 18: builder.suggestServiceContent.add(ProtoAdapter.STRING.decode(reader)); break;
          case 19: builder.suggestServiceContentOther(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.suggestServiceTime(ProtoAdapter.STRING.decode(reader)); break;
          case 21: builder.specialRemark(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.status(ProtoAdapter.UINT32.decode(reader)); break;
          case 23: builder.kinsName(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.sex(ProtoAdapter.UINT32.decode(reader)); break;
          case 25: builder.nation(ProtoAdapter.STRING.decode(reader)); break;
          case 26: builder.birthday(ProtoAdapter.STRING.decode(reader)); break;
          case 27: builder.district(ProtoAdapter.STRING.decode(reader)); break;
          case 28: builder.pic(ProtoAdapter.STRING.decode(reader)); break;
          case 29: builder.province(ProtoAdapter.STRING.decode(reader)); break;
          case 30: builder.city(ProtoAdapter.STRING.decode(reader)); break;
          case 31: builder.marriage(ProtoAdapter.INT32.decode(reader)); break;
          case 32: builder.dwelling(ProtoAdapter.UINT32.decode(reader)); break;
          case 33: builder.education(ProtoAdapter.UINT32.decode(reader)); break;
          case 34: builder.religion(ProtoAdapter.STRING.decode(reader)); break;
          case 35: builder.professionType(ProtoAdapter.UINT32.decode(reader)); break;
          case 36: builder.income.add(ProtoAdapter.STRING.decode(reader)); break;
          case 37: builder.nurseType(ProtoAdapter.UINT32.decode(reader)); break;
          case 38: builder.childrenStatus1(ProtoAdapter.UINT32.decode(reader)); break;
          case 39: builder.childrenStatus2(ProtoAdapter.UINT32.decode(reader)); break;
          case 40: builder.housingType(ProtoAdapter.STRING.decode(reader)); break;
          case 41: builder.infoChannel.add(ProtoAdapter.STRING.decode(reader)); break;
          case 42: builder.assessMan.add(ProtoAdapter.STRING.decode(reader)); break;
          case 43: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 44: builder.confirmTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 45: builder.fianlTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 46: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 47: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 48: builder.dynamicDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 49: builder.lastTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 50: builder.kinsId(ProtoAdapter.UINT64.decode(reader)); break;
          case 51: builder.assistSignPic(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public InsureAssessResult redact(InsureAssessResult value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
