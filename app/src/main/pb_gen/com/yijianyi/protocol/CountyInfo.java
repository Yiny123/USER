// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Area.proto at 21:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class CountyInfo extends Message<CountyInfo, CountyInfo.Builder> {
  public static final ProtoAdapter<CountyInfo> ADAPTER = new ProtoAdapter_CountyInfo();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_COUNTYID = 0;

  public static final String DEFAULT_COUNTYNAME = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer countyId;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String countyName;

  @WireField(
      tag = 3,
      adapter = "com.yijianyi.protocol.TownInfo#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<TownInfo> townList;

  public CountyInfo(Integer countyId, String countyName, List<TownInfo> townList) {
    this(countyId, countyName, townList, ByteString.EMPTY);
  }

  public CountyInfo(Integer countyId, String countyName, List<TownInfo> townList, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.countyId = countyId;
    this.countyName = countyName;
    this.townList = Internal.immutableCopyOf("townList", townList);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.countyId = countyId;
    builder.countyName = countyName;
    builder.townList = Internal.copyOf("townList", townList);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CountyInfo)) return false;
    CountyInfo o = (CountyInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(countyId, o.countyId)
        && Internal.equals(countyName, o.countyName)
        && townList.equals(o.townList);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (countyId != null ? countyId.hashCode() : 0);
      result = result * 37 + (countyName != null ? countyName.hashCode() : 0);
      result = result * 37 + townList.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (countyId != null) builder.append(", countyId=").append(countyId);
    if (countyName != null) builder.append(", countyName=").append(countyName);
    if (!townList.isEmpty()) builder.append(", townList=").append(townList);
    return builder.replace(0, 2, "CountyInfo{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CountyInfo, Builder> {
    public Integer countyId;

    public String countyName;

    public List<TownInfo> townList;

    public Builder() {
      townList = Internal.newMutableList();
    }

    public Builder countyId(Integer countyId) {
      this.countyId = countyId;
      return this;
    }

    public Builder countyName(String countyName) {
      this.countyName = countyName;
      return this;
    }

    public Builder townList(List<TownInfo> townList) {
      Internal.checkElementsNotNull(townList);
      this.townList = townList;
      return this;
    }

    @Override
    public CountyInfo build() {
      return new CountyInfo(countyId, countyName, townList, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CountyInfo extends ProtoAdapter<CountyInfo> {
    ProtoAdapter_CountyInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, CountyInfo.class);
    }

    @Override
    public int encodedSize(CountyInfo value) {
      return (value.countyId != null ? ProtoAdapter.UINT32.encodedSizeWithTag(1, value.countyId) : 0)
          + (value.countyName != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.countyName) : 0)
          + TownInfo.ADAPTER.asRepeated().encodedSizeWithTag(3, value.townList)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CountyInfo value) throws IOException {
      if (value.countyId != null) ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.countyId);
      if (value.countyName != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.countyName);
      TownInfo.ADAPTER.asRepeated().encodeWithTag(writer, 3, value.townList);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CountyInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.countyId(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.countyName(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.townList.add(TownInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CountyInfo redact(CountyInfo value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.townList, TownInfo.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
