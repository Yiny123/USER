// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 489:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class UserIntegralRecord extends Message<UserIntegralRecord, UserIntegralRecord.Builder> {
  public static final ProtoAdapter<UserIntegralRecord> ADAPTER = new ProtoAdapter_UserIntegralRecord();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Long DEFAULT_USERID = 0L;

  public static final Long DEFAULT_COMPANYID = 0L;

  public static final Long DEFAULT_CHANGEINTEGRAL = 0L;

  public static final Long DEFAULT_INTEGRAL = 0L;

  public static final Integer DEFAULT_CHANGETYPE = 0;

  public static final String DEFAULT_CHANGEDESC = "";

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_CREATETIME = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 公司id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long companyId;

  /**
   * 变动的积分
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long changeIntegral;

  /**
   * 剩余积分
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long integral;

  /**
   * 积分变动类型 1-消费 2使用
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer changeType;

  /**
   * 积分变动原因
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String changeDesc;

  /**
   * 消费或使用时涉及到的订单id
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 创建时间
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  public UserIntegralRecord(Long id, Long userId, Long companyId, Long changeIntegral, Long integral, Integer changeType, String changeDesc, String orderId, Long createTime) {
    this(id, userId, companyId, changeIntegral, integral, changeType, changeDesc, orderId, createTime, ByteString.EMPTY);
  }

  public UserIntegralRecord(Long id, Long userId, Long companyId, Long changeIntegral, Long integral, Integer changeType, String changeDesc, String orderId, Long createTime, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.userId = userId;
    this.companyId = companyId;
    this.changeIntegral = changeIntegral;
    this.integral = integral;
    this.changeType = changeType;
    this.changeDesc = changeDesc;
    this.orderId = orderId;
    this.createTime = createTime;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.userId = userId;
    builder.companyId = companyId;
    builder.changeIntegral = changeIntegral;
    builder.integral = integral;
    builder.changeType = changeType;
    builder.changeDesc = changeDesc;
    builder.orderId = orderId;
    builder.createTime = createTime;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UserIntegralRecord)) return false;
    UserIntegralRecord o = (UserIntegralRecord) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(userId, o.userId)
        && Internal.equals(companyId, o.companyId)
        && Internal.equals(changeIntegral, o.changeIntegral)
        && Internal.equals(integral, o.integral)
        && Internal.equals(changeType, o.changeType)
        && Internal.equals(changeDesc, o.changeDesc)
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(createTime, o.createTime);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (companyId != null ? companyId.hashCode() : 0);
      result = result * 37 + (changeIntegral != null ? changeIntegral.hashCode() : 0);
      result = result * 37 + (integral != null ? integral.hashCode() : 0);
      result = result * 37 + (changeType != null ? changeType.hashCode() : 0);
      result = result * 37 + (changeDesc != null ? changeDesc.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (userId != null) builder.append(", userId=").append(userId);
    if (companyId != null) builder.append(", companyId=").append(companyId);
    if (changeIntegral != null) builder.append(", changeIntegral=").append(changeIntegral);
    if (integral != null) builder.append(", integral=").append(integral);
    if (changeType != null) builder.append(", changeType=").append(changeType);
    if (changeDesc != null) builder.append(", changeDesc=").append(changeDesc);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    return builder.replace(0, 2, "UserIntegralRecord{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<UserIntegralRecord, Builder> {
    public Long id;

    public Long userId;

    public Long companyId;

    public Long changeIntegral;

    public Long integral;

    public Integer changeType;

    public String changeDesc;

    public String orderId;

    public Long createTime;

    public Builder() {
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 公司id
     */
    public Builder companyId(Long companyId) {
      this.companyId = companyId;
      return this;
    }

    /**
     * 变动的积分
     */
    public Builder changeIntegral(Long changeIntegral) {
      this.changeIntegral = changeIntegral;
      return this;
    }

    /**
     * 剩余积分
     */
    public Builder integral(Long integral) {
      this.integral = integral;
      return this;
    }

    /**
     * 积分变动类型 1-消费 2使用
     */
    public Builder changeType(Integer changeType) {
      this.changeType = changeType;
      return this;
    }

    /**
     * 积分变动原因
     */
    public Builder changeDesc(String changeDesc) {
      this.changeDesc = changeDesc;
      return this;
    }

    /**
     * 消费或使用时涉及到的订单id
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    @Override
    public UserIntegralRecord build() {
      return new UserIntegralRecord(id, userId, companyId, changeIntegral, integral, changeType, changeDesc, orderId, createTime, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UserIntegralRecord extends ProtoAdapter<UserIntegralRecord> {
    ProtoAdapter_UserIntegralRecord() {
      super(FieldEncoding.LENGTH_DELIMITED, UserIntegralRecord.class);
    }

    @Override
    public int encodedSize(UserIntegralRecord value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.userId) : 0)
          + (value.companyId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.companyId) : 0)
          + (value.changeIntegral != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.changeIntegral) : 0)
          + (value.integral != null ? ProtoAdapter.UINT64.encodedSizeWithTag(5, value.integral) : 0)
          + (value.changeType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.changeType) : 0)
          + (value.changeDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.changeDesc) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.orderId) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.createTime) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UserIntegralRecord value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.userId);
      if (value.companyId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.companyId);
      if (value.changeIntegral != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.changeIntegral);
      if (value.integral != null) ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.integral);
      if (value.changeType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.changeType);
      if (value.changeDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.changeDesc);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.orderId);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.createTime);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UserIntegralRecord decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.companyId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.changeIntegral(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.integral(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.changeType(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.changeDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UserIntegralRecord redact(UserIntegralRecord value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
