// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonData.proto at 43:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class ImgInfo extends Message<ImgInfo, ImgInfo.Builder> {
  public static final ProtoAdapter<ImgInfo> ADAPTER = new ProtoAdapter_ImgInfo();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_IMGID = 0L;

  public static final String DEFAULT_IMGURL = "";

  public static final String DEFAULT_THUMBIMGURL = "";

  public static final Integer DEFAULT_HEIGHT = 0;

  public static final Integer DEFAULT_WIDTH = 0;

  public static final Integer DEFAULT_BGCOLOR = 0;

  public static final IMG_FORMAT DEFAULT_IMGTYPE = IMG_FORMAT.IMG_DEFAULT;

  public static final String DEFAULT_SUFFIX = "";

  public static final String DEFAULT_TYPE = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long imgId;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String imgurl;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String thumbImgurl;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer height;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer width;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer bgcolor;

  @WireField(
      tag = 7,
      adapter = "com.yijianyi.protocol.IMG_FORMAT#ADAPTER"
  )
  public final IMG_FORMAT imgtype;

  /**
   * 图片中心点
   */
  @WireField(
      tag = 8,
      adapter = "com.yijianyi.protocol.IMG_POINT#ADAPTER"
  )
  public final IMG_POINT center;

  /**
   * 图片后缀
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String suffix;

  /**
   * 类型 ：petimg ,headimg,feeds
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String type;

  public ImgInfo(Long imgId, String imgurl, String thumbImgurl, Integer height, Integer width, Integer bgcolor, IMG_FORMAT imgtype, IMG_POINT center, String suffix, String type) {
    this(imgId, imgurl, thumbImgurl, height, width, bgcolor, imgtype, center, suffix, type, ByteString.EMPTY);
  }

  public ImgInfo(Long imgId, String imgurl, String thumbImgurl, Integer height, Integer width, Integer bgcolor, IMG_FORMAT imgtype, IMG_POINT center, String suffix, String type, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.imgId = imgId;
    this.imgurl = imgurl;
    this.thumbImgurl = thumbImgurl;
    this.height = height;
    this.width = width;
    this.bgcolor = bgcolor;
    this.imgtype = imgtype;
    this.center = center;
    this.suffix = suffix;
    this.type = type;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.imgId = imgId;
    builder.imgurl = imgurl;
    builder.thumbImgurl = thumbImgurl;
    builder.height = height;
    builder.width = width;
    builder.bgcolor = bgcolor;
    builder.imgtype = imgtype;
    builder.center = center;
    builder.suffix = suffix;
    builder.type = type;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ImgInfo)) return false;
    ImgInfo o = (ImgInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(imgId, o.imgId)
        && Internal.equals(imgurl, o.imgurl)
        && Internal.equals(thumbImgurl, o.thumbImgurl)
        && Internal.equals(height, o.height)
        && Internal.equals(width, o.width)
        && Internal.equals(bgcolor, o.bgcolor)
        && Internal.equals(imgtype, o.imgtype)
        && Internal.equals(center, o.center)
        && Internal.equals(suffix, o.suffix)
        && Internal.equals(type, o.type);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (imgId != null ? imgId.hashCode() : 0);
      result = result * 37 + (imgurl != null ? imgurl.hashCode() : 0);
      result = result * 37 + (thumbImgurl != null ? thumbImgurl.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      result = result * 37 + (width != null ? width.hashCode() : 0);
      result = result * 37 + (bgcolor != null ? bgcolor.hashCode() : 0);
      result = result * 37 + (imgtype != null ? imgtype.hashCode() : 0);
      result = result * 37 + (center != null ? center.hashCode() : 0);
      result = result * 37 + (suffix != null ? suffix.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (imgId != null) builder.append(", imgId=").append(imgId);
    if (imgurl != null) builder.append(", imgurl=").append(imgurl);
    if (thumbImgurl != null) builder.append(", thumbImgurl=").append(thumbImgurl);
    if (height != null) builder.append(", height=").append(height);
    if (width != null) builder.append(", width=").append(width);
    if (bgcolor != null) builder.append(", bgcolor=").append(bgcolor);
    if (imgtype != null) builder.append(", imgtype=").append(imgtype);
    if (center != null) builder.append(", center=").append(center);
    if (suffix != null) builder.append(", suffix=").append(suffix);
    if (type != null) builder.append(", type=").append(type);
    return builder.replace(0, 2, "ImgInfo{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ImgInfo, Builder> {
    public Long imgId;

    public String imgurl;

    public String thumbImgurl;

    public Integer height;

    public Integer width;

    public Integer bgcolor;

    public IMG_FORMAT imgtype;

    public IMG_POINT center;

    public String suffix;

    public String type;

    public Builder() {
    }

    public Builder imgId(Long imgId) {
      this.imgId = imgId;
      return this;
    }

    public Builder imgurl(String imgurl) {
      this.imgurl = imgurl;
      return this;
    }

    public Builder thumbImgurl(String thumbImgurl) {
      this.thumbImgurl = thumbImgurl;
      return this;
    }

    public Builder height(Integer height) {
      this.height = height;
      return this;
    }

    public Builder width(Integer width) {
      this.width = width;
      return this;
    }

    public Builder bgcolor(Integer bgcolor) {
      this.bgcolor = bgcolor;
      return this;
    }

    public Builder imgtype(IMG_FORMAT imgtype) {
      this.imgtype = imgtype;
      return this;
    }

    /**
     * 图片中心点
     */
    public Builder center(IMG_POINT center) {
      this.center = center;
      return this;
    }

    /**
     * 图片后缀
     */
    public Builder suffix(String suffix) {
      this.suffix = suffix;
      return this;
    }

    /**
     * 类型 ：petimg ,headimg,feeds
     */
    public Builder type(String type) {
      this.type = type;
      return this;
    }

    @Override
    public ImgInfo build() {
      return new ImgInfo(imgId, imgurl, thumbImgurl, height, width, bgcolor, imgtype, center, suffix, type, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ImgInfo extends ProtoAdapter<ImgInfo> {
    ProtoAdapter_ImgInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, ImgInfo.class);
    }

    @Override
    public int encodedSize(ImgInfo value) {
      return (value.imgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.imgId) : 0)
          + (value.imgurl != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.imgurl) : 0)
          + (value.thumbImgurl != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.thumbImgurl) : 0)
          + (value.height != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.height) : 0)
          + (value.width != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.width) : 0)
          + (value.bgcolor != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.bgcolor) : 0)
          + (value.imgtype != null ? IMG_FORMAT.ADAPTER.encodedSizeWithTag(7, value.imgtype) : 0)
          + (value.center != null ? IMG_POINT.ADAPTER.encodedSizeWithTag(8, value.center) : 0)
          + (value.suffix != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.suffix) : 0)
          + (value.type != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.type) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ImgInfo value) throws IOException {
      if (value.imgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.imgId);
      if (value.imgurl != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.imgurl);
      if (value.thumbImgurl != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.thumbImgurl);
      if (value.height != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.height);
      if (value.width != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.width);
      if (value.bgcolor != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.bgcolor);
      if (value.imgtype != null) IMG_FORMAT.ADAPTER.encodeWithTag(writer, 7, value.imgtype);
      if (value.center != null) IMG_POINT.ADAPTER.encodeWithTag(writer, 8, value.center);
      if (value.suffix != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.suffix);
      if (value.type != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.type);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ImgInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.imgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.imgurl(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.thumbImgurl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.height(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.width(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.bgcolor(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: {
            try {
              builder.imgtype(IMG_FORMAT.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 8: builder.center(IMG_POINT.ADAPTER.decode(reader)); break;
          case 9: builder.suffix(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.type(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ImgInfo redact(ImgInfo value) {
      Builder builder = value.newBuilder();
      if (builder.center != null) builder.center = IMG_POINT.ADAPTER.redact(builder.center);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
