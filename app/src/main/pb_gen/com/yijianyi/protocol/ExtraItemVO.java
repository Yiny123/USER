// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 410:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 附加项展示VO
 */
public final class ExtraItemVO extends Message<ExtraItemVO, ExtraItemVO.Builder> {
  public static final ProtoAdapter<ExtraItemVO> ADAPTER = new ProtoAdapter_ExtraItemVO();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_SERVICE = "";

  public static final Integer DEFAULT_SERVICETIMES = 0;

  public static final String DEFAULT_PRICEDESC = "";

  public static final Long DEFAULT_PAIDFEE = 0L;

  public static final Long DEFAULT_NEEDPAY = 0L;

  public static final Long DEFAULT_TOTALCOST = 0L;

  public static final Integer DEFAULT_STATUS = 0;

  public static final Integer DEFAULT_INSUREFLAG = 0;

  public static final Long DEFAULT_PRICEID = 0L;

  public static final String DEFAULT_PRICEDESCNUMBER = "";

  public static final String DEFAULT_TOTALCOSTSTR = "";

  /**
   * id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 服务内容
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String service;

  /**
   * 服务次数
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer serviceTimes;

  /**
   * 价格描述
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String priceDesc;

  /**
   * 已付金额
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long paidFee;

  /**
   * 未付金额
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long needPay;

  /**
   * 总费用
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long totalCost;

  /**
   * 服务人员id
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> hgId;

  /**
   * 服务人员昵称
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> hgName;

  /**
   * -1-取消 0-未确认 1-已完成
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer status;

  /**
   * 套餐类型 1：长护险附加项，2：普通附加项
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer insureFlag;

  /**
   * 套餐id
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long priceId;

  /**
   * 价格描述 + 服务次数
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String priceDescNumber;

  /**
   * 总费用（转译）
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String totalCostStr;

  public ExtraItemVO(Long id, String service, Integer serviceTimes, String priceDesc, Long paidFee, Long needPay, Long totalCost, List<Long> hgId, List<String> hgName, Integer status, Integer insureFlag, Long priceId, String priceDescNumber, String totalCostStr) {
    this(id, service, serviceTimes, priceDesc, paidFee, needPay, totalCost, hgId, hgName, status, insureFlag, priceId, priceDescNumber, totalCostStr, ByteString.EMPTY);
  }

  public ExtraItemVO(Long id, String service, Integer serviceTimes, String priceDesc, Long paidFee, Long needPay, Long totalCost, List<Long> hgId, List<String> hgName, Integer status, Integer insureFlag, Long priceId, String priceDescNumber, String totalCostStr, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.service = service;
    this.serviceTimes = serviceTimes;
    this.priceDesc = priceDesc;
    this.paidFee = paidFee;
    this.needPay = needPay;
    this.totalCost = totalCost;
    this.hgId = Internal.immutableCopyOf("hgId", hgId);
    this.hgName = Internal.immutableCopyOf("hgName", hgName);
    this.status = status;
    this.insureFlag = insureFlag;
    this.priceId = priceId;
    this.priceDescNumber = priceDescNumber;
    this.totalCostStr = totalCostStr;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.service = service;
    builder.serviceTimes = serviceTimes;
    builder.priceDesc = priceDesc;
    builder.paidFee = paidFee;
    builder.needPay = needPay;
    builder.totalCost = totalCost;
    builder.hgId = Internal.copyOf("hgId", hgId);
    builder.hgName = Internal.copyOf("hgName", hgName);
    builder.status = status;
    builder.insureFlag = insureFlag;
    builder.priceId = priceId;
    builder.priceDescNumber = priceDescNumber;
    builder.totalCostStr = totalCostStr;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ExtraItemVO)) return false;
    ExtraItemVO o = (ExtraItemVO) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(service, o.service)
        && Internal.equals(serviceTimes, o.serviceTimes)
        && Internal.equals(priceDesc, o.priceDesc)
        && Internal.equals(paidFee, o.paidFee)
        && Internal.equals(needPay, o.needPay)
        && Internal.equals(totalCost, o.totalCost)
        && hgId.equals(o.hgId)
        && hgName.equals(o.hgName)
        && Internal.equals(status, o.status)
        && Internal.equals(insureFlag, o.insureFlag)
        && Internal.equals(priceId, o.priceId)
        && Internal.equals(priceDescNumber, o.priceDescNumber)
        && Internal.equals(totalCostStr, o.totalCostStr);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (service != null ? service.hashCode() : 0);
      result = result * 37 + (serviceTimes != null ? serviceTimes.hashCode() : 0);
      result = result * 37 + (priceDesc != null ? priceDesc.hashCode() : 0);
      result = result * 37 + (paidFee != null ? paidFee.hashCode() : 0);
      result = result * 37 + (needPay != null ? needPay.hashCode() : 0);
      result = result * 37 + (totalCost != null ? totalCost.hashCode() : 0);
      result = result * 37 + hgId.hashCode();
      result = result * 37 + hgName.hashCode();
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (insureFlag != null ? insureFlag.hashCode() : 0);
      result = result * 37 + (priceId != null ? priceId.hashCode() : 0);
      result = result * 37 + (priceDescNumber != null ? priceDescNumber.hashCode() : 0);
      result = result * 37 + (totalCostStr != null ? totalCostStr.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (service != null) builder.append(", service=").append(service);
    if (serviceTimes != null) builder.append(", serviceTimes=").append(serviceTimes);
    if (priceDesc != null) builder.append(", priceDesc=").append(priceDesc);
    if (paidFee != null) builder.append(", paidFee=").append(paidFee);
    if (needPay != null) builder.append(", needPay=").append(needPay);
    if (totalCost != null) builder.append(", totalCost=").append(totalCost);
    if (!hgId.isEmpty()) builder.append(", hgId=").append(hgId);
    if (!hgName.isEmpty()) builder.append(", hgName=").append(hgName);
    if (status != null) builder.append(", status=").append(status);
    if (insureFlag != null) builder.append(", insureFlag=").append(insureFlag);
    if (priceId != null) builder.append(", priceId=").append(priceId);
    if (priceDescNumber != null) builder.append(", priceDescNumber=").append(priceDescNumber);
    if (totalCostStr != null) builder.append(", totalCostStr=").append(totalCostStr);
    return builder.replace(0, 2, "ExtraItemVO{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ExtraItemVO, Builder> {
    public Long id;

    public String service;

    public Integer serviceTimes;

    public String priceDesc;

    public Long paidFee;

    public Long needPay;

    public Long totalCost;

    public List<Long> hgId;

    public List<String> hgName;

    public Integer status;

    public Integer insureFlag;

    public Long priceId;

    public String priceDescNumber;

    public String totalCostStr;

    public Builder() {
      hgId = Internal.newMutableList();
      hgName = Internal.newMutableList();
    }

    /**
     * id
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 服务内容
     */
    public Builder service(String service) {
      this.service = service;
      return this;
    }

    /**
     * 服务次数
     */
    public Builder serviceTimes(Integer serviceTimes) {
      this.serviceTimes = serviceTimes;
      return this;
    }

    /**
     * 价格描述
     */
    public Builder priceDesc(String priceDesc) {
      this.priceDesc = priceDesc;
      return this;
    }

    /**
     * 已付金额
     */
    public Builder paidFee(Long paidFee) {
      this.paidFee = paidFee;
      return this;
    }

    /**
     * 未付金额
     */
    public Builder needPay(Long needPay) {
      this.needPay = needPay;
      return this;
    }

    /**
     * 总费用
     */
    public Builder totalCost(Long totalCost) {
      this.totalCost = totalCost;
      return this;
    }

    /**
     * 服务人员id
     */
    public Builder hgId(List<Long> hgId) {
      Internal.checkElementsNotNull(hgId);
      this.hgId = hgId;
      return this;
    }

    /**
     * 服务人员昵称
     */
    public Builder hgName(List<String> hgName) {
      Internal.checkElementsNotNull(hgName);
      this.hgName = hgName;
      return this;
    }

    /**
     * -1-取消 0-未确认 1-已完成
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 套餐类型 1：长护险附加项，2：普通附加项
     */
    public Builder insureFlag(Integer insureFlag) {
      this.insureFlag = insureFlag;
      return this;
    }

    /**
     * 套餐id
     */
    public Builder priceId(Long priceId) {
      this.priceId = priceId;
      return this;
    }

    /**
     * 价格描述 + 服务次数
     */
    public Builder priceDescNumber(String priceDescNumber) {
      this.priceDescNumber = priceDescNumber;
      return this;
    }

    /**
     * 总费用（转译）
     */
    public Builder totalCostStr(String totalCostStr) {
      this.totalCostStr = totalCostStr;
      return this;
    }

    @Override
    public ExtraItemVO build() {
      return new ExtraItemVO(id, service, serviceTimes, priceDesc, paidFee, needPay, totalCost, hgId, hgName, status, insureFlag, priceId, priceDescNumber, totalCostStr, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ExtraItemVO extends ProtoAdapter<ExtraItemVO> {
    ProtoAdapter_ExtraItemVO() {
      super(FieldEncoding.LENGTH_DELIMITED, ExtraItemVO.class);
    }

    @Override
    public int encodedSize(ExtraItemVO value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.service != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.service) : 0)
          + (value.serviceTimes != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.serviceTimes) : 0)
          + (value.priceDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.priceDesc) : 0)
          + (value.paidFee != null ? ProtoAdapter.UINT64.encodedSizeWithTag(5, value.paidFee) : 0)
          + (value.needPay != null ? ProtoAdapter.UINT64.encodedSizeWithTag(6, value.needPay) : 0)
          + (value.totalCost != null ? ProtoAdapter.UINT64.encodedSizeWithTag(7, value.totalCost) : 0)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(8, value.hgId)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(9, value.hgName)
          + (value.status != null ? ProtoAdapter.INT32.encodedSizeWithTag(10, value.status) : 0)
          + (value.insureFlag != null ? ProtoAdapter.UINT32.encodedSizeWithTag(11, value.insureFlag) : 0)
          + (value.priceId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(12, value.priceId) : 0)
          + (value.priceDescNumber != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.priceDescNumber) : 0)
          + (value.totalCostStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.totalCostStr) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ExtraItemVO value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.service != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.service);
      if (value.serviceTimes != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.serviceTimes);
      if (value.priceDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.priceDesc);
      if (value.paidFee != null) ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.paidFee);
      if (value.needPay != null) ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.needPay);
      if (value.totalCost != null) ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.totalCost);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 8, value.hgId);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 9, value.hgName);
      if (value.status != null) ProtoAdapter.INT32.encodeWithTag(writer, 10, value.status);
      if (value.insureFlag != null) ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.insureFlag);
      if (value.priceId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 12, value.priceId);
      if (value.priceDescNumber != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.priceDescNumber);
      if (value.totalCostStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.totalCostStr);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ExtraItemVO decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.service(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.serviceTimes(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.priceDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.paidFee(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.needPay(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.totalCost(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.hgId.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.hgName.add(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.status(ProtoAdapter.INT32.decode(reader)); break;
          case 11: builder.insureFlag(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.priceId(ProtoAdapter.UINT64.decode(reader)); break;
          case 13: builder.priceDescNumber(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.totalCostStr(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ExtraItemVO redact(ExtraItemVO value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
