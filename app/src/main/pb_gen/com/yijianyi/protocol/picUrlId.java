// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 1315:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 储存图片id跟图片url
 */
public final class picUrlId extends Message<picUrlId, picUrlId.Builder> {
  public static final ProtoAdapter<picUrlId> ADAPTER = new ProtoAdapter_picUrlId();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_PICID = 0L;

  public static final String DEFAULT_PICURL = "";

  /**
   * 图片id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long picId;

  /**
   * 图片链接
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String picUrl;

  public picUrlId(Long picId, String picUrl) {
    this(picId, picUrl, ByteString.EMPTY);
  }

  public picUrlId(Long picId, String picUrl, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.picId = picId;
    this.picUrl = picUrl;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.picId = picId;
    builder.picUrl = picUrl;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof picUrlId)) return false;
    picUrlId o = (picUrlId) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(picId, o.picId)
        && Internal.equals(picUrl, o.picUrl);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (picId != null ? picId.hashCode() : 0);
      result = result * 37 + (picUrl != null ? picUrl.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (picId != null) builder.append(", picId=").append(picId);
    if (picUrl != null) builder.append(", picUrl=").append(picUrl);
    return builder.replace(0, 2, "picUrlId{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<picUrlId, Builder> {
    public Long picId;

    public String picUrl;

    public Builder() {
    }

    /**
     * 图片id
     */
    public Builder picId(Long picId) {
      this.picId = picId;
      return this;
    }

    /**
     * 图片链接
     */
    public Builder picUrl(String picUrl) {
      this.picUrl = picUrl;
      return this;
    }

    @Override
    public picUrlId build() {
      return new picUrlId(picId, picUrl, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_picUrlId extends ProtoAdapter<picUrlId> {
    ProtoAdapter_picUrlId() {
      super(FieldEncoding.LENGTH_DELIMITED, picUrlId.class);
    }

    @Override
    public int encodedSize(picUrlId value) {
      return (value.picId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.picId) : 0)
          + (value.picUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.picUrl) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, picUrlId value) throws IOException {
      if (value.picId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.picId);
      if (value.picUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.picUrl);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public picUrlId decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.picId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.picUrl(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public picUrlId redact(picUrlId value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
