// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 8:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 支付流水
 */
public final class OrderPayModel extends Message<OrderPayModel, OrderPayModel.Builder> {
  public static final ProtoAdapter<OrderPayModel> ADAPTER = new ProtoAdapter_OrderPayModel();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_PAYID = "";

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_USERID = 0L;

  public static final Long DEFAULT_COMPANYID = 0L;

  public static final Integer DEFAULT_PAYTYPE = 0;

  public static final String DEFAULT_TRANSACTIONID = "";

  public static final String DEFAULT_PAYOPENID = "";

  public static final Integer DEFAULT_FEE = 0;

  public static final Integer DEFAULT_PAYFEE = 0;

  public static final Long DEFAULT_PAYSTARTTIME = 0L;

  public static final Long DEFAULT_PAYENDTIME = 0L;

  public static final String DEFAULT_BANK = "";

  public static final String DEFAULT_ATTACH = "";

  public static final Integer DEFAULT_PAYSTATUS = 0;

  public static final Integer DEFAULT_PAYBUSITYPE = 0;

  public static final Integer DEFAULT_REFUNDFEE = 0;

  public static final Integer DEFAULT_PRINTNUM = 0;

  public static final String DEFAULT_RECEIVER = "";

  public static final Long DEFAULT_RECEIVERID = 0L;

  public static final Long DEFAULT_ORGID = 0L;

  public static final Long DEFAULT_BRANCHID = 0L;

  /**
   * 支付的用户单号
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String payId;

  /**
   * 订单号
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 用户id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 公司id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long companyId;

  /**
   * 支付类型 1-支付宝  2-微信公众号 3-微信APP 9-条形码 10-现金 11-pos  50-支付宝退款 51-微信公众号退款 52-微信APP退款
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payType;

  /**
   * 第三方支付的订单号
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String transactionId;

  /**
   * 支付的用户ID
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String payOpenId;

  /**
   * 发起支付金额 单位分  负数时为退款请求
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer fee;

  /**
   * 实际支付金额 单位分
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payFee;

  /**
   * 支付开始时间
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long payStartTime;

  /**
   * 支付结束时间
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long payEndTime;

  /**
   * 支付银行
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bank;

  /**
   * 扩展字段
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String attach;

  /**
   * 支付状态 1-已支付  3-待退款  4-已退款
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payStatus;

  /**
   * 支付业务类型 1-定额充值 2-任意金额充值 3-支付预交金 4-支付结算清单 5-支付订单 60-退预付款或优惠 61-退长护险补贴 62-退门禁卡押金
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payBusiType;

  /**
   * 已退金额
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer refundFee;

  /**
   * 打印次数
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer printNum;

  /**
   * 收款人
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String receiver;

  /**
   * 收款人id
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long receiverId;

  /**
   * 机构id
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long orgId;

  /**
   * 科室id
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long branchId;

  public OrderPayModel(String payId, String orderId, Long userId, Long companyId, Integer payType, String transactionId, String payOpenId, Integer fee, Integer payFee, Long payStartTime, Long payEndTime, String bank, String attach, Integer payStatus, Integer payBusiType, Integer refundFee, Integer printNum, String receiver, Long receiverId, Long orgId, Long branchId) {
    this(payId, orderId, userId, companyId, payType, transactionId, payOpenId, fee, payFee, payStartTime, payEndTime, bank, attach, payStatus, payBusiType, refundFee, printNum, receiver, receiverId, orgId, branchId, ByteString.EMPTY);
  }

  public OrderPayModel(String payId, String orderId, Long userId, Long companyId, Integer payType, String transactionId, String payOpenId, Integer fee, Integer payFee, Long payStartTime, Long payEndTime, String bank, String attach, Integer payStatus, Integer payBusiType, Integer refundFee, Integer printNum, String receiver, Long receiverId, Long orgId, Long branchId, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.payId = payId;
    this.orderId = orderId;
    this.userId = userId;
    this.companyId = companyId;
    this.payType = payType;
    this.transactionId = transactionId;
    this.payOpenId = payOpenId;
    this.fee = fee;
    this.payFee = payFee;
    this.payStartTime = payStartTime;
    this.payEndTime = payEndTime;
    this.bank = bank;
    this.attach = attach;
    this.payStatus = payStatus;
    this.payBusiType = payBusiType;
    this.refundFee = refundFee;
    this.printNum = printNum;
    this.receiver = receiver;
    this.receiverId = receiverId;
    this.orgId = orgId;
    this.branchId = branchId;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.payId = payId;
    builder.orderId = orderId;
    builder.userId = userId;
    builder.companyId = companyId;
    builder.payType = payType;
    builder.transactionId = transactionId;
    builder.payOpenId = payOpenId;
    builder.fee = fee;
    builder.payFee = payFee;
    builder.payStartTime = payStartTime;
    builder.payEndTime = payEndTime;
    builder.bank = bank;
    builder.attach = attach;
    builder.payStatus = payStatus;
    builder.payBusiType = payBusiType;
    builder.refundFee = refundFee;
    builder.printNum = printNum;
    builder.receiver = receiver;
    builder.receiverId = receiverId;
    builder.orgId = orgId;
    builder.branchId = branchId;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OrderPayModel)) return false;
    OrderPayModel o = (OrderPayModel) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(payId, o.payId)
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(userId, o.userId)
        && Internal.equals(companyId, o.companyId)
        && Internal.equals(payType, o.payType)
        && Internal.equals(transactionId, o.transactionId)
        && Internal.equals(payOpenId, o.payOpenId)
        && Internal.equals(fee, o.fee)
        && Internal.equals(payFee, o.payFee)
        && Internal.equals(payStartTime, o.payStartTime)
        && Internal.equals(payEndTime, o.payEndTime)
        && Internal.equals(bank, o.bank)
        && Internal.equals(attach, o.attach)
        && Internal.equals(payStatus, o.payStatus)
        && Internal.equals(payBusiType, o.payBusiType)
        && Internal.equals(refundFee, o.refundFee)
        && Internal.equals(printNum, o.printNum)
        && Internal.equals(receiver, o.receiver)
        && Internal.equals(receiverId, o.receiverId)
        && Internal.equals(orgId, o.orgId)
        && Internal.equals(branchId, o.branchId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (payId != null ? payId.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (companyId != null ? companyId.hashCode() : 0);
      result = result * 37 + (payType != null ? payType.hashCode() : 0);
      result = result * 37 + (transactionId != null ? transactionId.hashCode() : 0);
      result = result * 37 + (payOpenId != null ? payOpenId.hashCode() : 0);
      result = result * 37 + (fee != null ? fee.hashCode() : 0);
      result = result * 37 + (payFee != null ? payFee.hashCode() : 0);
      result = result * 37 + (payStartTime != null ? payStartTime.hashCode() : 0);
      result = result * 37 + (payEndTime != null ? payEndTime.hashCode() : 0);
      result = result * 37 + (bank != null ? bank.hashCode() : 0);
      result = result * 37 + (attach != null ? attach.hashCode() : 0);
      result = result * 37 + (payStatus != null ? payStatus.hashCode() : 0);
      result = result * 37 + (payBusiType != null ? payBusiType.hashCode() : 0);
      result = result * 37 + (refundFee != null ? refundFee.hashCode() : 0);
      result = result * 37 + (printNum != null ? printNum.hashCode() : 0);
      result = result * 37 + (receiver != null ? receiver.hashCode() : 0);
      result = result * 37 + (receiverId != null ? receiverId.hashCode() : 0);
      result = result * 37 + (orgId != null ? orgId.hashCode() : 0);
      result = result * 37 + (branchId != null ? branchId.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (payId != null) builder.append(", payId=").append(payId);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (userId != null) builder.append(", userId=").append(userId);
    if (companyId != null) builder.append(", companyId=").append(companyId);
    if (payType != null) builder.append(", payType=").append(payType);
    if (transactionId != null) builder.append(", transactionId=").append(transactionId);
    if (payOpenId != null) builder.append(", payOpenId=").append(payOpenId);
    if (fee != null) builder.append(", fee=").append(fee);
    if (payFee != null) builder.append(", payFee=").append(payFee);
    if (payStartTime != null) builder.append(", payStartTime=").append(payStartTime);
    if (payEndTime != null) builder.append(", payEndTime=").append(payEndTime);
    if (bank != null) builder.append(", bank=").append(bank);
    if (attach != null) builder.append(", attach=").append(attach);
    if (payStatus != null) builder.append(", payStatus=").append(payStatus);
    if (payBusiType != null) builder.append(", payBusiType=").append(payBusiType);
    if (refundFee != null) builder.append(", refundFee=").append(refundFee);
    if (printNum != null) builder.append(", printNum=").append(printNum);
    if (receiver != null) builder.append(", receiver=").append(receiver);
    if (receiverId != null) builder.append(", receiverId=").append(receiverId);
    if (orgId != null) builder.append(", orgId=").append(orgId);
    if (branchId != null) builder.append(", branchId=").append(branchId);
    return builder.replace(0, 2, "OrderPayModel{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<OrderPayModel, Builder> {
    public String payId;

    public String orderId;

    public Long userId;

    public Long companyId;

    public Integer payType;

    public String transactionId;

    public String payOpenId;

    public Integer fee;

    public Integer payFee;

    public Long payStartTime;

    public Long payEndTime;

    public String bank;

    public String attach;

    public Integer payStatus;

    public Integer payBusiType;

    public Integer refundFee;

    public Integer printNum;

    public String receiver;

    public Long receiverId;

    public Long orgId;

    public Long branchId;

    public Builder() {
    }

    /**
     * 支付的用户单号
     */
    public Builder payId(String payId) {
      this.payId = payId;
      return this;
    }

    /**
     * 订单号
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 用户id
     */
    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 公司id
     */
    public Builder companyId(Long companyId) {
      this.companyId = companyId;
      return this;
    }

    /**
     * 支付类型 1-支付宝  2-微信公众号 3-微信APP 9-条形码 10-现金 11-pos  50-支付宝退款 51-微信公众号退款 52-微信APP退款
     */
    public Builder payType(Integer payType) {
      this.payType = payType;
      return this;
    }

    /**
     * 第三方支付的订单号
     */
    public Builder transactionId(String transactionId) {
      this.transactionId = transactionId;
      return this;
    }

    /**
     * 支付的用户ID
     */
    public Builder payOpenId(String payOpenId) {
      this.payOpenId = payOpenId;
      return this;
    }

    /**
     * 发起支付金额 单位分  负数时为退款请求
     */
    public Builder fee(Integer fee) {
      this.fee = fee;
      return this;
    }

    /**
     * 实际支付金额 单位分
     */
    public Builder payFee(Integer payFee) {
      this.payFee = payFee;
      return this;
    }

    /**
     * 支付开始时间
     */
    public Builder payStartTime(Long payStartTime) {
      this.payStartTime = payStartTime;
      return this;
    }

    /**
     * 支付结束时间
     */
    public Builder payEndTime(Long payEndTime) {
      this.payEndTime = payEndTime;
      return this;
    }

    /**
     * 支付银行
     */
    public Builder bank(String bank) {
      this.bank = bank;
      return this;
    }

    /**
     * 扩展字段
     */
    public Builder attach(String attach) {
      this.attach = attach;
      return this;
    }

    /**
     * 支付状态 1-已支付  3-待退款  4-已退款
     */
    public Builder payStatus(Integer payStatus) {
      this.payStatus = payStatus;
      return this;
    }

    /**
     * 支付业务类型 1-定额充值 2-任意金额充值 3-支付预交金 4-支付结算清单 5-支付订单 60-退预付款或优惠 61-退长护险补贴 62-退门禁卡押金
     */
    public Builder payBusiType(Integer payBusiType) {
      this.payBusiType = payBusiType;
      return this;
    }

    /**
     * 已退金额
     */
    public Builder refundFee(Integer refundFee) {
      this.refundFee = refundFee;
      return this;
    }

    /**
     * 打印次数
     */
    public Builder printNum(Integer printNum) {
      this.printNum = printNum;
      return this;
    }

    /**
     * 收款人
     */
    public Builder receiver(String receiver) {
      this.receiver = receiver;
      return this;
    }

    /**
     * 收款人id
     */
    public Builder receiverId(Long receiverId) {
      this.receiverId = receiverId;
      return this;
    }

    /**
     * 机构id
     */
    public Builder orgId(Long orgId) {
      this.orgId = orgId;
      return this;
    }

    /**
     * 科室id
     */
    public Builder branchId(Long branchId) {
      this.branchId = branchId;
      return this;
    }

    @Override
    public OrderPayModel build() {
      return new OrderPayModel(payId, orderId, userId, companyId, payType, transactionId, payOpenId, fee, payFee, payStartTime, payEndTime, bank, attach, payStatus, payBusiType, refundFee, printNum, receiver, receiverId, orgId, branchId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OrderPayModel extends ProtoAdapter<OrderPayModel> {
    ProtoAdapter_OrderPayModel() {
      super(FieldEncoding.LENGTH_DELIMITED, OrderPayModel.class);
    }

    @Override
    public int encodedSize(OrderPayModel value) {
      return (value.payId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.payId) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.orderId) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.userId) : 0)
          + (value.companyId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.companyId) : 0)
          + (value.payType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.payType) : 0)
          + (value.transactionId != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.transactionId) : 0)
          + (value.payOpenId != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.payOpenId) : 0)
          + (value.fee != null ? ProtoAdapter.UINT32.encodedSizeWithTag(8, value.fee) : 0)
          + (value.payFee != null ? ProtoAdapter.UINT32.encodedSizeWithTag(9, value.payFee) : 0)
          + (value.payStartTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(10, value.payStartTime) : 0)
          + (value.payEndTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(11, value.payEndTime) : 0)
          + (value.bank != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.bank) : 0)
          + (value.attach != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.attach) : 0)
          + (value.payStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(14, value.payStatus) : 0)
          + (value.payBusiType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(15, value.payBusiType) : 0)
          + (value.refundFee != null ? ProtoAdapter.UINT32.encodedSizeWithTag(16, value.refundFee) : 0)
          + (value.printNum != null ? ProtoAdapter.UINT32.encodedSizeWithTag(17, value.printNum) : 0)
          + (value.receiver != null ? ProtoAdapter.STRING.encodedSizeWithTag(18, value.receiver) : 0)
          + (value.receiverId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(19, value.receiverId) : 0)
          + (value.orgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(20, value.orgId) : 0)
          + (value.branchId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(21, value.branchId) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OrderPayModel value) throws IOException {
      if (value.payId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.payId);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.orderId);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.userId);
      if (value.companyId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.companyId);
      if (value.payType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.payType);
      if (value.transactionId != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.transactionId);
      if (value.payOpenId != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.payOpenId);
      if (value.fee != null) ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.fee);
      if (value.payFee != null) ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.payFee);
      if (value.payStartTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 10, value.payStartTime);
      if (value.payEndTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.payEndTime);
      if (value.bank != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.bank);
      if (value.attach != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.attach);
      if (value.payStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.payStatus);
      if (value.payBusiType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.payBusiType);
      if (value.refundFee != null) ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.refundFee);
      if (value.printNum != null) ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.printNum);
      if (value.receiver != null) ProtoAdapter.STRING.encodeWithTag(writer, 18, value.receiver);
      if (value.receiverId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 19, value.receiverId);
      if (value.orgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 20, value.orgId);
      if (value.branchId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 21, value.branchId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OrderPayModel decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.payId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.companyId(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.payType(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.transactionId(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.payOpenId(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.fee(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.payFee(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.payStartTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 11: builder.payEndTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 12: builder.bank(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.attach(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.payStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.payBusiType(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.refundFee(ProtoAdapter.UINT32.decode(reader)); break;
          case 17: builder.printNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 18: builder.receiver(ProtoAdapter.STRING.decode(reader)); break;
          case 19: builder.receiverId(ProtoAdapter.UINT64.decode(reader)); break;
          case 20: builder.orgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 21: builder.branchId(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OrderPayModel redact(OrderPayModel value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
