// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 265:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 护工公司关联信息
 */
public final class CompanyHG extends Message<CompanyHG, CompanyHG.Builder> {
  public static final ProtoAdapter<CompanyHG> ADAPTER = new ProtoAdapter_CompanyHG();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_COMPANYID = 0L;

  public static final Long DEFAULT_ORGID = 0L;

  public static final Long DEFAULT_HGID = 0L;

  public static final String DEFAULT_HGNO = "";

  public static final Integer DEFAULT_HGTYPE = 0;

  public static final Integer DEFAULT_WORKTYPE = 0;

  public static final Long DEFAULT_JOINTIME = 0L;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final Integer DEFAULT_ONDUTY = 0;

  public static final Integer DEFAULT_ROLETYPE = 0;

  /**
   * 公司id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long companyId;

  /**
   * 机构id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long orgId;

  /**
   * 护工id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long hgId;

  /**
   * 护工工号
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String hgno;

  /**
   * 类型 1护工 2护士 3督导 4 副主任 5主任  6质检 7质检主任 8运营 9客服 10健康经理
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer hgType;

  /**
   * 护工的类型 1- 多陪 2 - 专陪 3 - 两种混合
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer workType;

  /**
   * 科室id
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> branchIds;

  /**
   * 入职时间
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long joinTime;

  /**
   * 创建时间
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 创建员工ID
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 创建员工名称
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 直属上级id
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> superiorId;

  /**
   * 是否值班中 0-未值班 1-值班中
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer onduty;

  /**
   * 角色类型 0-平台 1-居家 2-机构 3-自照
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer roleType;

  /**
   * 可提供服务
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> serviceTypes;

  public CompanyHG(Long companyId, Long orgId, Long hgId, String hgno, Integer hgType, Integer workType, List<Long> branchIds, Long joinTime, Long createTime, Long createStaffId, String createStaffName, List<Long> superiorId, Integer onduty, Integer roleType, List<Integer> serviceTypes) {
    this(companyId, orgId, hgId, hgno, hgType, workType, branchIds, joinTime, createTime, createStaffId, createStaffName, superiorId, onduty, roleType, serviceTypes, ByteString.EMPTY);
  }

  public CompanyHG(Long companyId, Long orgId, Long hgId, String hgno, Integer hgType, Integer workType, List<Long> branchIds, Long joinTime, Long createTime, Long createStaffId, String createStaffName, List<Long> superiorId, Integer onduty, Integer roleType, List<Integer> serviceTypes, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.companyId = companyId;
    this.orgId = orgId;
    this.hgId = hgId;
    this.hgno = hgno;
    this.hgType = hgType;
    this.workType = workType;
    this.branchIds = Internal.immutableCopyOf("branchIds", branchIds);
    this.joinTime = joinTime;
    this.createTime = createTime;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.superiorId = Internal.immutableCopyOf("superiorId", superiorId);
    this.onduty = onduty;
    this.roleType = roleType;
    this.serviceTypes = Internal.immutableCopyOf("serviceTypes", serviceTypes);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.companyId = companyId;
    builder.orgId = orgId;
    builder.hgId = hgId;
    builder.hgno = hgno;
    builder.hgType = hgType;
    builder.workType = workType;
    builder.branchIds = Internal.copyOf("branchIds", branchIds);
    builder.joinTime = joinTime;
    builder.createTime = createTime;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.superiorId = Internal.copyOf("superiorId", superiorId);
    builder.onduty = onduty;
    builder.roleType = roleType;
    builder.serviceTypes = Internal.copyOf("serviceTypes", serviceTypes);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CompanyHG)) return false;
    CompanyHG o = (CompanyHG) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(companyId, o.companyId)
        && Internal.equals(orgId, o.orgId)
        && Internal.equals(hgId, o.hgId)
        && Internal.equals(hgno, o.hgno)
        && Internal.equals(hgType, o.hgType)
        && Internal.equals(workType, o.workType)
        && branchIds.equals(o.branchIds)
        && Internal.equals(joinTime, o.joinTime)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && superiorId.equals(o.superiorId)
        && Internal.equals(onduty, o.onduty)
        && Internal.equals(roleType, o.roleType)
        && serviceTypes.equals(o.serviceTypes);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (companyId != null ? companyId.hashCode() : 0);
      result = result * 37 + (orgId != null ? orgId.hashCode() : 0);
      result = result * 37 + (hgId != null ? hgId.hashCode() : 0);
      result = result * 37 + (hgno != null ? hgno.hashCode() : 0);
      result = result * 37 + (hgType != null ? hgType.hashCode() : 0);
      result = result * 37 + (workType != null ? workType.hashCode() : 0);
      result = result * 37 + branchIds.hashCode();
      result = result * 37 + (joinTime != null ? joinTime.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + superiorId.hashCode();
      result = result * 37 + (onduty != null ? onduty.hashCode() : 0);
      result = result * 37 + (roleType != null ? roleType.hashCode() : 0);
      result = result * 37 + serviceTypes.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (companyId != null) builder.append(", companyId=").append(companyId);
    if (orgId != null) builder.append(", orgId=").append(orgId);
    if (hgId != null) builder.append(", hgId=").append(hgId);
    if (hgno != null) builder.append(", hgno=").append(hgno);
    if (hgType != null) builder.append(", hgType=").append(hgType);
    if (workType != null) builder.append(", workType=").append(workType);
    if (!branchIds.isEmpty()) builder.append(", branchIds=").append(branchIds);
    if (joinTime != null) builder.append(", joinTime=").append(joinTime);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (!superiorId.isEmpty()) builder.append(", superiorId=").append(superiorId);
    if (onduty != null) builder.append(", onduty=").append(onduty);
    if (roleType != null) builder.append(", roleType=").append(roleType);
    if (!serviceTypes.isEmpty()) builder.append(", serviceTypes=").append(serviceTypes);
    return builder.replace(0, 2, "CompanyHG{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CompanyHG, Builder> {
    public Long companyId;

    public Long orgId;

    public Long hgId;

    public String hgno;

    public Integer hgType;

    public Integer workType;

    public List<Long> branchIds;

    public Long joinTime;

    public Long createTime;

    public Long createStaffId;

    public String createStaffName;

    public List<Long> superiorId;

    public Integer onduty;

    public Integer roleType;

    public List<Integer> serviceTypes;

    public Builder() {
      branchIds = Internal.newMutableList();
      superiorId = Internal.newMutableList();
      serviceTypes = Internal.newMutableList();
    }

    /**
     * 公司id
     */
    public Builder companyId(Long companyId) {
      this.companyId = companyId;
      return this;
    }

    /**
     * 机构id
     */
    public Builder orgId(Long orgId) {
      this.orgId = orgId;
      return this;
    }

    /**
     * 护工id
     */
    public Builder hgId(Long hgId) {
      this.hgId = hgId;
      return this;
    }

    /**
     * 护工工号
     */
    public Builder hgno(String hgno) {
      this.hgno = hgno;
      return this;
    }

    /**
     * 类型 1护工 2护士 3督导 4 副主任 5主任  6质检 7质检主任 8运营 9客服 10健康经理
     */
    public Builder hgType(Integer hgType) {
      this.hgType = hgType;
      return this;
    }

    /**
     * 护工的类型 1- 多陪 2 - 专陪 3 - 两种混合
     */
    public Builder workType(Integer workType) {
      this.workType = workType;
      return this;
    }

    /**
     * 科室id
     */
    public Builder branchIds(List<Long> branchIds) {
      Internal.checkElementsNotNull(branchIds);
      this.branchIds = branchIds;
      return this;
    }

    /**
     * 入职时间
     */
    public Builder joinTime(Long joinTime) {
      this.joinTime = joinTime;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 创建员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 创建员工名称
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 直属上级id
     */
    public Builder superiorId(List<Long> superiorId) {
      Internal.checkElementsNotNull(superiorId);
      this.superiorId = superiorId;
      return this;
    }

    /**
     * 是否值班中 0-未值班 1-值班中
     */
    public Builder onduty(Integer onduty) {
      this.onduty = onduty;
      return this;
    }

    /**
     * 角色类型 0-平台 1-居家 2-机构 3-自照
     */
    public Builder roleType(Integer roleType) {
      this.roleType = roleType;
      return this;
    }

    /**
     * 可提供服务
     */
    public Builder serviceTypes(List<Integer> serviceTypes) {
      Internal.checkElementsNotNull(serviceTypes);
      this.serviceTypes = serviceTypes;
      return this;
    }

    @Override
    public CompanyHG build() {
      return new CompanyHG(companyId, orgId, hgId, hgno, hgType, workType, branchIds, joinTime, createTime, createStaffId, createStaffName, superiorId, onduty, roleType, serviceTypes, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CompanyHG extends ProtoAdapter<CompanyHG> {
    ProtoAdapter_CompanyHG() {
      super(FieldEncoding.LENGTH_DELIMITED, CompanyHG.class);
    }

    @Override
    public int encodedSize(CompanyHG value) {
      return (value.companyId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.companyId) : 0)
          + (value.orgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.orgId) : 0)
          + (value.hgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.hgId) : 0)
          + (value.hgno != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.hgno) : 0)
          + (value.hgType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.hgType) : 0)
          + (value.workType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.workType) : 0)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(7, value.branchIds)
          + (value.joinTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.joinTime) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.createTime) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(10, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.createStaffName) : 0)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(12, value.superiorId)
          + (value.onduty != null ? ProtoAdapter.UINT32.encodedSizeWithTag(13, value.onduty) : 0)
          + (value.roleType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(14, value.roleType) : 0)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(15, value.serviceTypes)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CompanyHG value) throws IOException {
      if (value.companyId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.companyId);
      if (value.orgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.orgId);
      if (value.hgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.hgId);
      if (value.hgno != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.hgno);
      if (value.hgType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.hgType);
      if (value.workType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.workType);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 7, value.branchIds);
      if (value.joinTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.joinTime);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.createTime);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 10, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.createStaffName);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 12, value.superiorId);
      if (value.onduty != null) ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.onduty);
      if (value.roleType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.roleType);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 15, value.serviceTypes);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CompanyHG decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.companyId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.orgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.hgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.hgno(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.hgType(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.workType(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.branchIds.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.joinTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 11: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.superiorId.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 13: builder.onduty(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.roleType(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.serviceTypes.add(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CompanyHG redact(CompanyHG value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
