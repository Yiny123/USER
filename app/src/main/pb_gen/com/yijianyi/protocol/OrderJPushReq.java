// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 937:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 订单操作通知
 */
public final class OrderJPushReq extends Message<OrderJPushReq, OrderJPushReq.Builder> {
  public static final ProtoAdapter<OrderJPushReq> ADAPTER = new ProtoAdapter_OrderJPushReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Integer DEFAULT_JPUSHTYPE = 0;

  public static final Long DEFAULT_PRICEID = 0L;

  /**
   * 订单id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 类型：1-结束订单 2-变更服务 3-协助收款 4-长护险订单申请结束订单
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer jpushType;

  /**
   * 服务id jpushType 为变更服务时,并且是由承包科室的多陪服务变更为专陪推送才传入
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long priceId;

  public OrderJPushReq(String orderId, Integer jpushType, Long priceId) {
    this(orderId, jpushType, priceId, ByteString.EMPTY);
  }

  public OrderJPushReq(String orderId, Integer jpushType, Long priceId, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.orderId = orderId;
    this.jpushType = jpushType;
    this.priceId = priceId;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.orderId = orderId;
    builder.jpushType = jpushType;
    builder.priceId = priceId;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OrderJPushReq)) return false;
    OrderJPushReq o = (OrderJPushReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(jpushType, o.jpushType)
        && Internal.equals(priceId, o.priceId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (jpushType != null ? jpushType.hashCode() : 0);
      result = result * 37 + (priceId != null ? priceId.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (jpushType != null) builder.append(", jpushType=").append(jpushType);
    if (priceId != null) builder.append(", priceId=").append(priceId);
    return builder.replace(0, 2, "OrderJPushReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<OrderJPushReq, Builder> {
    public String orderId;

    public Integer jpushType;

    public Long priceId;

    public Builder() {
    }

    /**
     * 订单id
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 类型：1-结束订单 2-变更服务 3-协助收款 4-长护险订单申请结束订单
     */
    public Builder jpushType(Integer jpushType) {
      this.jpushType = jpushType;
      return this;
    }

    /**
     * 服务id jpushType 为变更服务时,并且是由承包科室的多陪服务变更为专陪推送才传入
     */
    public Builder priceId(Long priceId) {
      this.priceId = priceId;
      return this;
    }

    @Override
    public OrderJPushReq build() {
      return new OrderJPushReq(orderId, jpushType, priceId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OrderJPushReq extends ProtoAdapter<OrderJPushReq> {
    ProtoAdapter_OrderJPushReq() {
      super(FieldEncoding.LENGTH_DELIMITED, OrderJPushReq.class);
    }

    @Override
    public int encodedSize(OrderJPushReq value) {
      return (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.orderId) : 0)
          + (value.jpushType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(2, value.jpushType) : 0)
          + (value.priceId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.priceId) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OrderJPushReq value) throws IOException {
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.orderId);
      if (value.jpushType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.jpushType);
      if (value.priceId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.priceId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OrderJPushReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.jpushType(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.priceId(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OrderJPushReq redact(OrderJPushReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
