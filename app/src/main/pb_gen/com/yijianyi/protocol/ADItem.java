// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: CommonData.proto at 67:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 广告信息-（闪屏、banner...）
 */
public final class ADItem extends Message<ADItem, ADItem.Builder> {
  public static final ProtoAdapter<ADItem> ADAPTER = new ProtoAdapter_ADItem();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_ID = 0;

  public static final AD_TYPE DEFAULT_TYPE = AD_TYPE.AD_DEFAULT;

  public static final Integer DEFAULT_INDEX = 0;

  public static final String DEFAULT_JUMPTO = "";

  public static final Long DEFAULT_STARTTIMECD = 0L;

  public static final Long DEFAULT_ENDTIMECD = 0L;

  public static final Boolean DEFAULT_ONLYONETIME = false;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer id;

  /**
   * 此广告显示的位置（同时表示类型）
   */
  @WireField(
      tag = 2,
      adapter = "com.yijianyi.protocol.AD_TYPE#ADAPTER"
  )
  public final AD_TYPE type;

  /**
   * 当前位置的顺序数,排在第几位
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer index;

  /**
   * 旧版本banner图片，3.0之前的APP版本使用
   */
  @WireField(
      tag = 4,
      adapter = "com.yijianyi.protocol.ImgInfo#ADAPTER"
  )
  public final ImgInfo imgInfo;

  /**
   * 点击跳转url
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jumpto;

  /**
   * 距离开始的时间，如果已经开始则为0. 单位：毫秒
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long startTimeCD;

  /**
   * 距离结束的时间，如果已经开始则为0. 单位：毫秒
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long endTimeCD;

  /**
   * 指定广告是否只显示一次
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean onlyOneTime;

  /**
   * 新版本banner图片，3.0以后的APP版本使用
   */
  @WireField(
      tag = 9,
      adapter = "com.yijianyi.protocol.ImgInfo#ADAPTER"
  )
  public final ImgInfo imgInfoNew;

  public ADItem(Integer id, AD_TYPE type, Integer index, ImgInfo imgInfo, String jumpto, Long startTimeCD, Long endTimeCD, Boolean onlyOneTime, ImgInfo imgInfoNew) {
    this(id, type, index, imgInfo, jumpto, startTimeCD, endTimeCD, onlyOneTime, imgInfoNew, ByteString.EMPTY);
  }

  public ADItem(Integer id, AD_TYPE type, Integer index, ImgInfo imgInfo, String jumpto, Long startTimeCD, Long endTimeCD, Boolean onlyOneTime, ImgInfo imgInfoNew, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.type = type;
    this.index = index;
    this.imgInfo = imgInfo;
    this.jumpto = jumpto;
    this.startTimeCD = startTimeCD;
    this.endTimeCD = endTimeCD;
    this.onlyOneTime = onlyOneTime;
    this.imgInfoNew = imgInfoNew;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.type = type;
    builder.index = index;
    builder.imgInfo = imgInfo;
    builder.jumpto = jumpto;
    builder.startTimeCD = startTimeCD;
    builder.endTimeCD = endTimeCD;
    builder.onlyOneTime = onlyOneTime;
    builder.imgInfoNew = imgInfoNew;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ADItem)) return false;
    ADItem o = (ADItem) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(type, o.type)
        && Internal.equals(index, o.index)
        && Internal.equals(imgInfo, o.imgInfo)
        && Internal.equals(jumpto, o.jumpto)
        && Internal.equals(startTimeCD, o.startTimeCD)
        && Internal.equals(endTimeCD, o.endTimeCD)
        && Internal.equals(onlyOneTime, o.onlyOneTime)
        && Internal.equals(imgInfoNew, o.imgInfoNew);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (index != null ? index.hashCode() : 0);
      result = result * 37 + (imgInfo != null ? imgInfo.hashCode() : 0);
      result = result * 37 + (jumpto != null ? jumpto.hashCode() : 0);
      result = result * 37 + (startTimeCD != null ? startTimeCD.hashCode() : 0);
      result = result * 37 + (endTimeCD != null ? endTimeCD.hashCode() : 0);
      result = result * 37 + (onlyOneTime != null ? onlyOneTime.hashCode() : 0);
      result = result * 37 + (imgInfoNew != null ? imgInfoNew.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (type != null) builder.append(", type=").append(type);
    if (index != null) builder.append(", index=").append(index);
    if (imgInfo != null) builder.append(", imgInfo=").append(imgInfo);
    if (jumpto != null) builder.append(", jumpto=").append(jumpto);
    if (startTimeCD != null) builder.append(", startTimeCD=").append(startTimeCD);
    if (endTimeCD != null) builder.append(", endTimeCD=").append(endTimeCD);
    if (onlyOneTime != null) builder.append(", onlyOneTime=").append(onlyOneTime);
    if (imgInfoNew != null) builder.append(", imgInfoNew=").append(imgInfoNew);
    return builder.replace(0, 2, "ADItem{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ADItem, Builder> {
    public Integer id;

    public AD_TYPE type;

    public Integer index;

    public ImgInfo imgInfo;

    public String jumpto;

    public Long startTimeCD;

    public Long endTimeCD;

    public Boolean onlyOneTime;

    public ImgInfo imgInfoNew;

    public Builder() {
    }

    public Builder id(Integer id) {
      this.id = id;
      return this;
    }

    /**
     * 此广告显示的位置（同时表示类型）
     */
    public Builder type(AD_TYPE type) {
      this.type = type;
      return this;
    }

    /**
     * 当前位置的顺序数,排在第几位
     */
    public Builder index(Integer index) {
      this.index = index;
      return this;
    }

    /**
     * 旧版本banner图片，3.0之前的APP版本使用
     */
    public Builder imgInfo(ImgInfo imgInfo) {
      this.imgInfo = imgInfo;
      return this;
    }

    /**
     * 点击跳转url
     */
    public Builder jumpto(String jumpto) {
      this.jumpto = jumpto;
      return this;
    }

    /**
     * 距离开始的时间，如果已经开始则为0. 单位：毫秒
     */
    public Builder startTimeCD(Long startTimeCD) {
      this.startTimeCD = startTimeCD;
      return this;
    }

    /**
     * 距离结束的时间，如果已经开始则为0. 单位：毫秒
     */
    public Builder endTimeCD(Long endTimeCD) {
      this.endTimeCD = endTimeCD;
      return this;
    }

    /**
     * 指定广告是否只显示一次
     */
    public Builder onlyOneTime(Boolean onlyOneTime) {
      this.onlyOneTime = onlyOneTime;
      return this;
    }

    /**
     * 新版本banner图片，3.0以后的APP版本使用
     */
    public Builder imgInfoNew(ImgInfo imgInfoNew) {
      this.imgInfoNew = imgInfoNew;
      return this;
    }

    @Override
    public ADItem build() {
      return new ADItem(id, type, index, imgInfo, jumpto, startTimeCD, endTimeCD, onlyOneTime, imgInfoNew, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ADItem extends ProtoAdapter<ADItem> {
    ProtoAdapter_ADItem() {
      super(FieldEncoding.LENGTH_DELIMITED, ADItem.class);
    }

    @Override
    public int encodedSize(ADItem value) {
      return (value.id != null ? ProtoAdapter.UINT32.encodedSizeWithTag(1, value.id) : 0)
          + (value.type != null ? AD_TYPE.ADAPTER.encodedSizeWithTag(2, value.type) : 0)
          + (value.index != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.index) : 0)
          + (value.imgInfo != null ? ImgInfo.ADAPTER.encodedSizeWithTag(4, value.imgInfo) : 0)
          + (value.jumpto != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.jumpto) : 0)
          + (value.startTimeCD != null ? ProtoAdapter.UINT64.encodedSizeWithTag(6, value.startTimeCD) : 0)
          + (value.endTimeCD != null ? ProtoAdapter.UINT64.encodedSizeWithTag(7, value.endTimeCD) : 0)
          + (value.onlyOneTime != null ? ProtoAdapter.BOOL.encodedSizeWithTag(8, value.onlyOneTime) : 0)
          + (value.imgInfoNew != null ? ImgInfo.ADAPTER.encodedSizeWithTag(9, value.imgInfoNew) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ADItem value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.id);
      if (value.type != null) AD_TYPE.ADAPTER.encodeWithTag(writer, 2, value.type);
      if (value.index != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.index);
      if (value.imgInfo != null) ImgInfo.ADAPTER.encodeWithTag(writer, 4, value.imgInfo);
      if (value.jumpto != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.jumpto);
      if (value.startTimeCD != null) ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.startTimeCD);
      if (value.endTimeCD != null) ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.endTimeCD);
      if (value.onlyOneTime != null) ProtoAdapter.BOOL.encodeWithTag(writer, 8, value.onlyOneTime);
      if (value.imgInfoNew != null) ImgInfo.ADAPTER.encodeWithTag(writer, 9, value.imgInfoNew);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ADItem decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: {
            try {
              builder.type(AD_TYPE.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 3: builder.index(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.imgInfo(ImgInfo.ADAPTER.decode(reader)); break;
          case 5: builder.jumpto(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.startTimeCD(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.endTimeCD(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.onlyOneTime(ProtoAdapter.BOOL.decode(reader)); break;
          case 9: builder.imgInfoNew(ImgInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ADItem redact(ADItem value) {
      Builder builder = value.newBuilder();
      if (builder.imgInfo != null) builder.imgInfo = ImgInfo.ADAPTER.redact(builder.imgInfo);
      if (builder.imgInfoNew != null) builder.imgInfoNew = ImgInfo.ADAPTER.redact(builder.imgInfoNew);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
