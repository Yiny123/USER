// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 904:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import java.util.Map;
import okio.ByteString;

/**
 * 获取订单知情书
 */
public final class GetOrderInformedRsp extends Message<GetOrderInformedRsp, GetOrderInformedRsp.Builder> {
  public static final ProtoAdapter<GetOrderInformedRsp> ADAPTER = new ProtoAdapter_GetOrderInformedRsp();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_PRICE = "";

  public static final String DEFAULT_SIGNPIC = "";

  public static final Integer DEFAULT_ISSIGNPIC = 0;

  /**
   * 单价 /天       //废弃
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String price;

  /**
   * 服务
   */
  @WireField(
      tag = 2,
      keyAdapter = "com.squareup.wire.ProtoAdapter#STRING",
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final Map<String, String> obligation;

  /**
   * 免责
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> disclaimer;

  /**
   * 签名
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String signPic;

  /**
   * 是否已签名 1：未签名 2：已签名
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer isSignPic;

  public GetOrderInformedRsp(String price, Map<String, String> obligation, List<String> disclaimer, String signPic, Integer isSignPic) {
    this(price, obligation, disclaimer, signPic, isSignPic, ByteString.EMPTY);
  }

  public GetOrderInformedRsp(String price, Map<String, String> obligation, List<String> disclaimer, String signPic, Integer isSignPic, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.price = price;
    this.obligation = Internal.immutableCopyOf("obligation", obligation);
    this.disclaimer = Internal.immutableCopyOf("disclaimer", disclaimer);
    this.signPic = signPic;
    this.isSignPic = isSignPic;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.price = price;
    builder.obligation = Internal.copyOf("obligation", obligation);
    builder.disclaimer = Internal.copyOf("disclaimer", disclaimer);
    builder.signPic = signPic;
    builder.isSignPic = isSignPic;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetOrderInformedRsp)) return false;
    GetOrderInformedRsp o = (GetOrderInformedRsp) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(price, o.price)
        && obligation.equals(o.obligation)
        && disclaimer.equals(o.disclaimer)
        && Internal.equals(signPic, o.signPic)
        && Internal.equals(isSignPic, o.isSignPic);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (price != null ? price.hashCode() : 0);
      result = result * 37 + obligation.hashCode();
      result = result * 37 + disclaimer.hashCode();
      result = result * 37 + (signPic != null ? signPic.hashCode() : 0);
      result = result * 37 + (isSignPic != null ? isSignPic.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (price != null) builder.append(", price=").append(price);
    if (!obligation.isEmpty()) builder.append(", obligation=").append(obligation);
    if (!disclaimer.isEmpty()) builder.append(", disclaimer=").append(disclaimer);
    if (signPic != null) builder.append(", signPic=").append(signPic);
    if (isSignPic != null) builder.append(", isSignPic=").append(isSignPic);
    return builder.replace(0, 2, "GetOrderInformedRsp{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetOrderInformedRsp, Builder> {
    public String price;

    public Map<String, String> obligation;

    public List<String> disclaimer;

    public String signPic;

    public Integer isSignPic;

    public Builder() {
      obligation = Internal.newMutableMap();
      disclaimer = Internal.newMutableList();
    }

    /**
     * 单价 /天       //废弃
     */
    public Builder price(String price) {
      this.price = price;
      return this;
    }

    /**
     * 服务
     */
    public Builder obligation(Map<String, String> obligation) {
      Internal.checkElementsNotNull(obligation);
      this.obligation = obligation;
      return this;
    }

    /**
     * 免责
     */
    public Builder disclaimer(List<String> disclaimer) {
      Internal.checkElementsNotNull(disclaimer);
      this.disclaimer = disclaimer;
      return this;
    }

    /**
     * 签名
     */
    public Builder signPic(String signPic) {
      this.signPic = signPic;
      return this;
    }

    /**
     * 是否已签名 1：未签名 2：已签名
     */
    public Builder isSignPic(Integer isSignPic) {
      this.isSignPic = isSignPic;
      return this;
    }

    @Override
    public GetOrderInformedRsp build() {
      return new GetOrderInformedRsp(price, obligation, disclaimer, signPic, isSignPic, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetOrderInformedRsp extends ProtoAdapter<GetOrderInformedRsp> {
    private final ProtoAdapter<Map<String, String>> obligation = ProtoAdapter.newMapAdapter(ProtoAdapter.STRING, ProtoAdapter.STRING);

    ProtoAdapter_GetOrderInformedRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, GetOrderInformedRsp.class);
    }

    @Override
    public int encodedSize(GetOrderInformedRsp value) {
      return (value.price != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.price) : 0)
          + obligation.encodedSizeWithTag(2, value.obligation)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.disclaimer)
          + (value.signPic != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.signPic) : 0)
          + (value.isSignPic != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.isSignPic) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetOrderInformedRsp value) throws IOException {
      if (value.price != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.price);
      obligation.encodeWithTag(writer, 2, value.obligation);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.disclaimer);
      if (value.signPic != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.signPic);
      if (value.isSignPic != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.isSignPic);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetOrderInformedRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.price(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.obligation.putAll(obligation.decode(reader)); break;
          case 3: builder.disclaimer.add(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.signPic(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.isSignPic(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetOrderInformedRsp redact(GetOrderInformedRsp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
