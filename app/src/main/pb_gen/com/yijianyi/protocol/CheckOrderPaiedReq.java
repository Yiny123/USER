// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 1184:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 校验订单是否支付成功
 */
public final class CheckOrderPaiedReq extends Message<CheckOrderPaiedReq, CheckOrderPaiedReq.Builder> {
  public static final ProtoAdapter<CheckOrderPaiedReq> ADAPTER = new ProtoAdapter_CheckOrderPaiedReq();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_PAYSOLUTION = 0;

  public static final String DEFAULT_ORDERID = "";

  /**
   * 1-支付预交金 2-中间支付
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer paySolution;

  /**
   * 订单id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 支付的月份
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> months;

  public CheckOrderPaiedReq(Integer paySolution, String orderId, List<String> months) {
    this(paySolution, orderId, months, ByteString.EMPTY);
  }

  public CheckOrderPaiedReq(Integer paySolution, String orderId, List<String> months, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.paySolution = paySolution;
    this.orderId = orderId;
    this.months = Internal.immutableCopyOf("months", months);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.paySolution = paySolution;
    builder.orderId = orderId;
    builder.months = Internal.copyOf("months", months);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CheckOrderPaiedReq)) return false;
    CheckOrderPaiedReq o = (CheckOrderPaiedReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(paySolution, o.paySolution)
        && Internal.equals(orderId, o.orderId)
        && months.equals(o.months);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (paySolution != null ? paySolution.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + months.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (paySolution != null) builder.append(", paySolution=").append(paySolution);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (!months.isEmpty()) builder.append(", months=").append(months);
    return builder.replace(0, 2, "CheckOrderPaiedReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CheckOrderPaiedReq, Builder> {
    public Integer paySolution;

    public String orderId;

    public List<String> months;

    public Builder() {
      months = Internal.newMutableList();
    }

    /**
     * 1-支付预交金 2-中间支付
     */
    public Builder paySolution(Integer paySolution) {
      this.paySolution = paySolution;
      return this;
    }

    /**
     * 订单id
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 支付的月份
     */
    public Builder months(List<String> months) {
      Internal.checkElementsNotNull(months);
      this.months = months;
      return this;
    }

    @Override
    public CheckOrderPaiedReq build() {
      return new CheckOrderPaiedReq(paySolution, orderId, months, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CheckOrderPaiedReq extends ProtoAdapter<CheckOrderPaiedReq> {
    ProtoAdapter_CheckOrderPaiedReq() {
      super(FieldEncoding.LENGTH_DELIMITED, CheckOrderPaiedReq.class);
    }

    @Override
    public int encodedSize(CheckOrderPaiedReq value) {
      return (value.paySolution != null ? ProtoAdapter.UINT32.encodedSizeWithTag(1, value.paySolution) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.orderId) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.months)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CheckOrderPaiedReq value) throws IOException {
      if (value.paySolution != null) ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.paySolution);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.orderId);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.months);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CheckOrderPaiedReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.paySolution(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.months.add(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CheckOrderPaiedReq redact(CheckOrderPaiedReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
