// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 333:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 结算清单VO
 */
public final class SettlementVO extends Message<SettlementVO, SettlementVO.Builder> {
  public static final ProtoAdapter<SettlementVO> ADAPTER = new ProtoAdapter_SettlementVO();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_NEEDPAY = 0L;

  public static final String DEFAULT_SERVICETIME = "";

  public static final Integer DEFAULT_PAYSTATE = 0;

  public static final Long DEFAULT_CONFIRMCOST = 0L;

  public static final Long DEFAULT_SORTSCORE = 0L;

  public static final String DEFAULT_SETTLEDATE = "";

  public static final String DEFAULT_NEEDPAYSTR = "";

  public static final String DEFAULT_CONFIRMCOSTSTR = "";

  public static final String DEFAULT_PAIDFEESTR = "";

  public static final Long DEFAULT_SUBJOINFEE = 0L;

  public static final Long DEFAULT_SUBJOINNEWNUM = 0L;

  public static final Long DEFAULT_NIGHTNUM = 0L;

  /**
   * 需要支付的费用
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long needPay;

  /**
   * 服务时间
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceTime;

  /**
   * 支付状态 0 - 未支付 1 - 已支付
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payState;

  /**
   * 确认费用
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long confirmCost;

  /**
   * 排序分数
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long sortScore;

  /**
   * 结算日期
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String settleDate;

  /**
   * 待交费用
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String needPayStr;

  /**
   * 确认总金额
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String confirmCostStr;

  /**
   * 已支付金额
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String paidFeeStr;

  /**
   * 附加项费用（陪人床）
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long subjoinFee;

  /**
   * 附加项数量（今日）（陪人床）
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long subjoinNewNum;

  /**
   * 附加项数量（夜陪）
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long nightNum;

  public SettlementVO(Long needPay, String serviceTime, Integer payState, Long confirmCost, Long sortScore, String settleDate, String needPayStr, String confirmCostStr, String paidFeeStr, Long subjoinFee, Long subjoinNewNum, Long nightNum) {
    this(needPay, serviceTime, payState, confirmCost, sortScore, settleDate, needPayStr, confirmCostStr, paidFeeStr, subjoinFee, subjoinNewNum, nightNum, ByteString.EMPTY);
  }

  public SettlementVO(Long needPay, String serviceTime, Integer payState, Long confirmCost, Long sortScore, String settleDate, String needPayStr, String confirmCostStr, String paidFeeStr, Long subjoinFee, Long subjoinNewNum, Long nightNum, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.needPay = needPay;
    this.serviceTime = serviceTime;
    this.payState = payState;
    this.confirmCost = confirmCost;
    this.sortScore = sortScore;
    this.settleDate = settleDate;
    this.needPayStr = needPayStr;
    this.confirmCostStr = confirmCostStr;
    this.paidFeeStr = paidFeeStr;
    this.subjoinFee = subjoinFee;
    this.subjoinNewNum = subjoinNewNum;
    this.nightNum = nightNum;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.needPay = needPay;
    builder.serviceTime = serviceTime;
    builder.payState = payState;
    builder.confirmCost = confirmCost;
    builder.sortScore = sortScore;
    builder.settleDate = settleDate;
    builder.needPayStr = needPayStr;
    builder.confirmCostStr = confirmCostStr;
    builder.paidFeeStr = paidFeeStr;
    builder.subjoinFee = subjoinFee;
    builder.subjoinNewNum = subjoinNewNum;
    builder.nightNum = nightNum;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SettlementVO)) return false;
    SettlementVO o = (SettlementVO) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(needPay, o.needPay)
        && Internal.equals(serviceTime, o.serviceTime)
        && Internal.equals(payState, o.payState)
        && Internal.equals(confirmCost, o.confirmCost)
        && Internal.equals(sortScore, o.sortScore)
        && Internal.equals(settleDate, o.settleDate)
        && Internal.equals(needPayStr, o.needPayStr)
        && Internal.equals(confirmCostStr, o.confirmCostStr)
        && Internal.equals(paidFeeStr, o.paidFeeStr)
        && Internal.equals(subjoinFee, o.subjoinFee)
        && Internal.equals(subjoinNewNum, o.subjoinNewNum)
        && Internal.equals(nightNum, o.nightNum);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (needPay != null ? needPay.hashCode() : 0);
      result = result * 37 + (serviceTime != null ? serviceTime.hashCode() : 0);
      result = result * 37 + (payState != null ? payState.hashCode() : 0);
      result = result * 37 + (confirmCost != null ? confirmCost.hashCode() : 0);
      result = result * 37 + (sortScore != null ? sortScore.hashCode() : 0);
      result = result * 37 + (settleDate != null ? settleDate.hashCode() : 0);
      result = result * 37 + (needPayStr != null ? needPayStr.hashCode() : 0);
      result = result * 37 + (confirmCostStr != null ? confirmCostStr.hashCode() : 0);
      result = result * 37 + (paidFeeStr != null ? paidFeeStr.hashCode() : 0);
      result = result * 37 + (subjoinFee != null ? subjoinFee.hashCode() : 0);
      result = result * 37 + (subjoinNewNum != null ? subjoinNewNum.hashCode() : 0);
      result = result * 37 + (nightNum != null ? nightNum.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (needPay != null) builder.append(", needPay=").append(needPay);
    if (serviceTime != null) builder.append(", serviceTime=").append(serviceTime);
    if (payState != null) builder.append(", payState=").append(payState);
    if (confirmCost != null) builder.append(", confirmCost=").append(confirmCost);
    if (sortScore != null) builder.append(", sortScore=").append(sortScore);
    if (settleDate != null) builder.append(", settleDate=").append(settleDate);
    if (needPayStr != null) builder.append(", needPayStr=").append(needPayStr);
    if (confirmCostStr != null) builder.append(", confirmCostStr=").append(confirmCostStr);
    if (paidFeeStr != null) builder.append(", paidFeeStr=").append(paidFeeStr);
    if (subjoinFee != null) builder.append(", subjoinFee=").append(subjoinFee);
    if (subjoinNewNum != null) builder.append(", subjoinNewNum=").append(subjoinNewNum);
    if (nightNum != null) builder.append(", nightNum=").append(nightNum);
    return builder.replace(0, 2, "SettlementVO{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<SettlementVO, Builder> {
    public Long needPay;

    public String serviceTime;

    public Integer payState;

    public Long confirmCost;

    public Long sortScore;

    public String settleDate;

    public String needPayStr;

    public String confirmCostStr;

    public String paidFeeStr;

    public Long subjoinFee;

    public Long subjoinNewNum;

    public Long nightNum;

    public Builder() {
    }

    /**
     * 需要支付的费用
     */
    public Builder needPay(Long needPay) {
      this.needPay = needPay;
      return this;
    }

    /**
     * 服务时间
     */
    public Builder serviceTime(String serviceTime) {
      this.serviceTime = serviceTime;
      return this;
    }

    /**
     * 支付状态 0 - 未支付 1 - 已支付
     */
    public Builder payState(Integer payState) {
      this.payState = payState;
      return this;
    }

    /**
     * 确认费用
     */
    public Builder confirmCost(Long confirmCost) {
      this.confirmCost = confirmCost;
      return this;
    }

    /**
     * 排序分数
     */
    public Builder sortScore(Long sortScore) {
      this.sortScore = sortScore;
      return this;
    }

    /**
     * 结算日期
     */
    public Builder settleDate(String settleDate) {
      this.settleDate = settleDate;
      return this;
    }

    /**
     * 待交费用
     */
    public Builder needPayStr(String needPayStr) {
      this.needPayStr = needPayStr;
      return this;
    }

    /**
     * 确认总金额
     */
    public Builder confirmCostStr(String confirmCostStr) {
      this.confirmCostStr = confirmCostStr;
      return this;
    }

    /**
     * 已支付金额
     */
    public Builder paidFeeStr(String paidFeeStr) {
      this.paidFeeStr = paidFeeStr;
      return this;
    }

    /**
     * 附加项费用（陪人床）
     */
    public Builder subjoinFee(Long subjoinFee) {
      this.subjoinFee = subjoinFee;
      return this;
    }

    /**
     * 附加项数量（今日）（陪人床）
     */
    public Builder subjoinNewNum(Long subjoinNewNum) {
      this.subjoinNewNum = subjoinNewNum;
      return this;
    }

    /**
     * 附加项数量（夜陪）
     */
    public Builder nightNum(Long nightNum) {
      this.nightNum = nightNum;
      return this;
    }

    @Override
    public SettlementVO build() {
      return new SettlementVO(needPay, serviceTime, payState, confirmCost, sortScore, settleDate, needPayStr, confirmCostStr, paidFeeStr, subjoinFee, subjoinNewNum, nightNum, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SettlementVO extends ProtoAdapter<SettlementVO> {
    ProtoAdapter_SettlementVO() {
      super(FieldEncoding.LENGTH_DELIMITED, SettlementVO.class);
    }

    @Override
    public int encodedSize(SettlementVO value) {
      return (value.needPay != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.needPay) : 0)
          + (value.serviceTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.serviceTime) : 0)
          + (value.payState != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.payState) : 0)
          + (value.confirmCost != null ? ProtoAdapter.UINT64.encodedSizeWithTag(5, value.confirmCost) : 0)
          + (value.sortScore != null ? ProtoAdapter.UINT64.encodedSizeWithTag(6, value.sortScore) : 0)
          + (value.settleDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.settleDate) : 0)
          + (value.needPayStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.needPayStr) : 0)
          + (value.confirmCostStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.confirmCostStr) : 0)
          + (value.paidFeeStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.paidFeeStr) : 0)
          + (value.subjoinFee != null ? ProtoAdapter.INT64.encodedSizeWithTag(11, value.subjoinFee) : 0)
          + (value.subjoinNewNum != null ? ProtoAdapter.INT64.encodedSizeWithTag(12, value.subjoinNewNum) : 0)
          + (value.nightNum != null ? ProtoAdapter.INT64.encodedSizeWithTag(13, value.nightNum) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SettlementVO value) throws IOException {
      if (value.needPay != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.needPay);
      if (value.serviceTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.serviceTime);
      if (value.payState != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.payState);
      if (value.confirmCost != null) ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.confirmCost);
      if (value.sortScore != null) ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.sortScore);
      if (value.settleDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.settleDate);
      if (value.needPayStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.needPayStr);
      if (value.confirmCostStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.confirmCostStr);
      if (value.paidFeeStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.paidFeeStr);
      if (value.subjoinFee != null) ProtoAdapter.INT64.encodeWithTag(writer, 11, value.subjoinFee);
      if (value.subjoinNewNum != null) ProtoAdapter.INT64.encodeWithTag(writer, 12, value.subjoinNewNum);
      if (value.nightNum != null) ProtoAdapter.INT64.encodeWithTag(writer, 13, value.nightNum);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SettlementVO decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 2: builder.needPay(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.serviceTime(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.payState(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.confirmCost(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.sortScore(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.settleDate(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.needPayStr(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.confirmCostStr(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.paidFeeStr(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.subjoinFee(ProtoAdapter.INT64.decode(reader)); break;
          case 12: builder.subjoinNewNum(ProtoAdapter.INT64.decode(reader)); break;
          case 13: builder.nightNum(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SettlementVO redact(SettlementVO value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
