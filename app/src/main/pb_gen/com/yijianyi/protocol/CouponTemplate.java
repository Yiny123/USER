// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Model.proto at 145:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 优惠券模板
 */
public final class CouponTemplate extends Message<CouponTemplate, CouponTemplate.Builder> {
  public static final ProtoAdapter<CouponTemplate> ADAPTER = new ProtoAdapter_CouponTemplate();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_COUPONCODE = "";

  public static final String DEFAULT_COUPONNAME = "";

  public static final Integer DEFAULT_COUPONTYPE = 0;

  public static final Integer DEFAULT_FEE = 0;

  public static final String DEFAULT_COUPONDESC = "";

  public static final Integer DEFAULT_PERIODTYPE = 0;

  public static final String DEFAULT_STARTDATE = "";

  public static final String DEFAULT_ENDDATE = "";

  public static final Integer DEFAULT_VALIDDAYS = 0;

  public static final Integer DEFAULT_SCENCE = 0;

  public static final Integer DEFAULT_WEEKDAY = 0;

  public static final Integer DEFAULT_WEEKEND = 0;

  public static final Integer DEFAULT_HOLIDAY = 0;

  public static final Integer DEFAULT_GETMAXNUM = 0;

  public static final Integer DEFAULT_SENDMAXNUM = 0;

  public static final Long DEFAULT_COMPANYID = 0L;

  public static final String DEFAULT_COMPANYNAME = "";

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final Long DEFAULT_CREATETIME = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 优惠码
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String couponCode;

  /**
   * 优惠券名
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String couponName;

  /**
   * 优惠类型 1-减免 2-打折
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer couponType;

  /**
   * 优惠额度 如果是减免就是减免的金额， 如果是打折90代表9折
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer fee;

  /**
   * 优惠券描述
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String couponDesc;

  /**
   * 有效期类型 1-固定日期 2-有效天数
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer periodType;

  /**
   * 开始日期
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String startDate;

  /**
   * 结束日期
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String endDate;

  /**
   * 有效天数
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer validDays;

  /**
   * 适用场景 1-机构 2-居家
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer scence;

  /**
   * 限定服务类型，机构有1-1 1-n，居家有中医理疗等
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> serviceTypes;

  /**
   * 限定机构id
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> orgIds;

  /**
   * 限定科室id
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64",
      label = WireField.Label.REPEATED
  )
  public final List<Long> branchIds;

  /**
   * 是否工作日可用
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer weekday;

  /**
   * 是否周末可用
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer weekend;

  /**
   * 是否节假日可用
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer holiday;

  /**
   * 可领取最大数量
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer getMaxNum;

  /**
   * 可发送最大数量
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sendMaxNum;

  /**
   * 创建公司id
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long companyId;

  /**
   * 创建公司
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String companyName;

  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  public CouponTemplate(Long id, String couponCode, String couponName, Integer couponType, Integer fee, String couponDesc, Integer periodType, String startDate, String endDate, Integer validDays, Integer scence, List<Integer> serviceTypes, List<Long> orgIds, List<Long> branchIds, Integer weekday, Integer weekend, Integer holiday, Integer getMaxNum, Integer sendMaxNum, Long companyId, String companyName, Long createStaffId, String createStaffName, Long createTime) {
    this(id, couponCode, couponName, couponType, fee, couponDesc, periodType, startDate, endDate, validDays, scence, serviceTypes, orgIds, branchIds, weekday, weekend, holiday, getMaxNum, sendMaxNum, companyId, companyName, createStaffId, createStaffName, createTime, ByteString.EMPTY);
  }

  public CouponTemplate(Long id, String couponCode, String couponName, Integer couponType, Integer fee, String couponDesc, Integer periodType, String startDate, String endDate, Integer validDays, Integer scence, List<Integer> serviceTypes, List<Long> orgIds, List<Long> branchIds, Integer weekday, Integer weekend, Integer holiday, Integer getMaxNum, Integer sendMaxNum, Long companyId, String companyName, Long createStaffId, String createStaffName, Long createTime, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.couponCode = couponCode;
    this.couponName = couponName;
    this.couponType = couponType;
    this.fee = fee;
    this.couponDesc = couponDesc;
    this.periodType = periodType;
    this.startDate = startDate;
    this.endDate = endDate;
    this.validDays = validDays;
    this.scence = scence;
    this.serviceTypes = Internal.immutableCopyOf("serviceTypes", serviceTypes);
    this.orgIds = Internal.immutableCopyOf("orgIds", orgIds);
    this.branchIds = Internal.immutableCopyOf("branchIds", branchIds);
    this.weekday = weekday;
    this.weekend = weekend;
    this.holiday = holiday;
    this.getMaxNum = getMaxNum;
    this.sendMaxNum = sendMaxNum;
    this.companyId = companyId;
    this.companyName = companyName;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.createTime = createTime;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.couponCode = couponCode;
    builder.couponName = couponName;
    builder.couponType = couponType;
    builder.fee = fee;
    builder.couponDesc = couponDesc;
    builder.periodType = periodType;
    builder.startDate = startDate;
    builder.endDate = endDate;
    builder.validDays = validDays;
    builder.scence = scence;
    builder.serviceTypes = Internal.copyOf("serviceTypes", serviceTypes);
    builder.orgIds = Internal.copyOf("orgIds", orgIds);
    builder.branchIds = Internal.copyOf("branchIds", branchIds);
    builder.weekday = weekday;
    builder.weekend = weekend;
    builder.holiday = holiday;
    builder.getMaxNum = getMaxNum;
    builder.sendMaxNum = sendMaxNum;
    builder.companyId = companyId;
    builder.companyName = companyName;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.createTime = createTime;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CouponTemplate)) return false;
    CouponTemplate o = (CouponTemplate) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(couponCode, o.couponCode)
        && Internal.equals(couponName, o.couponName)
        && Internal.equals(couponType, o.couponType)
        && Internal.equals(fee, o.fee)
        && Internal.equals(couponDesc, o.couponDesc)
        && Internal.equals(periodType, o.periodType)
        && Internal.equals(startDate, o.startDate)
        && Internal.equals(endDate, o.endDate)
        && Internal.equals(validDays, o.validDays)
        && Internal.equals(scence, o.scence)
        && serviceTypes.equals(o.serviceTypes)
        && orgIds.equals(o.orgIds)
        && branchIds.equals(o.branchIds)
        && Internal.equals(weekday, o.weekday)
        && Internal.equals(weekend, o.weekend)
        && Internal.equals(holiday, o.holiday)
        && Internal.equals(getMaxNum, o.getMaxNum)
        && Internal.equals(sendMaxNum, o.sendMaxNum)
        && Internal.equals(companyId, o.companyId)
        && Internal.equals(companyName, o.companyName)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(createTime, o.createTime);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (couponCode != null ? couponCode.hashCode() : 0);
      result = result * 37 + (couponName != null ? couponName.hashCode() : 0);
      result = result * 37 + (couponType != null ? couponType.hashCode() : 0);
      result = result * 37 + (fee != null ? fee.hashCode() : 0);
      result = result * 37 + (couponDesc != null ? couponDesc.hashCode() : 0);
      result = result * 37 + (periodType != null ? periodType.hashCode() : 0);
      result = result * 37 + (startDate != null ? startDate.hashCode() : 0);
      result = result * 37 + (endDate != null ? endDate.hashCode() : 0);
      result = result * 37 + (validDays != null ? validDays.hashCode() : 0);
      result = result * 37 + (scence != null ? scence.hashCode() : 0);
      result = result * 37 + serviceTypes.hashCode();
      result = result * 37 + orgIds.hashCode();
      result = result * 37 + branchIds.hashCode();
      result = result * 37 + (weekday != null ? weekday.hashCode() : 0);
      result = result * 37 + (weekend != null ? weekend.hashCode() : 0);
      result = result * 37 + (holiday != null ? holiday.hashCode() : 0);
      result = result * 37 + (getMaxNum != null ? getMaxNum.hashCode() : 0);
      result = result * 37 + (sendMaxNum != null ? sendMaxNum.hashCode() : 0);
      result = result * 37 + (companyId != null ? companyId.hashCode() : 0);
      result = result * 37 + (companyName != null ? companyName.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (couponCode != null) builder.append(", couponCode=").append(couponCode);
    if (couponName != null) builder.append(", couponName=").append(couponName);
    if (couponType != null) builder.append(", couponType=").append(couponType);
    if (fee != null) builder.append(", fee=").append(fee);
    if (couponDesc != null) builder.append(", couponDesc=").append(couponDesc);
    if (periodType != null) builder.append(", periodType=").append(periodType);
    if (startDate != null) builder.append(", startDate=").append(startDate);
    if (endDate != null) builder.append(", endDate=").append(endDate);
    if (validDays != null) builder.append(", validDays=").append(validDays);
    if (scence != null) builder.append(", scence=").append(scence);
    if (!serviceTypes.isEmpty()) builder.append(", serviceTypes=").append(serviceTypes);
    if (!orgIds.isEmpty()) builder.append(", orgIds=").append(orgIds);
    if (!branchIds.isEmpty()) builder.append(", branchIds=").append(branchIds);
    if (weekday != null) builder.append(", weekday=").append(weekday);
    if (weekend != null) builder.append(", weekend=").append(weekend);
    if (holiday != null) builder.append(", holiday=").append(holiday);
    if (getMaxNum != null) builder.append(", getMaxNum=").append(getMaxNum);
    if (sendMaxNum != null) builder.append(", sendMaxNum=").append(sendMaxNum);
    if (companyId != null) builder.append(", companyId=").append(companyId);
    if (companyName != null) builder.append(", companyName=").append(companyName);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    return builder.replace(0, 2, "CouponTemplate{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CouponTemplate, Builder> {
    public Long id;

    public String couponCode;

    public String couponName;

    public Integer couponType;

    public Integer fee;

    public String couponDesc;

    public Integer periodType;

    public String startDate;

    public String endDate;

    public Integer validDays;

    public Integer scence;

    public List<Integer> serviceTypes;

    public List<Long> orgIds;

    public List<Long> branchIds;

    public Integer weekday;

    public Integer weekend;

    public Integer holiday;

    public Integer getMaxNum;

    public Integer sendMaxNum;

    public Long companyId;

    public String companyName;

    public Long createStaffId;

    public String createStaffName;

    public Long createTime;

    public Builder() {
      serviceTypes = Internal.newMutableList();
      orgIds = Internal.newMutableList();
      branchIds = Internal.newMutableList();
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 优惠码
     */
    public Builder couponCode(String couponCode) {
      this.couponCode = couponCode;
      return this;
    }

    /**
     * 优惠券名
     */
    public Builder couponName(String couponName) {
      this.couponName = couponName;
      return this;
    }

    /**
     * 优惠类型 1-减免 2-打折
     */
    public Builder couponType(Integer couponType) {
      this.couponType = couponType;
      return this;
    }

    /**
     * 优惠额度 如果是减免就是减免的金额， 如果是打折90代表9折
     */
    public Builder fee(Integer fee) {
      this.fee = fee;
      return this;
    }

    /**
     * 优惠券描述
     */
    public Builder couponDesc(String couponDesc) {
      this.couponDesc = couponDesc;
      return this;
    }

    /**
     * 有效期类型 1-固定日期 2-有效天数
     */
    public Builder periodType(Integer periodType) {
      this.periodType = periodType;
      return this;
    }

    /**
     * 开始日期
     */
    public Builder startDate(String startDate) {
      this.startDate = startDate;
      return this;
    }

    /**
     * 结束日期
     */
    public Builder endDate(String endDate) {
      this.endDate = endDate;
      return this;
    }

    /**
     * 有效天数
     */
    public Builder validDays(Integer validDays) {
      this.validDays = validDays;
      return this;
    }

    /**
     * 适用场景 1-机构 2-居家
     */
    public Builder scence(Integer scence) {
      this.scence = scence;
      return this;
    }

    /**
     * 限定服务类型，机构有1-1 1-n，居家有中医理疗等
     */
    public Builder serviceTypes(List<Integer> serviceTypes) {
      Internal.checkElementsNotNull(serviceTypes);
      this.serviceTypes = serviceTypes;
      return this;
    }

    /**
     * 限定机构id
     */
    public Builder orgIds(List<Long> orgIds) {
      Internal.checkElementsNotNull(orgIds);
      this.orgIds = orgIds;
      return this;
    }

    /**
     * 限定科室id
     */
    public Builder branchIds(List<Long> branchIds) {
      Internal.checkElementsNotNull(branchIds);
      this.branchIds = branchIds;
      return this;
    }

    /**
     * 是否工作日可用
     */
    public Builder weekday(Integer weekday) {
      this.weekday = weekday;
      return this;
    }

    /**
     * 是否周末可用
     */
    public Builder weekend(Integer weekend) {
      this.weekend = weekend;
      return this;
    }

    /**
     * 是否节假日可用
     */
    public Builder holiday(Integer holiday) {
      this.holiday = holiday;
      return this;
    }

    /**
     * 可领取最大数量
     */
    public Builder getMaxNum(Integer getMaxNum) {
      this.getMaxNum = getMaxNum;
      return this;
    }

    /**
     * 可发送最大数量
     */
    public Builder sendMaxNum(Integer sendMaxNum) {
      this.sendMaxNum = sendMaxNum;
      return this;
    }

    /**
     * 创建公司id
     */
    public Builder companyId(Long companyId) {
      this.companyId = companyId;
      return this;
    }

    /**
     * 创建公司
     */
    public Builder companyName(String companyName) {
      this.companyName = companyName;
      return this;
    }

    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    @Override
    public CouponTemplate build() {
      return new CouponTemplate(id, couponCode, couponName, couponType, fee, couponDesc, periodType, startDate, endDate, validDays, scence, serviceTypes, orgIds, branchIds, weekday, weekend, holiday, getMaxNum, sendMaxNum, companyId, companyName, createStaffId, createStaffName, createTime, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CouponTemplate extends ProtoAdapter<CouponTemplate> {
    ProtoAdapter_CouponTemplate() {
      super(FieldEncoding.LENGTH_DELIMITED, CouponTemplate.class);
    }

    @Override
    public int encodedSize(CouponTemplate value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.couponCode != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.couponCode) : 0)
          + (value.couponName != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.couponName) : 0)
          + (value.couponType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.couponType) : 0)
          + (value.fee != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.fee) : 0)
          + (value.couponDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.couponDesc) : 0)
          + (value.periodType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(7, value.periodType) : 0)
          + (value.startDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.startDate) : 0)
          + (value.endDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.endDate) : 0)
          + (value.validDays != null ? ProtoAdapter.UINT32.encodedSizeWithTag(10, value.validDays) : 0)
          + (value.scence != null ? ProtoAdapter.UINT32.encodedSizeWithTag(11, value.scence) : 0)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(12, value.serviceTypes)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(13, value.orgIds)
          + ProtoAdapter.UINT64.asRepeated().encodedSizeWithTag(14, value.branchIds)
          + (value.weekday != null ? ProtoAdapter.UINT32.encodedSizeWithTag(15, value.weekday) : 0)
          + (value.weekend != null ? ProtoAdapter.UINT32.encodedSizeWithTag(16, value.weekend) : 0)
          + (value.holiday != null ? ProtoAdapter.UINT32.encodedSizeWithTag(17, value.holiday) : 0)
          + (value.getMaxNum != null ? ProtoAdapter.UINT32.encodedSizeWithTag(18, value.getMaxNum) : 0)
          + (value.sendMaxNum != null ? ProtoAdapter.UINT32.encodedSizeWithTag(19, value.sendMaxNum) : 0)
          + (value.companyId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(20, value.companyId) : 0)
          + (value.companyName != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.companyName) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(22, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.createStaffName) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(24, value.createTime) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CouponTemplate value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.couponCode != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.couponCode);
      if (value.couponName != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.couponName);
      if (value.couponType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.couponType);
      if (value.fee != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.fee);
      if (value.couponDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.couponDesc);
      if (value.periodType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.periodType);
      if (value.startDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.startDate);
      if (value.endDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.endDate);
      if (value.validDays != null) ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.validDays);
      if (value.scence != null) ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.scence);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 12, value.serviceTypes);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 13, value.orgIds);
      ProtoAdapter.UINT64.asRepeated().encodeWithTag(writer, 14, value.branchIds);
      if (value.weekday != null) ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.weekday);
      if (value.weekend != null) ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.weekend);
      if (value.holiday != null) ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.holiday);
      if (value.getMaxNum != null) ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.getMaxNum);
      if (value.sendMaxNum != null) ProtoAdapter.UINT32.encodeWithTag(writer, 19, value.sendMaxNum);
      if (value.companyId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 20, value.companyId);
      if (value.companyName != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.companyName);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 22, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.createStaffName);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 24, value.createTime);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CouponTemplate decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.couponCode(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.couponName(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.couponType(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.fee(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.couponDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.periodType(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.startDate(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.endDate(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.validDays(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.scence(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.serviceTypes.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 13: builder.orgIds.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 14: builder.branchIds.add(ProtoAdapter.UINT64.decode(reader)); break;
          case 15: builder.weekday(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.weekend(ProtoAdapter.UINT32.decode(reader)); break;
          case 17: builder.holiday(ProtoAdapter.UINT32.decode(reader)); break;
          case 18: builder.getMaxNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.sendMaxNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 20: builder.companyId(ProtoAdapter.UINT64.decode(reader)); break;
          case 21: builder.companyName(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 23: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CouponTemplate redact(CouponTemplate value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
