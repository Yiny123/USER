// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 662:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 长护险订单照护计划
 */
public final class OrderTend extends Message<OrderTend, OrderTend.Builder> {
  public static final ProtoAdapter<OrderTend> ADAPTER = new ProtoAdapter_OrderTend();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Long DEFAULT_COMPANYID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_KINSID = 0L;

  public static final String DEFAULT_KINSNAME = "";

  public static final Integer DEFAULT_STATUS = 0;

  public static final String DEFAULT_REJECTREASON = "";

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_STARTTIME = 0L;

  public static final Long DEFAULT_CHECKSTAFFID = 0L;

  public static final String DEFAULT_CHECKSTAFFNAME = "";

  public static final Long DEFAULT_CHECKTIME = 0L;

  /**
   * id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 公司id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long companyId;

  /**
   * 订单号
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 被陪护人id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kinsId;

  /**
   * 被陪护人全名
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kinsName;

  /**
   * 状态 0-草稿 1-待审核 2-执行中 3-已完成 4-审核不通过 5-审核通过未生效
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer status;

  /**
   * 驳回理由
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String rejectReason;

  /**
   * 创建员工id
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 创建员工名称
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 创建时间
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 生效时间
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long startTime;

  /**
   * 审核员工id
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long checkStaffId;

  /**
   * 审核员工名称
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String checkStaffName;

  /**
   * 审核时间
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long checkTime;

  public OrderTend(Long id, Long companyId, String orderId, Long kinsId, String kinsName, Integer status, String rejectReason, Long createStaffId, String createStaffName, Long createTime, Long startTime, Long checkStaffId, String checkStaffName, Long checkTime) {
    this(id, companyId, orderId, kinsId, kinsName, status, rejectReason, createStaffId, createStaffName, createTime, startTime, checkStaffId, checkStaffName, checkTime, ByteString.EMPTY);
  }

  public OrderTend(Long id, Long companyId, String orderId, Long kinsId, String kinsName, Integer status, String rejectReason, Long createStaffId, String createStaffName, Long createTime, Long startTime, Long checkStaffId, String checkStaffName, Long checkTime, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.companyId = companyId;
    this.orderId = orderId;
    this.kinsId = kinsId;
    this.kinsName = kinsName;
    this.status = status;
    this.rejectReason = rejectReason;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.createTime = createTime;
    this.startTime = startTime;
    this.checkStaffId = checkStaffId;
    this.checkStaffName = checkStaffName;
    this.checkTime = checkTime;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.companyId = companyId;
    builder.orderId = orderId;
    builder.kinsId = kinsId;
    builder.kinsName = kinsName;
    builder.status = status;
    builder.rejectReason = rejectReason;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.createTime = createTime;
    builder.startTime = startTime;
    builder.checkStaffId = checkStaffId;
    builder.checkStaffName = checkStaffName;
    builder.checkTime = checkTime;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OrderTend)) return false;
    OrderTend o = (OrderTend) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(companyId, o.companyId)
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(kinsId, o.kinsId)
        && Internal.equals(kinsName, o.kinsName)
        && Internal.equals(status, o.status)
        && Internal.equals(rejectReason, o.rejectReason)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(startTime, o.startTime)
        && Internal.equals(checkStaffId, o.checkStaffId)
        && Internal.equals(checkStaffName, o.checkStaffName)
        && Internal.equals(checkTime, o.checkTime);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (companyId != null ? companyId.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (kinsId != null ? kinsId.hashCode() : 0);
      result = result * 37 + (kinsName != null ? kinsName.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (rejectReason != null ? rejectReason.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (startTime != null ? startTime.hashCode() : 0);
      result = result * 37 + (checkStaffId != null ? checkStaffId.hashCode() : 0);
      result = result * 37 + (checkStaffName != null ? checkStaffName.hashCode() : 0);
      result = result * 37 + (checkTime != null ? checkTime.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (companyId != null) builder.append(", companyId=").append(companyId);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (kinsId != null) builder.append(", kinsId=").append(kinsId);
    if (kinsName != null) builder.append(", kinsName=").append(kinsName);
    if (status != null) builder.append(", status=").append(status);
    if (rejectReason != null) builder.append(", rejectReason=").append(rejectReason);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (startTime != null) builder.append(", startTime=").append(startTime);
    if (checkStaffId != null) builder.append(", checkStaffId=").append(checkStaffId);
    if (checkStaffName != null) builder.append(", checkStaffName=").append(checkStaffName);
    if (checkTime != null) builder.append(", checkTime=").append(checkTime);
    return builder.replace(0, 2, "OrderTend{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<OrderTend, Builder> {
    public Long id;

    public Long companyId;

    public String orderId;

    public Long kinsId;

    public String kinsName;

    public Integer status;

    public String rejectReason;

    public Long createStaffId;

    public String createStaffName;

    public Long createTime;

    public Long startTime;

    public Long checkStaffId;

    public String checkStaffName;

    public Long checkTime;

    public Builder() {
    }

    /**
     * id
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 公司id
     */
    public Builder companyId(Long companyId) {
      this.companyId = companyId;
      return this;
    }

    /**
     * 订单号
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 被陪护人id
     */
    public Builder kinsId(Long kinsId) {
      this.kinsId = kinsId;
      return this;
    }

    /**
     * 被陪护人全名
     */
    public Builder kinsName(String kinsName) {
      this.kinsName = kinsName;
      return this;
    }

    /**
     * 状态 0-草稿 1-待审核 2-执行中 3-已完成 4-审核不通过 5-审核通过未生效
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 驳回理由
     */
    public Builder rejectReason(String rejectReason) {
      this.rejectReason = rejectReason;
      return this;
    }

    /**
     * 创建员工id
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 创建员工名称
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 生效时间
     */
    public Builder startTime(Long startTime) {
      this.startTime = startTime;
      return this;
    }

    /**
     * 审核员工id
     */
    public Builder checkStaffId(Long checkStaffId) {
      this.checkStaffId = checkStaffId;
      return this;
    }

    /**
     * 审核员工名称
     */
    public Builder checkStaffName(String checkStaffName) {
      this.checkStaffName = checkStaffName;
      return this;
    }

    /**
     * 审核时间
     */
    public Builder checkTime(Long checkTime) {
      this.checkTime = checkTime;
      return this;
    }

    @Override
    public OrderTend build() {
      return new OrderTend(id, companyId, orderId, kinsId, kinsName, status, rejectReason, createStaffId, createStaffName, createTime, startTime, checkStaffId, checkStaffName, checkTime, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OrderTend extends ProtoAdapter<OrderTend> {
    ProtoAdapter_OrderTend() {
      super(FieldEncoding.LENGTH_DELIMITED, OrderTend.class);
    }

    @Override
    public int encodedSize(OrderTend value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.companyId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.companyId) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.orderId) : 0)
          + (value.kinsId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.kinsId) : 0)
          + (value.kinsName != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.kinsName) : 0)
          + (value.status != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.status) : 0)
          + (value.rejectReason != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.rejectReason) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.createStaffName) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(10, value.createTime) : 0)
          + (value.startTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(11, value.startTime) : 0)
          + (value.checkStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(12, value.checkStaffId) : 0)
          + (value.checkStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.checkStaffName) : 0)
          + (value.checkTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(14, value.checkTime) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OrderTend value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.companyId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.companyId);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.orderId);
      if (value.kinsId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.kinsId);
      if (value.kinsName != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.kinsName);
      if (value.status != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.status);
      if (value.rejectReason != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.rejectReason);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.createStaffName);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 10, value.createTime);
      if (value.startTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.startTime);
      if (value.checkStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 12, value.checkStaffId);
      if (value.checkStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.checkStaffName);
      if (value.checkTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 14, value.checkTime);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OrderTend decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.companyId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.kinsId(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.kinsName(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.status(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.rejectReason(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 11: builder.startTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 12: builder.checkStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 13: builder.checkStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.checkTime(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OrderTend redact(OrderTend value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
