// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AssessModel.proto at 195:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 社会支持评定量
 */
public final class InsureAssessSSRS extends Message<InsureAssessSSRS, InsureAssessSSRS.Builder> {
  public static final ProtoAdapter<InsureAssessSSRS> ADAPTER = new ProtoAdapter_InsureAssessSSRS();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Long DEFAULT_RESULTID = 0L;

  public static final Integer DEFAULT_SCORE = 0;

  public static final Integer DEFAULT_LEVEL = 0;

  public static final Integer DEFAULT_FRIENDS = 0;

  public static final Integer DEFAULT_LIVESTATUS = 0;

  public static final Integer DEFAULT_NEIGHBOR = 0;

  public static final Integer DEFAULT_COLLEAGUE = 0;

  public static final Integer DEFAULT_FAMILYSPOUSE = 0;

  public static final Integer DEFAULT_FAMILYPARENT = 0;

  public static final Integer DEFAULT_FAMILYCHILD = 0;

  public static final Integer DEFAULT_FAMILYSIBLING = 0;

  public static final Integer DEFAULT_FAMILYOTHER = 0;

  public static final String DEFAULT_HELPCHANNELOTHER = "";

  public static final String DEFAULT_CARECHANNELOTHER = "";

  public static final Integer DEFAULT_POURWAY = 0;

  public static final Integer DEFAULT_HELPWAY = 0;

  public static final Integer DEFAULT_PUBLICACTIVITY = 0;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 报告id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long resultId;

  /**
   * 得分
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer score;

  /**
   * 社会支持等级 1级-低水平（≤22分） 2级-中等水平（23-44分） 3级-高水平（≥45分）
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer level;

  /**
   * 关系密切的朋友数量
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer friends;

  /**
   * 居住情况
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer liveStatus;

  /**
   * 与邻居交往情况
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer neighbor;

  /**
   * 与同事交往情况
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer colleague;

  /**
   * 与夫妻/恋人交往情况
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer familySpouse;

  /**
   * 与父母交往情况
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer familyParent;

  /**
   * 与儿女交往情况
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer familyChild;

  /**
   * 与兄弟姐妹交往情况
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer familySibling;

  /**
   * 与其家属交往情况
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer familyOther;

  /**
   * 帮助来源
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> helpChannel;

  /**
   * 帮助来源-其他
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String helpChannelOther;

  /**
   * 安慰和关心来源
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> careChannel;

  /**
   * 安慰和关心来源-其他
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String careChannelOther;

  /**
   * 倾述方式
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer pourWay;

  /**
   * 求助方式
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer helpWay;

  /**
   * 参加社会活动
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer publicActivity;

  /**
   * 本次评估时间
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 操作员工ID
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 评估人员
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  public InsureAssessSSRS(Long id, Long resultId, Integer score, Integer level, Integer friends, Integer liveStatus, Integer neighbor, Integer colleague, Integer familySpouse, Integer familyParent, Integer familyChild, Integer familySibling, Integer familyOther, List<String> helpChannel, String helpChannelOther, List<String> careChannel, String careChannelOther, Integer pourWay, Integer helpWay, Integer publicActivity, Long createTime, Long createStaffId, String createStaffName) {
    this(id, resultId, score, level, friends, liveStatus, neighbor, colleague, familySpouse, familyParent, familyChild, familySibling, familyOther, helpChannel, helpChannelOther, careChannel, careChannelOther, pourWay, helpWay, publicActivity, createTime, createStaffId, createStaffName, ByteString.EMPTY);
  }

  public InsureAssessSSRS(Long id, Long resultId, Integer score, Integer level, Integer friends, Integer liveStatus, Integer neighbor, Integer colleague, Integer familySpouse, Integer familyParent, Integer familyChild, Integer familySibling, Integer familyOther, List<String> helpChannel, String helpChannelOther, List<String> careChannel, String careChannelOther, Integer pourWay, Integer helpWay, Integer publicActivity, Long createTime, Long createStaffId, String createStaffName, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.resultId = resultId;
    this.score = score;
    this.level = level;
    this.friends = friends;
    this.liveStatus = liveStatus;
    this.neighbor = neighbor;
    this.colleague = colleague;
    this.familySpouse = familySpouse;
    this.familyParent = familyParent;
    this.familyChild = familyChild;
    this.familySibling = familySibling;
    this.familyOther = familyOther;
    this.helpChannel = Internal.immutableCopyOf("helpChannel", helpChannel);
    this.helpChannelOther = helpChannelOther;
    this.careChannel = Internal.immutableCopyOf("careChannel", careChannel);
    this.careChannelOther = careChannelOther;
    this.pourWay = pourWay;
    this.helpWay = helpWay;
    this.publicActivity = publicActivity;
    this.createTime = createTime;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.resultId = resultId;
    builder.score = score;
    builder.level = level;
    builder.friends = friends;
    builder.liveStatus = liveStatus;
    builder.neighbor = neighbor;
    builder.colleague = colleague;
    builder.familySpouse = familySpouse;
    builder.familyParent = familyParent;
    builder.familyChild = familyChild;
    builder.familySibling = familySibling;
    builder.familyOther = familyOther;
    builder.helpChannel = Internal.copyOf("helpChannel", helpChannel);
    builder.helpChannelOther = helpChannelOther;
    builder.careChannel = Internal.copyOf("careChannel", careChannel);
    builder.careChannelOther = careChannelOther;
    builder.pourWay = pourWay;
    builder.helpWay = helpWay;
    builder.publicActivity = publicActivity;
    builder.createTime = createTime;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof InsureAssessSSRS)) return false;
    InsureAssessSSRS o = (InsureAssessSSRS) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(resultId, o.resultId)
        && Internal.equals(score, o.score)
        && Internal.equals(level, o.level)
        && Internal.equals(friends, o.friends)
        && Internal.equals(liveStatus, o.liveStatus)
        && Internal.equals(neighbor, o.neighbor)
        && Internal.equals(colleague, o.colleague)
        && Internal.equals(familySpouse, o.familySpouse)
        && Internal.equals(familyParent, o.familyParent)
        && Internal.equals(familyChild, o.familyChild)
        && Internal.equals(familySibling, o.familySibling)
        && Internal.equals(familyOther, o.familyOther)
        && helpChannel.equals(o.helpChannel)
        && Internal.equals(helpChannelOther, o.helpChannelOther)
        && careChannel.equals(o.careChannel)
        && Internal.equals(careChannelOther, o.careChannelOther)
        && Internal.equals(pourWay, o.pourWay)
        && Internal.equals(helpWay, o.helpWay)
        && Internal.equals(publicActivity, o.publicActivity)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (resultId != null ? resultId.hashCode() : 0);
      result = result * 37 + (score != null ? score.hashCode() : 0);
      result = result * 37 + (level != null ? level.hashCode() : 0);
      result = result * 37 + (friends != null ? friends.hashCode() : 0);
      result = result * 37 + (liveStatus != null ? liveStatus.hashCode() : 0);
      result = result * 37 + (neighbor != null ? neighbor.hashCode() : 0);
      result = result * 37 + (colleague != null ? colleague.hashCode() : 0);
      result = result * 37 + (familySpouse != null ? familySpouse.hashCode() : 0);
      result = result * 37 + (familyParent != null ? familyParent.hashCode() : 0);
      result = result * 37 + (familyChild != null ? familyChild.hashCode() : 0);
      result = result * 37 + (familySibling != null ? familySibling.hashCode() : 0);
      result = result * 37 + (familyOther != null ? familyOther.hashCode() : 0);
      result = result * 37 + helpChannel.hashCode();
      result = result * 37 + (helpChannelOther != null ? helpChannelOther.hashCode() : 0);
      result = result * 37 + careChannel.hashCode();
      result = result * 37 + (careChannelOther != null ? careChannelOther.hashCode() : 0);
      result = result * 37 + (pourWay != null ? pourWay.hashCode() : 0);
      result = result * 37 + (helpWay != null ? helpWay.hashCode() : 0);
      result = result * 37 + (publicActivity != null ? publicActivity.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (resultId != null) builder.append(", resultId=").append(resultId);
    if (score != null) builder.append(", score=").append(score);
    if (level != null) builder.append(", level=").append(level);
    if (friends != null) builder.append(", friends=").append(friends);
    if (liveStatus != null) builder.append(", liveStatus=").append(liveStatus);
    if (neighbor != null) builder.append(", neighbor=").append(neighbor);
    if (colleague != null) builder.append(", colleague=").append(colleague);
    if (familySpouse != null) builder.append(", familySpouse=").append(familySpouse);
    if (familyParent != null) builder.append(", familyParent=").append(familyParent);
    if (familyChild != null) builder.append(", familyChild=").append(familyChild);
    if (familySibling != null) builder.append(", familySibling=").append(familySibling);
    if (familyOther != null) builder.append(", familyOther=").append(familyOther);
    if (!helpChannel.isEmpty()) builder.append(", helpChannel=").append(helpChannel);
    if (helpChannelOther != null) builder.append(", helpChannelOther=").append(helpChannelOther);
    if (!careChannel.isEmpty()) builder.append(", careChannel=").append(careChannel);
    if (careChannelOther != null) builder.append(", careChannelOther=").append(careChannelOther);
    if (pourWay != null) builder.append(", pourWay=").append(pourWay);
    if (helpWay != null) builder.append(", helpWay=").append(helpWay);
    if (publicActivity != null) builder.append(", publicActivity=").append(publicActivity);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    return builder.replace(0, 2, "InsureAssessSSRS{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<InsureAssessSSRS, Builder> {
    public Long id;

    public Long resultId;

    public Integer score;

    public Integer level;

    public Integer friends;

    public Integer liveStatus;

    public Integer neighbor;

    public Integer colleague;

    public Integer familySpouse;

    public Integer familyParent;

    public Integer familyChild;

    public Integer familySibling;

    public Integer familyOther;

    public List<String> helpChannel;

    public String helpChannelOther;

    public List<String> careChannel;

    public String careChannelOther;

    public Integer pourWay;

    public Integer helpWay;

    public Integer publicActivity;

    public Long createTime;

    public Long createStaffId;

    public String createStaffName;

    public Builder() {
      helpChannel = Internal.newMutableList();
      careChannel = Internal.newMutableList();
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 报告id
     */
    public Builder resultId(Long resultId) {
      this.resultId = resultId;
      return this;
    }

    /**
     * 得分
     */
    public Builder score(Integer score) {
      this.score = score;
      return this;
    }

    /**
     * 社会支持等级 1级-低水平（≤22分） 2级-中等水平（23-44分） 3级-高水平（≥45分）
     */
    public Builder level(Integer level) {
      this.level = level;
      return this;
    }

    /**
     * 关系密切的朋友数量
     */
    public Builder friends(Integer friends) {
      this.friends = friends;
      return this;
    }

    /**
     * 居住情况
     */
    public Builder liveStatus(Integer liveStatus) {
      this.liveStatus = liveStatus;
      return this;
    }

    /**
     * 与邻居交往情况
     */
    public Builder neighbor(Integer neighbor) {
      this.neighbor = neighbor;
      return this;
    }

    /**
     * 与同事交往情况
     */
    public Builder colleague(Integer colleague) {
      this.colleague = colleague;
      return this;
    }

    /**
     * 与夫妻/恋人交往情况
     */
    public Builder familySpouse(Integer familySpouse) {
      this.familySpouse = familySpouse;
      return this;
    }

    /**
     * 与父母交往情况
     */
    public Builder familyParent(Integer familyParent) {
      this.familyParent = familyParent;
      return this;
    }

    /**
     * 与儿女交往情况
     */
    public Builder familyChild(Integer familyChild) {
      this.familyChild = familyChild;
      return this;
    }

    /**
     * 与兄弟姐妹交往情况
     */
    public Builder familySibling(Integer familySibling) {
      this.familySibling = familySibling;
      return this;
    }

    /**
     * 与其家属交往情况
     */
    public Builder familyOther(Integer familyOther) {
      this.familyOther = familyOther;
      return this;
    }

    /**
     * 帮助来源
     */
    public Builder helpChannel(List<String> helpChannel) {
      Internal.checkElementsNotNull(helpChannel);
      this.helpChannel = helpChannel;
      return this;
    }

    /**
     * 帮助来源-其他
     */
    public Builder helpChannelOther(String helpChannelOther) {
      this.helpChannelOther = helpChannelOther;
      return this;
    }

    /**
     * 安慰和关心来源
     */
    public Builder careChannel(List<String> careChannel) {
      Internal.checkElementsNotNull(careChannel);
      this.careChannel = careChannel;
      return this;
    }

    /**
     * 安慰和关心来源-其他
     */
    public Builder careChannelOther(String careChannelOther) {
      this.careChannelOther = careChannelOther;
      return this;
    }

    /**
     * 倾述方式
     */
    public Builder pourWay(Integer pourWay) {
      this.pourWay = pourWay;
      return this;
    }

    /**
     * 求助方式
     */
    public Builder helpWay(Integer helpWay) {
      this.helpWay = helpWay;
      return this;
    }

    /**
     * 参加社会活动
     */
    public Builder publicActivity(Integer publicActivity) {
      this.publicActivity = publicActivity;
      return this;
    }

    /**
     * 本次评估时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 操作员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 评估人员
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    @Override
    public InsureAssessSSRS build() {
      return new InsureAssessSSRS(id, resultId, score, level, friends, liveStatus, neighbor, colleague, familySpouse, familyParent, familyChild, familySibling, familyOther, helpChannel, helpChannelOther, careChannel, careChannelOther, pourWay, helpWay, publicActivity, createTime, createStaffId, createStaffName, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_InsureAssessSSRS extends ProtoAdapter<InsureAssessSSRS> {
    ProtoAdapter_InsureAssessSSRS() {
      super(FieldEncoding.LENGTH_DELIMITED, InsureAssessSSRS.class);
    }

    @Override
    public int encodedSize(InsureAssessSSRS value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.resultId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.resultId) : 0)
          + (value.score != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.score) : 0)
          + (value.level != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.level) : 0)
          + (value.friends != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.friends) : 0)
          + (value.liveStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.liveStatus) : 0)
          + (value.neighbor != null ? ProtoAdapter.UINT32.encodedSizeWithTag(7, value.neighbor) : 0)
          + (value.colleague != null ? ProtoAdapter.UINT32.encodedSizeWithTag(8, value.colleague) : 0)
          + (value.familySpouse != null ? ProtoAdapter.UINT32.encodedSizeWithTag(9, value.familySpouse) : 0)
          + (value.familyParent != null ? ProtoAdapter.UINT32.encodedSizeWithTag(10, value.familyParent) : 0)
          + (value.familyChild != null ? ProtoAdapter.UINT32.encodedSizeWithTag(11, value.familyChild) : 0)
          + (value.familySibling != null ? ProtoAdapter.UINT32.encodedSizeWithTag(12, value.familySibling) : 0)
          + (value.familyOther != null ? ProtoAdapter.UINT32.encodedSizeWithTag(13, value.familyOther) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(14, value.helpChannel)
          + (value.helpChannelOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(15, value.helpChannelOther) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(16, value.careChannel)
          + (value.careChannelOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.careChannelOther) : 0)
          + (value.pourWay != null ? ProtoAdapter.UINT32.encodedSizeWithTag(18, value.pourWay) : 0)
          + (value.helpWay != null ? ProtoAdapter.UINT32.encodedSizeWithTag(19, value.helpWay) : 0)
          + (value.publicActivity != null ? ProtoAdapter.UINT32.encodedSizeWithTag(20, value.publicActivity) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(21, value.createTime) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(22, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.createStaffName) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, InsureAssessSSRS value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.resultId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.resultId);
      if (value.score != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.score);
      if (value.level != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.level);
      if (value.friends != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.friends);
      if (value.liveStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.liveStatus);
      if (value.neighbor != null) ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.neighbor);
      if (value.colleague != null) ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.colleague);
      if (value.familySpouse != null) ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.familySpouse);
      if (value.familyParent != null) ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.familyParent);
      if (value.familyChild != null) ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.familyChild);
      if (value.familySibling != null) ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.familySibling);
      if (value.familyOther != null) ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.familyOther);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 14, value.helpChannel);
      if (value.helpChannelOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 15, value.helpChannelOther);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 16, value.careChannel);
      if (value.careChannelOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.careChannelOther);
      if (value.pourWay != null) ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.pourWay);
      if (value.helpWay != null) ProtoAdapter.UINT32.encodeWithTag(writer, 19, value.helpWay);
      if (value.publicActivity != null) ProtoAdapter.UINT32.encodeWithTag(writer, 20, value.publicActivity);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 21, value.createTime);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 22, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.createStaffName);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public InsureAssessSSRS decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.resultId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.score(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.level(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.friends(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.liveStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.neighbor(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.colleague(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.familySpouse(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.familyParent(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.familyChild(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.familySibling(ProtoAdapter.UINT32.decode(reader)); break;
          case 13: builder.familyOther(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.helpChannel.add(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.helpChannelOther(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.careChannel.add(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.careChannelOther(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.pourWay(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.helpWay(ProtoAdapter.UINT32.decode(reader)); break;
          case 20: builder.publicActivity(ProtoAdapter.UINT32.decode(reader)); break;
          case 21: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 22: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 23: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public InsureAssessSSRS redact(InsureAssessSSRS value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
