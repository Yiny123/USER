// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 560:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class IndexServiceItem extends Message<IndexServiceItem, IndexServiceItem.Builder> {
  public static final ProtoAdapter<IndexServiceItem> ADAPTER = new ProtoAdapter_IndexServiceItem();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_NATIVEURL = "";

  public static final String DEFAULT_URL = "";

  public static final String DEFAULT_ICON = "";

  public static final String DEFAULT_ICONDESC = "";

  public static final Integer DEFAULT_SORT = 0;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_UPDATETIME = 0L;

  public static final Integer DEFAULT_STATE = 0;

  public static final String DEFAULT_ICONURL = "";

  public static final Integer DEFAULT_ST = 0;

  /**
   * id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 城市id列表
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> cityIdList;

  /**
   *  app跳转url
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nativeUrl;

  /**
   * h5跳转url
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String url;

  /**
   * 图标的图片id
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String icon;

  /**
   * 图片的描述
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String iconDesc;

  /**
   * 排序字段
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sort;

  /**
   * 创建时间
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 修改时间
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long updateTime;

  /**
   * 0 未启用 1 启用
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer state;

  /**
   * icon图标的url
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String iconUrl;

  /**
   * 服务类型
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer st;

  public IndexServiceItem(Long id, List<Integer> cityIdList, String nativeUrl, String url, String icon, String iconDesc, Integer sort, Long createTime, Long updateTime, Integer state, String iconUrl, Integer st) {
    this(id, cityIdList, nativeUrl, url, icon, iconDesc, sort, createTime, updateTime, state, iconUrl, st, ByteString.EMPTY);
  }

  public IndexServiceItem(Long id, List<Integer> cityIdList, String nativeUrl, String url, String icon, String iconDesc, Integer sort, Long createTime, Long updateTime, Integer state, String iconUrl, Integer st, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.cityIdList = Internal.immutableCopyOf("cityIdList", cityIdList);
    this.nativeUrl = nativeUrl;
    this.url = url;
    this.icon = icon;
    this.iconDesc = iconDesc;
    this.sort = sort;
    this.createTime = createTime;
    this.updateTime = updateTime;
    this.state = state;
    this.iconUrl = iconUrl;
    this.st = st;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.cityIdList = Internal.copyOf("cityIdList", cityIdList);
    builder.nativeUrl = nativeUrl;
    builder.url = url;
    builder.icon = icon;
    builder.iconDesc = iconDesc;
    builder.sort = sort;
    builder.createTime = createTime;
    builder.updateTime = updateTime;
    builder.state = state;
    builder.iconUrl = iconUrl;
    builder.st = st;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof IndexServiceItem)) return false;
    IndexServiceItem o = (IndexServiceItem) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && cityIdList.equals(o.cityIdList)
        && Internal.equals(nativeUrl, o.nativeUrl)
        && Internal.equals(url, o.url)
        && Internal.equals(icon, o.icon)
        && Internal.equals(iconDesc, o.iconDesc)
        && Internal.equals(sort, o.sort)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(updateTime, o.updateTime)
        && Internal.equals(state, o.state)
        && Internal.equals(iconUrl, o.iconUrl)
        && Internal.equals(st, o.st);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + cityIdList.hashCode();
      result = result * 37 + (nativeUrl != null ? nativeUrl.hashCode() : 0);
      result = result * 37 + (url != null ? url.hashCode() : 0);
      result = result * 37 + (icon != null ? icon.hashCode() : 0);
      result = result * 37 + (iconDesc != null ? iconDesc.hashCode() : 0);
      result = result * 37 + (sort != null ? sort.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (updateTime != null ? updateTime.hashCode() : 0);
      result = result * 37 + (state != null ? state.hashCode() : 0);
      result = result * 37 + (iconUrl != null ? iconUrl.hashCode() : 0);
      result = result * 37 + (st != null ? st.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (!cityIdList.isEmpty()) builder.append(", cityIdList=").append(cityIdList);
    if (nativeUrl != null) builder.append(", nativeUrl=").append(nativeUrl);
    if (url != null) builder.append(", url=").append(url);
    if (icon != null) builder.append(", icon=").append(icon);
    if (iconDesc != null) builder.append(", iconDesc=").append(iconDesc);
    if (sort != null) builder.append(", sort=").append(sort);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (updateTime != null) builder.append(", updateTime=").append(updateTime);
    if (state != null) builder.append(", state=").append(state);
    if (iconUrl != null) builder.append(", iconUrl=").append(iconUrl);
    if (st != null) builder.append(", st=").append(st);
    return builder.replace(0, 2, "IndexServiceItem{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<IndexServiceItem, Builder> {
    public Long id;

    public List<Integer> cityIdList;

    public String nativeUrl;

    public String url;

    public String icon;

    public String iconDesc;

    public Integer sort;

    public Long createTime;

    public Long updateTime;

    public Integer state;

    public String iconUrl;

    public Integer st;

    public Builder() {
      cityIdList = Internal.newMutableList();
    }

    /**
     * id
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 城市id列表
     */
    public Builder cityIdList(List<Integer> cityIdList) {
      Internal.checkElementsNotNull(cityIdList);
      this.cityIdList = cityIdList;
      return this;
    }

    /**
     *  app跳转url
     */
    public Builder nativeUrl(String nativeUrl) {
      this.nativeUrl = nativeUrl;
      return this;
    }

    /**
     * h5跳转url
     */
    public Builder url(String url) {
      this.url = url;
      return this;
    }

    /**
     * 图标的图片id
     */
    public Builder icon(String icon) {
      this.icon = icon;
      return this;
    }

    /**
     * 图片的描述
     */
    public Builder iconDesc(String iconDesc) {
      this.iconDesc = iconDesc;
      return this;
    }

    /**
     * 排序字段
     */
    public Builder sort(Integer sort) {
      this.sort = sort;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 修改时间
     */
    public Builder updateTime(Long updateTime) {
      this.updateTime = updateTime;
      return this;
    }

    /**
     * 0 未启用 1 启用
     */
    public Builder state(Integer state) {
      this.state = state;
      return this;
    }

    /**
     * icon图标的url
     */
    public Builder iconUrl(String iconUrl) {
      this.iconUrl = iconUrl;
      return this;
    }

    /**
     * 服务类型
     */
    public Builder st(Integer st) {
      this.st = st;
      return this;
    }

    @Override
    public IndexServiceItem build() {
      return new IndexServiceItem(id, cityIdList, nativeUrl, url, icon, iconDesc, sort, createTime, updateTime, state, iconUrl, st, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_IndexServiceItem extends ProtoAdapter<IndexServiceItem> {
    ProtoAdapter_IndexServiceItem() {
      super(FieldEncoding.LENGTH_DELIMITED, IndexServiceItem.class);
    }

    @Override
    public int encodedSize(IndexServiceItem value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(2, value.cityIdList)
          + (value.nativeUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.nativeUrl) : 0)
          + (value.url != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.url) : 0)
          + (value.icon != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.icon) : 0)
          + (value.iconDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.iconDesc) : 0)
          + (value.sort != null ? ProtoAdapter.UINT32.encodedSizeWithTag(7, value.sort) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.createTime) : 0)
          + (value.updateTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.updateTime) : 0)
          + (value.state != null ? ProtoAdapter.UINT32.encodedSizeWithTag(10, value.state) : 0)
          + (value.iconUrl != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.iconUrl) : 0)
          + (value.st != null ? ProtoAdapter.UINT32.encodedSizeWithTag(12, value.st) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, IndexServiceItem value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 2, value.cityIdList);
      if (value.nativeUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.nativeUrl);
      if (value.url != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.url);
      if (value.icon != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.icon);
      if (value.iconDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.iconDesc);
      if (value.sort != null) ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.sort);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.createTime);
      if (value.updateTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.updateTime);
      if (value.state != null) ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.state);
      if (value.iconUrl != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.iconUrl);
      if (value.st != null) ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.st);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public IndexServiceItem decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.cityIdList.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.nativeUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.url(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.icon(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.iconDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.sort(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.updateTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.state(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.iconUrl(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.st(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public IndexServiceItem redact(IndexServiceItem value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
