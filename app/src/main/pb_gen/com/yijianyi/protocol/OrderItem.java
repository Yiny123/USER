// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 141:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 订单项目
 */
public final class OrderItem extends Message<OrderItem, OrderItem.Builder> {
  public static final ProtoAdapter<OrderItem> ADAPTER = new ProtoAdapter_OrderItem();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ITEMID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_PRICEID = 0L;

  public static final String DEFAULT_SERVICEITEM = "";

  public static final Integer DEFAULT_SERVICEUNIT = 0;

  public static final Integer DEFAULT_PRICE = 0;

  public static final Integer DEFAULT_NUM = 0;

  public static final Integer DEFAULT_FEE = 0;

  public static final Long DEFAULT_HGID = 0L;

  public static final String DEFAULT_HGNAME = "";

  public static final Integer DEFAULT_STATUS = 0;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Integer DEFAULT_PAYSTATE = 0;

  public static final Long DEFAULT_PERDAYFEE = 0L;

  public static final String DEFAULT_LOCATION = "";

  public static final Integer DEFAULT_RATE = 0;

  public static final Long DEFAULT_CONFIRMTIME = 0L;

  public static final Long DEFAULT_BELONGID = 0L;

  public static final String DEFAULT_PRICEDESC = "";

  public static final Long DEFAULT_PAIDFEE = 0L;

  public static final Integer DEFAULT_ITEMTYPE = 0;

  public static final String DEFAULT_SERVICEDATE = "";

  public static final String DEFAULT_TRADE_NO = "";

  public static final Integer DEFAULT_PAYTYPE = 0;

  public static final Integer DEFAULT_INSUREFLAG = 0;

  public static final String DEFAULT_FULLNAME = "";

  public static final Long DEFAULT_KINSID = 0L;

  public static final String DEFAULT_UPDATETIME = "";

  public static final Long DEFAULT_PAYTIME = 0L;

  public static final Integer DEFAULT_FINISHTYPE = 0;

  public static final Integer DEFAULT_WORKRESULT = 0;

  public static final Integer DEFAULT_AUDITSTATUS = 0;

  public static final Long DEFAULT_AUDITID = 0L;

  public static final String DEFAULT_AUDITNAME = "";

  public static final Long DEFAULT_AUDITTIME = 0L;

  public static final String DEFAULT_AUDITREMARK = "";

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final Integer DEFAULT_SERVICESUBJOINTYPE = 0;

  public static final Integer DEFAULT_SUBJOINGROUPINGTYPE = 0;

  public static final Long DEFAULT_SEEDHGID = 0L;

  public static final String DEFAULT_SEEDHGNAME = "";

  /**
   * 订单号
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long itemId;

  /**
   * 价格配置ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 价格配置ID
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long priceId;

  /**
   * 服务项目
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceItem;

  /**
   * 服务单位 1-次 2-小时 3-天 4-月
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer serviceUnit;

  /**
   * 定价 单位分
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer price;

  /**
   * 数量
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer num;

  /**
   * 单项总费用 = preDayFee * num
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer fee;

  /**
   * 护工id
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long hgId;

  /**
   * 护工姓名
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String hgName;

  /**
   * -1-已取消 0-未确认 1-已确认 2-未服务
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer status;

  /**
   * 创建时间
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 支付状态 0 - 未支付 1 - 已支付
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payState;

  /**
   * 每日费用 = price / serviceUnit(天-1    月-每月天数)
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long perDayFee;

  /**
   * 服务地点
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String location;

  /**
   * 比率
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer rate;

  /**
   * 确认时间
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long confirmTime;

  /**
   * 所属每日明细的ID
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long belongId;

  /**
   * 价格描述
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String priceDesc;

  /**
   * 已支付费用
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long paidFee;

  /**
   * 0-基本服务 1-附加服务 2-校正服务
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer itemType;

  /**
   * 服务时间
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceDate;

  /**
   * 支付交易号 多个时，以,隔开
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String trade_no;

  /**
   * 支付方式
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payType;

  /**
   * 1-可用长护险  2-不可用长护险
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer insureFlag;

  /**
   * 被陪护人姓名
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String fullName;

  /**
   * 被陪护人id
   */
  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kinsId;

  /**
   * 变更时间
   */
  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String updateTime;

  /**
   * 支付时间
   */
  @WireField(
      tag = 30,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long payTime;

  /**
   * 完成类型 1：完成服务，2：事假，3：病假，4：休假，5：旷工，6：客户外出， 7：用户转icu，不收费
   */
  @WireField(
      tag = 31,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer finishType;

  /**
   * 工作情况 1：半天（有人顶替），2：半天（无人顶替），3：全天（有人顶替），4：全天（无人服务），5：客户外出（半天） ，6：客户外出（全天）
   */
  @WireField(
      tag = 32,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer workResult;

  /**
   * 审核状态 0-未评审 1-已审核
   */
  @WireField(
      tag = 33,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer auditStatus;

  /**
   * 审核人id
   */
  @WireField(
      tag = 34,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long auditId;

  /**
   * 审核人昵称
   */
  @WireField(
      tag = 35,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String auditName;

  /**
   * 审核时间
   */
  @WireField(
      tag = 36,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long auditTime;

  /**
   * 审核备注
   */
  @WireField(
      tag = 37,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String auditRemark;

  /**
   * 创建员工ID
   */
  @WireField(
      tag = 38,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 创建员工名字
   */
  @WireField(
      tag = 39,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 附加项类型 0-普通附加项 1-金额调整 2-陪人床
   */
  @WireField(
      tag = 40,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer serviceSubjoinType;

  /**
   * 附加项子类型 1-专陪 2-多陪 3-夜陪
   */
  @WireField(
      tag = 41,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer subjoinGroupingType;

  /**
   * 单独属于指定护工，子护工Id
   */
  @WireField(
      tag = 42,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long seedHgId;

  /**
   * 子护工昵称
   */
  @WireField(
      tag = 43,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String seedhgName;

  public OrderItem(Long itemId, String orderId, Long priceId, String serviceItem, Integer serviceUnit, Integer price, Integer num, Integer fee, Long hgId, String hgName, Integer status, Long createTime, Integer payState, Long perDayFee, String location, Integer rate, Long confirmTime, Long belongId, String priceDesc, Long paidFee, Integer itemType, String serviceDate, String trade_no, Integer payType, Integer insureFlag, String fullName, Long kinsId, String updateTime, Long payTime, Integer finishType, Integer workResult, Integer auditStatus, Long auditId, String auditName, Long auditTime, String auditRemark, Long createStaffId, String createStaffName, Integer serviceSubjoinType, Integer subjoinGroupingType, Long seedHgId, String seedhgName) {
    this(itemId, orderId, priceId, serviceItem, serviceUnit, price, num, fee, hgId, hgName, status, createTime, payState, perDayFee, location, rate, confirmTime, belongId, priceDesc, paidFee, itemType, serviceDate, trade_no, payType, insureFlag, fullName, kinsId, updateTime, payTime, finishType, workResult, auditStatus, auditId, auditName, auditTime, auditRemark, createStaffId, createStaffName, serviceSubjoinType, subjoinGroupingType, seedHgId, seedhgName, ByteString.EMPTY);
  }

  public OrderItem(Long itemId, String orderId, Long priceId, String serviceItem, Integer serviceUnit, Integer price, Integer num, Integer fee, Long hgId, String hgName, Integer status, Long createTime, Integer payState, Long perDayFee, String location, Integer rate, Long confirmTime, Long belongId, String priceDesc, Long paidFee, Integer itemType, String serviceDate, String trade_no, Integer payType, Integer insureFlag, String fullName, Long kinsId, String updateTime, Long payTime, Integer finishType, Integer workResult, Integer auditStatus, Long auditId, String auditName, Long auditTime, String auditRemark, Long createStaffId, String createStaffName, Integer serviceSubjoinType, Integer subjoinGroupingType, Long seedHgId, String seedhgName, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.itemId = itemId;
    this.orderId = orderId;
    this.priceId = priceId;
    this.serviceItem = serviceItem;
    this.serviceUnit = serviceUnit;
    this.price = price;
    this.num = num;
    this.fee = fee;
    this.hgId = hgId;
    this.hgName = hgName;
    this.status = status;
    this.createTime = createTime;
    this.payState = payState;
    this.perDayFee = perDayFee;
    this.location = location;
    this.rate = rate;
    this.confirmTime = confirmTime;
    this.belongId = belongId;
    this.priceDesc = priceDesc;
    this.paidFee = paidFee;
    this.itemType = itemType;
    this.serviceDate = serviceDate;
    this.trade_no = trade_no;
    this.payType = payType;
    this.insureFlag = insureFlag;
    this.fullName = fullName;
    this.kinsId = kinsId;
    this.updateTime = updateTime;
    this.payTime = payTime;
    this.finishType = finishType;
    this.workResult = workResult;
    this.auditStatus = auditStatus;
    this.auditId = auditId;
    this.auditName = auditName;
    this.auditTime = auditTime;
    this.auditRemark = auditRemark;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.serviceSubjoinType = serviceSubjoinType;
    this.subjoinGroupingType = subjoinGroupingType;
    this.seedHgId = seedHgId;
    this.seedhgName = seedhgName;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.itemId = itemId;
    builder.orderId = orderId;
    builder.priceId = priceId;
    builder.serviceItem = serviceItem;
    builder.serviceUnit = serviceUnit;
    builder.price = price;
    builder.num = num;
    builder.fee = fee;
    builder.hgId = hgId;
    builder.hgName = hgName;
    builder.status = status;
    builder.createTime = createTime;
    builder.payState = payState;
    builder.perDayFee = perDayFee;
    builder.location = location;
    builder.rate = rate;
    builder.confirmTime = confirmTime;
    builder.belongId = belongId;
    builder.priceDesc = priceDesc;
    builder.paidFee = paidFee;
    builder.itemType = itemType;
    builder.serviceDate = serviceDate;
    builder.trade_no = trade_no;
    builder.payType = payType;
    builder.insureFlag = insureFlag;
    builder.fullName = fullName;
    builder.kinsId = kinsId;
    builder.updateTime = updateTime;
    builder.payTime = payTime;
    builder.finishType = finishType;
    builder.workResult = workResult;
    builder.auditStatus = auditStatus;
    builder.auditId = auditId;
    builder.auditName = auditName;
    builder.auditTime = auditTime;
    builder.auditRemark = auditRemark;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.serviceSubjoinType = serviceSubjoinType;
    builder.subjoinGroupingType = subjoinGroupingType;
    builder.seedHgId = seedHgId;
    builder.seedhgName = seedhgName;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OrderItem)) return false;
    OrderItem o = (OrderItem) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(itemId, o.itemId)
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(priceId, o.priceId)
        && Internal.equals(serviceItem, o.serviceItem)
        && Internal.equals(serviceUnit, o.serviceUnit)
        && Internal.equals(price, o.price)
        && Internal.equals(num, o.num)
        && Internal.equals(fee, o.fee)
        && Internal.equals(hgId, o.hgId)
        && Internal.equals(hgName, o.hgName)
        && Internal.equals(status, o.status)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(payState, o.payState)
        && Internal.equals(perDayFee, o.perDayFee)
        && Internal.equals(location, o.location)
        && Internal.equals(rate, o.rate)
        && Internal.equals(confirmTime, o.confirmTime)
        && Internal.equals(belongId, o.belongId)
        && Internal.equals(priceDesc, o.priceDesc)
        && Internal.equals(paidFee, o.paidFee)
        && Internal.equals(itemType, o.itemType)
        && Internal.equals(serviceDate, o.serviceDate)
        && Internal.equals(trade_no, o.trade_no)
        && Internal.equals(payType, o.payType)
        && Internal.equals(insureFlag, o.insureFlag)
        && Internal.equals(fullName, o.fullName)
        && Internal.equals(kinsId, o.kinsId)
        && Internal.equals(updateTime, o.updateTime)
        && Internal.equals(payTime, o.payTime)
        && Internal.equals(finishType, o.finishType)
        && Internal.equals(workResult, o.workResult)
        && Internal.equals(auditStatus, o.auditStatus)
        && Internal.equals(auditId, o.auditId)
        && Internal.equals(auditName, o.auditName)
        && Internal.equals(auditTime, o.auditTime)
        && Internal.equals(auditRemark, o.auditRemark)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(serviceSubjoinType, o.serviceSubjoinType)
        && Internal.equals(subjoinGroupingType, o.subjoinGroupingType)
        && Internal.equals(seedHgId, o.seedHgId)
        && Internal.equals(seedhgName, o.seedhgName);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (itemId != null ? itemId.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (priceId != null ? priceId.hashCode() : 0);
      result = result * 37 + (serviceItem != null ? serviceItem.hashCode() : 0);
      result = result * 37 + (serviceUnit != null ? serviceUnit.hashCode() : 0);
      result = result * 37 + (price != null ? price.hashCode() : 0);
      result = result * 37 + (num != null ? num.hashCode() : 0);
      result = result * 37 + (fee != null ? fee.hashCode() : 0);
      result = result * 37 + (hgId != null ? hgId.hashCode() : 0);
      result = result * 37 + (hgName != null ? hgName.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (payState != null ? payState.hashCode() : 0);
      result = result * 37 + (perDayFee != null ? perDayFee.hashCode() : 0);
      result = result * 37 + (location != null ? location.hashCode() : 0);
      result = result * 37 + (rate != null ? rate.hashCode() : 0);
      result = result * 37 + (confirmTime != null ? confirmTime.hashCode() : 0);
      result = result * 37 + (belongId != null ? belongId.hashCode() : 0);
      result = result * 37 + (priceDesc != null ? priceDesc.hashCode() : 0);
      result = result * 37 + (paidFee != null ? paidFee.hashCode() : 0);
      result = result * 37 + (itemType != null ? itemType.hashCode() : 0);
      result = result * 37 + (serviceDate != null ? serviceDate.hashCode() : 0);
      result = result * 37 + (trade_no != null ? trade_no.hashCode() : 0);
      result = result * 37 + (payType != null ? payType.hashCode() : 0);
      result = result * 37 + (insureFlag != null ? insureFlag.hashCode() : 0);
      result = result * 37 + (fullName != null ? fullName.hashCode() : 0);
      result = result * 37 + (kinsId != null ? kinsId.hashCode() : 0);
      result = result * 37 + (updateTime != null ? updateTime.hashCode() : 0);
      result = result * 37 + (payTime != null ? payTime.hashCode() : 0);
      result = result * 37 + (finishType != null ? finishType.hashCode() : 0);
      result = result * 37 + (workResult != null ? workResult.hashCode() : 0);
      result = result * 37 + (auditStatus != null ? auditStatus.hashCode() : 0);
      result = result * 37 + (auditId != null ? auditId.hashCode() : 0);
      result = result * 37 + (auditName != null ? auditName.hashCode() : 0);
      result = result * 37 + (auditTime != null ? auditTime.hashCode() : 0);
      result = result * 37 + (auditRemark != null ? auditRemark.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (serviceSubjoinType != null ? serviceSubjoinType.hashCode() : 0);
      result = result * 37 + (subjoinGroupingType != null ? subjoinGroupingType.hashCode() : 0);
      result = result * 37 + (seedHgId != null ? seedHgId.hashCode() : 0);
      result = result * 37 + (seedhgName != null ? seedhgName.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (itemId != null) builder.append(", itemId=").append(itemId);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (priceId != null) builder.append(", priceId=").append(priceId);
    if (serviceItem != null) builder.append(", serviceItem=").append(serviceItem);
    if (serviceUnit != null) builder.append(", serviceUnit=").append(serviceUnit);
    if (price != null) builder.append(", price=").append(price);
    if (num != null) builder.append(", num=").append(num);
    if (fee != null) builder.append(", fee=").append(fee);
    if (hgId != null) builder.append(", hgId=").append(hgId);
    if (hgName != null) builder.append(", hgName=").append(hgName);
    if (status != null) builder.append(", status=").append(status);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (payState != null) builder.append(", payState=").append(payState);
    if (perDayFee != null) builder.append(", perDayFee=").append(perDayFee);
    if (location != null) builder.append(", location=").append(location);
    if (rate != null) builder.append(", rate=").append(rate);
    if (confirmTime != null) builder.append(", confirmTime=").append(confirmTime);
    if (belongId != null) builder.append(", belongId=").append(belongId);
    if (priceDesc != null) builder.append(", priceDesc=").append(priceDesc);
    if (paidFee != null) builder.append(", paidFee=").append(paidFee);
    if (itemType != null) builder.append(", itemType=").append(itemType);
    if (serviceDate != null) builder.append(", serviceDate=").append(serviceDate);
    if (trade_no != null) builder.append(", trade_no=").append(trade_no);
    if (payType != null) builder.append(", payType=").append(payType);
    if (insureFlag != null) builder.append(", insureFlag=").append(insureFlag);
    if (fullName != null) builder.append(", fullName=").append(fullName);
    if (kinsId != null) builder.append(", kinsId=").append(kinsId);
    if (updateTime != null) builder.append(", updateTime=").append(updateTime);
    if (payTime != null) builder.append(", payTime=").append(payTime);
    if (finishType != null) builder.append(", finishType=").append(finishType);
    if (workResult != null) builder.append(", workResult=").append(workResult);
    if (auditStatus != null) builder.append(", auditStatus=").append(auditStatus);
    if (auditId != null) builder.append(", auditId=").append(auditId);
    if (auditName != null) builder.append(", auditName=").append(auditName);
    if (auditTime != null) builder.append(", auditTime=").append(auditTime);
    if (auditRemark != null) builder.append(", auditRemark=").append(auditRemark);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (serviceSubjoinType != null) builder.append(", serviceSubjoinType=").append(serviceSubjoinType);
    if (subjoinGroupingType != null) builder.append(", subjoinGroupingType=").append(subjoinGroupingType);
    if (seedHgId != null) builder.append(", seedHgId=").append(seedHgId);
    if (seedhgName != null) builder.append(", seedhgName=").append(seedhgName);
    return builder.replace(0, 2, "OrderItem{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<OrderItem, Builder> {
    public Long itemId;

    public String orderId;

    public Long priceId;

    public String serviceItem;

    public Integer serviceUnit;

    public Integer price;

    public Integer num;

    public Integer fee;

    public Long hgId;

    public String hgName;

    public Integer status;

    public Long createTime;

    public Integer payState;

    public Long perDayFee;

    public String location;

    public Integer rate;

    public Long confirmTime;

    public Long belongId;

    public String priceDesc;

    public Long paidFee;

    public Integer itemType;

    public String serviceDate;

    public String trade_no;

    public Integer payType;

    public Integer insureFlag;

    public String fullName;

    public Long kinsId;

    public String updateTime;

    public Long payTime;

    public Integer finishType;

    public Integer workResult;

    public Integer auditStatus;

    public Long auditId;

    public String auditName;

    public Long auditTime;

    public String auditRemark;

    public Long createStaffId;

    public String createStaffName;

    public Integer serviceSubjoinType;

    public Integer subjoinGroupingType;

    public Long seedHgId;

    public String seedhgName;

    public Builder() {
    }

    /**
     * 订单号
     */
    public Builder itemId(Long itemId) {
      this.itemId = itemId;
      return this;
    }

    /**
     * 价格配置ID
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 价格配置ID
     */
    public Builder priceId(Long priceId) {
      this.priceId = priceId;
      return this;
    }

    /**
     * 服务项目
     */
    public Builder serviceItem(String serviceItem) {
      this.serviceItem = serviceItem;
      return this;
    }

    /**
     * 服务单位 1-次 2-小时 3-天 4-月
     */
    public Builder serviceUnit(Integer serviceUnit) {
      this.serviceUnit = serviceUnit;
      return this;
    }

    /**
     * 定价 单位分
     */
    public Builder price(Integer price) {
      this.price = price;
      return this;
    }

    /**
     * 数量
     */
    public Builder num(Integer num) {
      this.num = num;
      return this;
    }

    /**
     * 单项总费用 = preDayFee * num
     */
    public Builder fee(Integer fee) {
      this.fee = fee;
      return this;
    }

    /**
     * 护工id
     */
    public Builder hgId(Long hgId) {
      this.hgId = hgId;
      return this;
    }

    /**
     * 护工姓名
     */
    public Builder hgName(String hgName) {
      this.hgName = hgName;
      return this;
    }

    /**
     * -1-已取消 0-未确认 1-已确认 2-未服务
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 支付状态 0 - 未支付 1 - 已支付
     */
    public Builder payState(Integer payState) {
      this.payState = payState;
      return this;
    }

    /**
     * 每日费用 = price / serviceUnit(天-1    月-每月天数)
     */
    public Builder perDayFee(Long perDayFee) {
      this.perDayFee = perDayFee;
      return this;
    }

    /**
     * 服务地点
     */
    public Builder location(String location) {
      this.location = location;
      return this;
    }

    /**
     * 比率
     */
    public Builder rate(Integer rate) {
      this.rate = rate;
      return this;
    }

    /**
     * 确认时间
     */
    public Builder confirmTime(Long confirmTime) {
      this.confirmTime = confirmTime;
      return this;
    }

    /**
     * 所属每日明细的ID
     */
    public Builder belongId(Long belongId) {
      this.belongId = belongId;
      return this;
    }

    /**
     * 价格描述
     */
    public Builder priceDesc(String priceDesc) {
      this.priceDesc = priceDesc;
      return this;
    }

    /**
     * 已支付费用
     */
    public Builder paidFee(Long paidFee) {
      this.paidFee = paidFee;
      return this;
    }

    /**
     * 0-基本服务 1-附加服务 2-校正服务
     */
    public Builder itemType(Integer itemType) {
      this.itemType = itemType;
      return this;
    }

    /**
     * 服务时间
     */
    public Builder serviceDate(String serviceDate) {
      this.serviceDate = serviceDate;
      return this;
    }

    /**
     * 支付交易号 多个时，以,隔开
     */
    public Builder trade_no(String trade_no) {
      this.trade_no = trade_no;
      return this;
    }

    /**
     * 支付方式
     */
    public Builder payType(Integer payType) {
      this.payType = payType;
      return this;
    }

    /**
     * 1-可用长护险  2-不可用长护险
     */
    public Builder insureFlag(Integer insureFlag) {
      this.insureFlag = insureFlag;
      return this;
    }

    /**
     * 被陪护人姓名
     */
    public Builder fullName(String fullName) {
      this.fullName = fullName;
      return this;
    }

    /**
     * 被陪护人id
     */
    public Builder kinsId(Long kinsId) {
      this.kinsId = kinsId;
      return this;
    }

    /**
     * 变更时间
     */
    public Builder updateTime(String updateTime) {
      this.updateTime = updateTime;
      return this;
    }

    /**
     * 支付时间
     */
    public Builder payTime(Long payTime) {
      this.payTime = payTime;
      return this;
    }

    /**
     * 完成类型 1：完成服务，2：事假，3：病假，4：休假，5：旷工，6：客户外出， 7：用户转icu，不收费
     */
    public Builder finishType(Integer finishType) {
      this.finishType = finishType;
      return this;
    }

    /**
     * 工作情况 1：半天（有人顶替），2：半天（无人顶替），3：全天（有人顶替），4：全天（无人服务），5：客户外出（半天） ，6：客户外出（全天）
     */
    public Builder workResult(Integer workResult) {
      this.workResult = workResult;
      return this;
    }

    /**
     * 审核状态 0-未评审 1-已审核
     */
    public Builder auditStatus(Integer auditStatus) {
      this.auditStatus = auditStatus;
      return this;
    }

    /**
     * 审核人id
     */
    public Builder auditId(Long auditId) {
      this.auditId = auditId;
      return this;
    }

    /**
     * 审核人昵称
     */
    public Builder auditName(String auditName) {
      this.auditName = auditName;
      return this;
    }

    /**
     * 审核时间
     */
    public Builder auditTime(Long auditTime) {
      this.auditTime = auditTime;
      return this;
    }

    /**
     * 审核备注
     */
    public Builder auditRemark(String auditRemark) {
      this.auditRemark = auditRemark;
      return this;
    }

    /**
     * 创建员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 创建员工名字
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 附加项类型 0-普通附加项 1-金额调整 2-陪人床
     */
    public Builder serviceSubjoinType(Integer serviceSubjoinType) {
      this.serviceSubjoinType = serviceSubjoinType;
      return this;
    }

    /**
     * 附加项子类型 1-专陪 2-多陪 3-夜陪
     */
    public Builder subjoinGroupingType(Integer subjoinGroupingType) {
      this.subjoinGroupingType = subjoinGroupingType;
      return this;
    }

    /**
     * 单独属于指定护工，子护工Id
     */
    public Builder seedHgId(Long seedHgId) {
      this.seedHgId = seedHgId;
      return this;
    }

    /**
     * 子护工昵称
     */
    public Builder seedhgName(String seedhgName) {
      this.seedhgName = seedhgName;
      return this;
    }

    @Override
    public OrderItem build() {
      return new OrderItem(itemId, orderId, priceId, serviceItem, serviceUnit, price, num, fee, hgId, hgName, status, createTime, payState, perDayFee, location, rate, confirmTime, belongId, priceDesc, paidFee, itemType, serviceDate, trade_no, payType, insureFlag, fullName, kinsId, updateTime, payTime, finishType, workResult, auditStatus, auditId, auditName, auditTime, auditRemark, createStaffId, createStaffName, serviceSubjoinType, subjoinGroupingType, seedHgId, seedhgName, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OrderItem extends ProtoAdapter<OrderItem> {
    ProtoAdapter_OrderItem() {
      super(FieldEncoding.LENGTH_DELIMITED, OrderItem.class);
    }

    @Override
    public int encodedSize(OrderItem value) {
      return (value.itemId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.itemId) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.orderId) : 0)
          + (value.priceId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.priceId) : 0)
          + (value.serviceItem != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.serviceItem) : 0)
          + (value.serviceUnit != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.serviceUnit) : 0)
          + (value.price != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.price) : 0)
          + (value.num != null ? ProtoAdapter.UINT32.encodedSizeWithTag(7, value.num) : 0)
          + (value.fee != null ? ProtoAdapter.INT32.encodedSizeWithTag(8, value.fee) : 0)
          + (value.hgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.hgId) : 0)
          + (value.hgName != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.hgName) : 0)
          + (value.status != null ? ProtoAdapter.INT32.encodedSizeWithTag(11, value.status) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(12, value.createTime) : 0)
          + (value.payState != null ? ProtoAdapter.UINT32.encodedSizeWithTag(13, value.payState) : 0)
          + (value.perDayFee != null ? ProtoAdapter.INT64.encodedSizeWithTag(15, value.perDayFee) : 0)
          + (value.location != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.location) : 0)
          + (value.rate != null ? ProtoAdapter.UINT32.encodedSizeWithTag(17, value.rate) : 0)
          + (value.confirmTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(18, value.confirmTime) : 0)
          + (value.belongId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(19, value.belongId) : 0)
          + (value.priceDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(20, value.priceDesc) : 0)
          + (value.paidFee != null ? ProtoAdapter.INT64.encodedSizeWithTag(21, value.paidFee) : 0)
          + (value.itemType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(22, value.itemType) : 0)
          + (value.serviceDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.serviceDate) : 0)
          + (value.trade_no != null ? ProtoAdapter.STRING.encodedSizeWithTag(24, value.trade_no) : 0)
          + (value.payType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(25, value.payType) : 0)
          + (value.insureFlag != null ? ProtoAdapter.UINT32.encodedSizeWithTag(26, value.insureFlag) : 0)
          + (value.fullName != null ? ProtoAdapter.STRING.encodedSizeWithTag(27, value.fullName) : 0)
          + (value.kinsId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(28, value.kinsId) : 0)
          + (value.updateTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(29, value.updateTime) : 0)
          + (value.payTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(30, value.payTime) : 0)
          + (value.finishType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(31, value.finishType) : 0)
          + (value.workResult != null ? ProtoAdapter.UINT32.encodedSizeWithTag(32, value.workResult) : 0)
          + (value.auditStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(33, value.auditStatus) : 0)
          + (value.auditId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(34, value.auditId) : 0)
          + (value.auditName != null ? ProtoAdapter.STRING.encodedSizeWithTag(35, value.auditName) : 0)
          + (value.auditTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(36, value.auditTime) : 0)
          + (value.auditRemark != null ? ProtoAdapter.STRING.encodedSizeWithTag(37, value.auditRemark) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(38, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(39, value.createStaffName) : 0)
          + (value.serviceSubjoinType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(40, value.serviceSubjoinType) : 0)
          + (value.subjoinGroupingType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(41, value.subjoinGroupingType) : 0)
          + (value.seedHgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(42, value.seedHgId) : 0)
          + (value.seedhgName != null ? ProtoAdapter.STRING.encodedSizeWithTag(43, value.seedhgName) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OrderItem value) throws IOException {
      if (value.itemId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.itemId);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.orderId);
      if (value.priceId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.priceId);
      if (value.serviceItem != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.serviceItem);
      if (value.serviceUnit != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.serviceUnit);
      if (value.price != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.price);
      if (value.num != null) ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.num);
      if (value.fee != null) ProtoAdapter.INT32.encodeWithTag(writer, 8, value.fee);
      if (value.hgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.hgId);
      if (value.hgName != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.hgName);
      if (value.status != null) ProtoAdapter.INT32.encodeWithTag(writer, 11, value.status);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 12, value.createTime);
      if (value.payState != null) ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.payState);
      if (value.perDayFee != null) ProtoAdapter.INT64.encodeWithTag(writer, 15, value.perDayFee);
      if (value.location != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.location);
      if (value.rate != null) ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.rate);
      if (value.confirmTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 18, value.confirmTime);
      if (value.belongId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 19, value.belongId);
      if (value.priceDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 20, value.priceDesc);
      if (value.paidFee != null) ProtoAdapter.INT64.encodeWithTag(writer, 21, value.paidFee);
      if (value.itemType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 22, value.itemType);
      if (value.serviceDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.serviceDate);
      if (value.trade_no != null) ProtoAdapter.STRING.encodeWithTag(writer, 24, value.trade_no);
      if (value.payType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 25, value.payType);
      if (value.insureFlag != null) ProtoAdapter.UINT32.encodeWithTag(writer, 26, value.insureFlag);
      if (value.fullName != null) ProtoAdapter.STRING.encodeWithTag(writer, 27, value.fullName);
      if (value.kinsId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 28, value.kinsId);
      if (value.updateTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 29, value.updateTime);
      if (value.payTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 30, value.payTime);
      if (value.finishType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 31, value.finishType);
      if (value.workResult != null) ProtoAdapter.UINT32.encodeWithTag(writer, 32, value.workResult);
      if (value.auditStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 33, value.auditStatus);
      if (value.auditId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 34, value.auditId);
      if (value.auditName != null) ProtoAdapter.STRING.encodeWithTag(writer, 35, value.auditName);
      if (value.auditTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 36, value.auditTime);
      if (value.auditRemark != null) ProtoAdapter.STRING.encodeWithTag(writer, 37, value.auditRemark);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 38, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 39, value.createStaffName);
      if (value.serviceSubjoinType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 40, value.serviceSubjoinType);
      if (value.subjoinGroupingType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 41, value.subjoinGroupingType);
      if (value.seedHgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 42, value.seedHgId);
      if (value.seedhgName != null) ProtoAdapter.STRING.encodeWithTag(writer, 43, value.seedhgName);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OrderItem decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.itemId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.priceId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.serviceItem(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.serviceUnit(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.price(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.num(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.fee(ProtoAdapter.INT32.decode(reader)); break;
          case 9: builder.hgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.hgName(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.status(ProtoAdapter.INT32.decode(reader)); break;
          case 12: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 13: builder.payState(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.perDayFee(ProtoAdapter.INT64.decode(reader)); break;
          case 16: builder.location(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.rate(ProtoAdapter.UINT32.decode(reader)); break;
          case 18: builder.confirmTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 19: builder.belongId(ProtoAdapter.UINT64.decode(reader)); break;
          case 20: builder.priceDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 21: builder.paidFee(ProtoAdapter.INT64.decode(reader)); break;
          case 22: builder.itemType(ProtoAdapter.UINT32.decode(reader)); break;
          case 23: builder.serviceDate(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.trade_no(ProtoAdapter.STRING.decode(reader)); break;
          case 25: builder.payType(ProtoAdapter.UINT32.decode(reader)); break;
          case 26: builder.insureFlag(ProtoAdapter.UINT32.decode(reader)); break;
          case 27: builder.fullName(ProtoAdapter.STRING.decode(reader)); break;
          case 28: builder.kinsId(ProtoAdapter.UINT64.decode(reader)); break;
          case 29: builder.updateTime(ProtoAdapter.STRING.decode(reader)); break;
          case 30: builder.payTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 31: builder.finishType(ProtoAdapter.UINT32.decode(reader)); break;
          case 32: builder.workResult(ProtoAdapter.UINT32.decode(reader)); break;
          case 33: builder.auditStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 34: builder.auditId(ProtoAdapter.UINT64.decode(reader)); break;
          case 35: builder.auditName(ProtoAdapter.STRING.decode(reader)); break;
          case 36: builder.auditTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 37: builder.auditRemark(ProtoAdapter.STRING.decode(reader)); break;
          case 38: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 39: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 40: builder.serviceSubjoinType(ProtoAdapter.UINT32.decode(reader)); break;
          case 41: builder.subjoinGroupingType(ProtoAdapter.UINT32.decode(reader)); break;
          case 42: builder.seedHgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 43: builder.seedhgName(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OrderItem redact(OrderItem value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
