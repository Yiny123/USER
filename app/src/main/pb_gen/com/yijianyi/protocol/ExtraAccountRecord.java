// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 1298:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 门禁卡总押金操作记录表
 */
public final class ExtraAccountRecord extends Message<ExtraAccountRecord, ExtraAccountRecord.Builder> {
  public static final ProtoAdapter<ExtraAccountRecord> ADAPTER = new ProtoAdapter_ExtraAccountRecord();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_EXTRAID = 0L;

  public static final Long DEFAULT_ORGID = 0L;

  public static final Long DEFAULT_FEE = 0L;

  public static final Long DEFAULT_FRONTFEE = 0L;

  public static final Long DEFAULT_BACKFEE = 0L;

  public static final Integer DEFAULT_EXTRATYPE = 0;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final Long DEFAULT_FRONTCASHFEE = 0L;

  public static final Long DEFAULT_BACKCASHFEE = 0L;

  /**
   * id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 订单id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 关联门禁卡操作id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long extraId;

  /**
   * 机构id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long orgId;

  /**
   * 门禁卡费用
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long fee;

  /**
   * 门禁卡总押金（变更前）
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long frontFee;

  /**
   * 门禁卡总押金（变更后）
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long backFee;

  /**
   * 操作类型 0-支付 1-退款
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer extraType;

  /**
   * 创建时间
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 创建员工ID
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 创建员工名称
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 门禁卡总押金（变更前）
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long frontCashFee;

  /**
   * 门禁卡总押金（变更后）
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long backCashFee;

  public ExtraAccountRecord(Long id, String orderId, Long extraId, Long orgId, Long fee, Long frontFee, Long backFee, Integer extraType, Long createTime, Long createStaffId, String createStaffName, Long frontCashFee, Long backCashFee) {
    this(id, orderId, extraId, orgId, fee, frontFee, backFee, extraType, createTime, createStaffId, createStaffName, frontCashFee, backCashFee, ByteString.EMPTY);
  }

  public ExtraAccountRecord(Long id, String orderId, Long extraId, Long orgId, Long fee, Long frontFee, Long backFee, Integer extraType, Long createTime, Long createStaffId, String createStaffName, Long frontCashFee, Long backCashFee, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.orderId = orderId;
    this.extraId = extraId;
    this.orgId = orgId;
    this.fee = fee;
    this.frontFee = frontFee;
    this.backFee = backFee;
    this.extraType = extraType;
    this.createTime = createTime;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.frontCashFee = frontCashFee;
    this.backCashFee = backCashFee;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.orderId = orderId;
    builder.extraId = extraId;
    builder.orgId = orgId;
    builder.fee = fee;
    builder.frontFee = frontFee;
    builder.backFee = backFee;
    builder.extraType = extraType;
    builder.createTime = createTime;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.frontCashFee = frontCashFee;
    builder.backCashFee = backCashFee;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ExtraAccountRecord)) return false;
    ExtraAccountRecord o = (ExtraAccountRecord) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(extraId, o.extraId)
        && Internal.equals(orgId, o.orgId)
        && Internal.equals(fee, o.fee)
        && Internal.equals(frontFee, o.frontFee)
        && Internal.equals(backFee, o.backFee)
        && Internal.equals(extraType, o.extraType)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(frontCashFee, o.frontCashFee)
        && Internal.equals(backCashFee, o.backCashFee);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (extraId != null ? extraId.hashCode() : 0);
      result = result * 37 + (orgId != null ? orgId.hashCode() : 0);
      result = result * 37 + (fee != null ? fee.hashCode() : 0);
      result = result * 37 + (frontFee != null ? frontFee.hashCode() : 0);
      result = result * 37 + (backFee != null ? backFee.hashCode() : 0);
      result = result * 37 + (extraType != null ? extraType.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (frontCashFee != null ? frontCashFee.hashCode() : 0);
      result = result * 37 + (backCashFee != null ? backCashFee.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (extraId != null) builder.append(", extraId=").append(extraId);
    if (orgId != null) builder.append(", orgId=").append(orgId);
    if (fee != null) builder.append(", fee=").append(fee);
    if (frontFee != null) builder.append(", frontFee=").append(frontFee);
    if (backFee != null) builder.append(", backFee=").append(backFee);
    if (extraType != null) builder.append(", extraType=").append(extraType);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (frontCashFee != null) builder.append(", frontCashFee=").append(frontCashFee);
    if (backCashFee != null) builder.append(", backCashFee=").append(backCashFee);
    return builder.replace(0, 2, "ExtraAccountRecord{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ExtraAccountRecord, Builder> {
    public Long id;

    public String orderId;

    public Long extraId;

    public Long orgId;

    public Long fee;

    public Long frontFee;

    public Long backFee;

    public Integer extraType;

    public Long createTime;

    public Long createStaffId;

    public String createStaffName;

    public Long frontCashFee;

    public Long backCashFee;

    public Builder() {
    }

    /**
     * id
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 订单id
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 关联门禁卡操作id
     */
    public Builder extraId(Long extraId) {
      this.extraId = extraId;
      return this;
    }

    /**
     * 机构id
     */
    public Builder orgId(Long orgId) {
      this.orgId = orgId;
      return this;
    }

    /**
     * 门禁卡费用
     */
    public Builder fee(Long fee) {
      this.fee = fee;
      return this;
    }

    /**
     * 门禁卡总押金（变更前）
     */
    public Builder frontFee(Long frontFee) {
      this.frontFee = frontFee;
      return this;
    }

    /**
     * 门禁卡总押金（变更后）
     */
    public Builder backFee(Long backFee) {
      this.backFee = backFee;
      return this;
    }

    /**
     * 操作类型 0-支付 1-退款
     */
    public Builder extraType(Integer extraType) {
      this.extraType = extraType;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 创建员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 创建员工名称
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 门禁卡总押金（变更前）
     */
    public Builder frontCashFee(Long frontCashFee) {
      this.frontCashFee = frontCashFee;
      return this;
    }

    /**
     * 门禁卡总押金（变更后）
     */
    public Builder backCashFee(Long backCashFee) {
      this.backCashFee = backCashFee;
      return this;
    }

    @Override
    public ExtraAccountRecord build() {
      return new ExtraAccountRecord(id, orderId, extraId, orgId, fee, frontFee, backFee, extraType, createTime, createStaffId, createStaffName, frontCashFee, backCashFee, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ExtraAccountRecord extends ProtoAdapter<ExtraAccountRecord> {
    ProtoAdapter_ExtraAccountRecord() {
      super(FieldEncoding.LENGTH_DELIMITED, ExtraAccountRecord.class);
    }

    @Override
    public int encodedSize(ExtraAccountRecord value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.orderId) : 0)
          + (value.extraId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.extraId) : 0)
          + (value.orgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.orgId) : 0)
          + (value.fee != null ? ProtoAdapter.INT64.encodedSizeWithTag(5, value.fee) : 0)
          + (value.frontFee != null ? ProtoAdapter.INT64.encodedSizeWithTag(6, value.frontFee) : 0)
          + (value.backFee != null ? ProtoAdapter.INT64.encodedSizeWithTag(7, value.backFee) : 0)
          + (value.extraType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(8, value.extraType) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.createTime) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(10, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.createStaffName) : 0)
          + (value.frontCashFee != null ? ProtoAdapter.INT64.encodedSizeWithTag(12, value.frontCashFee) : 0)
          + (value.backCashFee != null ? ProtoAdapter.INT64.encodedSizeWithTag(13, value.backCashFee) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ExtraAccountRecord value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.orderId);
      if (value.extraId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.extraId);
      if (value.orgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.orgId);
      if (value.fee != null) ProtoAdapter.INT64.encodeWithTag(writer, 5, value.fee);
      if (value.frontFee != null) ProtoAdapter.INT64.encodeWithTag(writer, 6, value.frontFee);
      if (value.backFee != null) ProtoAdapter.INT64.encodeWithTag(writer, 7, value.backFee);
      if (value.extraType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.extraType);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.createTime);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 10, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.createStaffName);
      if (value.frontCashFee != null) ProtoAdapter.INT64.encodeWithTag(writer, 12, value.frontCashFee);
      if (value.backCashFee != null) ProtoAdapter.INT64.encodeWithTag(writer, 13, value.backCashFee);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ExtraAccountRecord decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.extraId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.orgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.fee(ProtoAdapter.INT64.decode(reader)); break;
          case 6: builder.frontFee(ProtoAdapter.INT64.decode(reader)); break;
          case 7: builder.backFee(ProtoAdapter.INT64.decode(reader)); break;
          case 8: builder.extraType(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 11: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.frontCashFee(ProtoAdapter.INT64.decode(reader)); break;
          case 13: builder.backCashFee(ProtoAdapter.INT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ExtraAccountRecord redact(ExtraAccountRecord value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
