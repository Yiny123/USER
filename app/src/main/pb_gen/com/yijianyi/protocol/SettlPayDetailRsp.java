// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 505:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 订单结算支付详情页Rsp
 */
public final class SettlPayDetailRsp extends Message<SettlPayDetailRsp, SettlPayDetailRsp.Builder> {
  public static final ProtoAdapter<SettlPayDetailRsp> ADAPTER = new ProtoAdapter_SettlPayDetailRsp();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_SERVICETIME = "";

  public static final String DEFAULT_EXPENSE = "";

  public static final String DEFAULT_SERVICEFEE = "";

  public static final String DEFAULT_EXTRAFEE = "";

  public static final String DEFAULT_ADJUSTFEE = "";

  public static final Boolean DEFAULT_USEPURSE = false;

  public static final String DEFAULT_NEEDPAY = "";

  public static final Integer DEFAULT_PAYFLAG = 0;

  public static final String DEFAULT_PURSE = "";

  public static final String DEFAULT_INSUREACCOUNT = "";

  public static final Boolean DEFAULT_EXTRAPAY = false;

  public static final String DEFAULT_PREREALFEE = "";

  public static final String DEFAULT_PAYHINT = "";

  public static final String DEFAULT_REALPAY = "";

  public static final String DEFAULT_RETURNPAY = "";

  public static final String DEFAULT_HGREBATEFEE = "";

  public static final String DEFAULT_TOTALFEE = "";

  public static final String DEFAULT_SERVICETOTALFEE = "";

  public static final String DEFAULT_EXTRATOTALFEE = "";

  public static final String DEFAULT_BALANCEPREREALFEE = "";

  public static final Integer DEFAULT_RETURNTYPE = 0;

  public static final Integer DEFAULT_DUDAOCHARGECONFIG = 0;

  /**
   * 订单信息
   */
  @WireField(
      tag = 1,
      adapter = "com.yijianyi.protocol.OrderVO#ADAPTER"
  )
  public final OrderVO order;

  /**
   * 服务时间
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceTime;

  /**
   * 待缴总额
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String expense;

  /**
   * 服务待支付费用
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceFee;

  /**
   * 附加待支付费用
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String extraFee;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String adjustFee;

  /**
   * 使用钱包
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean usePurse;

  /**
   * 需要支付的费用
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String needPay;

  /**
   * 服务列表
   */
  @WireField(
      tag = 9,
      adapter = "com.yijianyi.protocol.OrderItemVO2#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<OrderItemVO2> serviceList;

  /**
   * 附加服务列表
   */
  @WireField(
      tag = 10,
      adapter = "com.yijianyi.protocol.OrderItemVO2#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<OrderItemVO2> extraList;

  /**
   * 校正服务列表
   */
  @WireField(
      tag = 11,
      adapter = "com.yijianyi.protocol.OrderItemVO2#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<OrderItemVO2> adjustList;

  /**
   * 0-费用刚好 1-需要支付 2-需要退款
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payFlag;

  /**
   * 钱包余额
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String purse;

  /**
   * 长护险账户
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String insureAccount;

  /**
   * 是否需要额外支付（只有当长护险账户有值得时候才使用）
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean extraPay;

  /**
   * 订单使用的预付款
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String preRealFee;

  /**
   * 支付提示
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String payHint;

  /**
   * 已支付金额
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String realPay;

  /**
   * 需要还金额 payFlag = 2时
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String returnPay;

  /**
   * 职工优惠金额
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String hgRebateFee;

  /**
   * 消费总额
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String totalFee;

  /**
   * 基础服务消费费用
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceTotalFee;

  /**
   * 附加消费费用
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String extraTotalFee;

  /**
   * 预付款余额
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String balancePreRealFee;

  /**
   * 退款方式 0-无默认 1-默认现金，可选两种退款 2-线上，只能线上
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer returnType;

  /**
   * 督导收费配置 1-不可收费 2-可收费
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer dudaoChargeConfig;

  public SettlPayDetailRsp(OrderVO order, String serviceTime, String expense, String serviceFee, String extraFee, String adjustFee, Boolean usePurse, String needPay, List<OrderItemVO2> serviceList, List<OrderItemVO2> extraList, List<OrderItemVO2> adjustList, Integer payFlag, String purse, String insureAccount, Boolean extraPay, String preRealFee, String payHint, String realPay, String returnPay, String hgRebateFee, String totalFee, String serviceTotalFee, String extraTotalFee, String balancePreRealFee, Integer returnType, Integer dudaoChargeConfig) {
    this(order, serviceTime, expense, serviceFee, extraFee, adjustFee, usePurse, needPay, serviceList, extraList, adjustList, payFlag, purse, insureAccount, extraPay, preRealFee, payHint, realPay, returnPay, hgRebateFee, totalFee, serviceTotalFee, extraTotalFee, balancePreRealFee, returnType, dudaoChargeConfig, ByteString.EMPTY);
  }

  public SettlPayDetailRsp(OrderVO order, String serviceTime, String expense, String serviceFee, String extraFee, String adjustFee, Boolean usePurse, String needPay, List<OrderItemVO2> serviceList, List<OrderItemVO2> extraList, List<OrderItemVO2> adjustList, Integer payFlag, String purse, String insureAccount, Boolean extraPay, String preRealFee, String payHint, String realPay, String returnPay, String hgRebateFee, String totalFee, String serviceTotalFee, String extraTotalFee, String balancePreRealFee, Integer returnType, Integer dudaoChargeConfig, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.order = order;
    this.serviceTime = serviceTime;
    this.expense = expense;
    this.serviceFee = serviceFee;
    this.extraFee = extraFee;
    this.adjustFee = adjustFee;
    this.usePurse = usePurse;
    this.needPay = needPay;
    this.serviceList = Internal.immutableCopyOf("serviceList", serviceList);
    this.extraList = Internal.immutableCopyOf("extraList", extraList);
    this.adjustList = Internal.immutableCopyOf("adjustList", adjustList);
    this.payFlag = payFlag;
    this.purse = purse;
    this.insureAccount = insureAccount;
    this.extraPay = extraPay;
    this.preRealFee = preRealFee;
    this.payHint = payHint;
    this.realPay = realPay;
    this.returnPay = returnPay;
    this.hgRebateFee = hgRebateFee;
    this.totalFee = totalFee;
    this.serviceTotalFee = serviceTotalFee;
    this.extraTotalFee = extraTotalFee;
    this.balancePreRealFee = balancePreRealFee;
    this.returnType = returnType;
    this.dudaoChargeConfig = dudaoChargeConfig;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.order = order;
    builder.serviceTime = serviceTime;
    builder.expense = expense;
    builder.serviceFee = serviceFee;
    builder.extraFee = extraFee;
    builder.adjustFee = adjustFee;
    builder.usePurse = usePurse;
    builder.needPay = needPay;
    builder.serviceList = Internal.copyOf("serviceList", serviceList);
    builder.extraList = Internal.copyOf("extraList", extraList);
    builder.adjustList = Internal.copyOf("adjustList", adjustList);
    builder.payFlag = payFlag;
    builder.purse = purse;
    builder.insureAccount = insureAccount;
    builder.extraPay = extraPay;
    builder.preRealFee = preRealFee;
    builder.payHint = payHint;
    builder.realPay = realPay;
    builder.returnPay = returnPay;
    builder.hgRebateFee = hgRebateFee;
    builder.totalFee = totalFee;
    builder.serviceTotalFee = serviceTotalFee;
    builder.extraTotalFee = extraTotalFee;
    builder.balancePreRealFee = balancePreRealFee;
    builder.returnType = returnType;
    builder.dudaoChargeConfig = dudaoChargeConfig;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SettlPayDetailRsp)) return false;
    SettlPayDetailRsp o = (SettlPayDetailRsp) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(order, o.order)
        && Internal.equals(serviceTime, o.serviceTime)
        && Internal.equals(expense, o.expense)
        && Internal.equals(serviceFee, o.serviceFee)
        && Internal.equals(extraFee, o.extraFee)
        && Internal.equals(adjustFee, o.adjustFee)
        && Internal.equals(usePurse, o.usePurse)
        && Internal.equals(needPay, o.needPay)
        && serviceList.equals(o.serviceList)
        && extraList.equals(o.extraList)
        && adjustList.equals(o.adjustList)
        && Internal.equals(payFlag, o.payFlag)
        && Internal.equals(purse, o.purse)
        && Internal.equals(insureAccount, o.insureAccount)
        && Internal.equals(extraPay, o.extraPay)
        && Internal.equals(preRealFee, o.preRealFee)
        && Internal.equals(payHint, o.payHint)
        && Internal.equals(realPay, o.realPay)
        && Internal.equals(returnPay, o.returnPay)
        && Internal.equals(hgRebateFee, o.hgRebateFee)
        && Internal.equals(totalFee, o.totalFee)
        && Internal.equals(serviceTotalFee, o.serviceTotalFee)
        && Internal.equals(extraTotalFee, o.extraTotalFee)
        && Internal.equals(balancePreRealFee, o.balancePreRealFee)
        && Internal.equals(returnType, o.returnType)
        && Internal.equals(dudaoChargeConfig, o.dudaoChargeConfig);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (order != null ? order.hashCode() : 0);
      result = result * 37 + (serviceTime != null ? serviceTime.hashCode() : 0);
      result = result * 37 + (expense != null ? expense.hashCode() : 0);
      result = result * 37 + (serviceFee != null ? serviceFee.hashCode() : 0);
      result = result * 37 + (extraFee != null ? extraFee.hashCode() : 0);
      result = result * 37 + (adjustFee != null ? adjustFee.hashCode() : 0);
      result = result * 37 + (usePurse != null ? usePurse.hashCode() : 0);
      result = result * 37 + (needPay != null ? needPay.hashCode() : 0);
      result = result * 37 + serviceList.hashCode();
      result = result * 37 + extraList.hashCode();
      result = result * 37 + adjustList.hashCode();
      result = result * 37 + (payFlag != null ? payFlag.hashCode() : 0);
      result = result * 37 + (purse != null ? purse.hashCode() : 0);
      result = result * 37 + (insureAccount != null ? insureAccount.hashCode() : 0);
      result = result * 37 + (extraPay != null ? extraPay.hashCode() : 0);
      result = result * 37 + (preRealFee != null ? preRealFee.hashCode() : 0);
      result = result * 37 + (payHint != null ? payHint.hashCode() : 0);
      result = result * 37 + (realPay != null ? realPay.hashCode() : 0);
      result = result * 37 + (returnPay != null ? returnPay.hashCode() : 0);
      result = result * 37 + (hgRebateFee != null ? hgRebateFee.hashCode() : 0);
      result = result * 37 + (totalFee != null ? totalFee.hashCode() : 0);
      result = result * 37 + (serviceTotalFee != null ? serviceTotalFee.hashCode() : 0);
      result = result * 37 + (extraTotalFee != null ? extraTotalFee.hashCode() : 0);
      result = result * 37 + (balancePreRealFee != null ? balancePreRealFee.hashCode() : 0);
      result = result * 37 + (returnType != null ? returnType.hashCode() : 0);
      result = result * 37 + (dudaoChargeConfig != null ? dudaoChargeConfig.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (order != null) builder.append(", order=").append(order);
    if (serviceTime != null) builder.append(", serviceTime=").append(serviceTime);
    if (expense != null) builder.append(", expense=").append(expense);
    if (serviceFee != null) builder.append(", serviceFee=").append(serviceFee);
    if (extraFee != null) builder.append(", extraFee=").append(extraFee);
    if (adjustFee != null) builder.append(", adjustFee=").append(adjustFee);
    if (usePurse != null) builder.append(", usePurse=").append(usePurse);
    if (needPay != null) builder.append(", needPay=").append(needPay);
    if (!serviceList.isEmpty()) builder.append(", serviceList=").append(serviceList);
    if (!extraList.isEmpty()) builder.append(", extraList=").append(extraList);
    if (!adjustList.isEmpty()) builder.append(", adjustList=").append(adjustList);
    if (payFlag != null) builder.append(", payFlag=").append(payFlag);
    if (purse != null) builder.append(", purse=").append(purse);
    if (insureAccount != null) builder.append(", insureAccount=").append(insureAccount);
    if (extraPay != null) builder.append(", extraPay=").append(extraPay);
    if (preRealFee != null) builder.append(", preRealFee=").append(preRealFee);
    if (payHint != null) builder.append(", payHint=").append(payHint);
    if (realPay != null) builder.append(", realPay=").append(realPay);
    if (returnPay != null) builder.append(", returnPay=").append(returnPay);
    if (hgRebateFee != null) builder.append(", hgRebateFee=").append(hgRebateFee);
    if (totalFee != null) builder.append(", totalFee=").append(totalFee);
    if (serviceTotalFee != null) builder.append(", serviceTotalFee=").append(serviceTotalFee);
    if (extraTotalFee != null) builder.append(", extraTotalFee=").append(extraTotalFee);
    if (balancePreRealFee != null) builder.append(", balancePreRealFee=").append(balancePreRealFee);
    if (returnType != null) builder.append(", returnType=").append(returnType);
    if (dudaoChargeConfig != null) builder.append(", dudaoChargeConfig=").append(dudaoChargeConfig);
    return builder.replace(0, 2, "SettlPayDetailRsp{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<SettlPayDetailRsp, Builder> {
    public OrderVO order;

    public String serviceTime;

    public String expense;

    public String serviceFee;

    public String extraFee;

    public String adjustFee;

    public Boolean usePurse;

    public String needPay;

    public List<OrderItemVO2> serviceList;

    public List<OrderItemVO2> extraList;

    public List<OrderItemVO2> adjustList;

    public Integer payFlag;

    public String purse;

    public String insureAccount;

    public Boolean extraPay;

    public String preRealFee;

    public String payHint;

    public String realPay;

    public String returnPay;

    public String hgRebateFee;

    public String totalFee;

    public String serviceTotalFee;

    public String extraTotalFee;

    public String balancePreRealFee;

    public Integer returnType;

    public Integer dudaoChargeConfig;

    public Builder() {
      serviceList = Internal.newMutableList();
      extraList = Internal.newMutableList();
      adjustList = Internal.newMutableList();
    }

    /**
     * 订单信息
     */
    public Builder order(OrderVO order) {
      this.order = order;
      return this;
    }

    /**
     * 服务时间
     */
    public Builder serviceTime(String serviceTime) {
      this.serviceTime = serviceTime;
      return this;
    }

    /**
     * 待缴总额
     */
    public Builder expense(String expense) {
      this.expense = expense;
      return this;
    }

    /**
     * 服务待支付费用
     */
    public Builder serviceFee(String serviceFee) {
      this.serviceFee = serviceFee;
      return this;
    }

    /**
     * 附加待支付费用
     */
    public Builder extraFee(String extraFee) {
      this.extraFee = extraFee;
      return this;
    }

    public Builder adjustFee(String adjustFee) {
      this.adjustFee = adjustFee;
      return this;
    }

    /**
     * 使用钱包
     */
    public Builder usePurse(Boolean usePurse) {
      this.usePurse = usePurse;
      return this;
    }

    /**
     * 需要支付的费用
     */
    public Builder needPay(String needPay) {
      this.needPay = needPay;
      return this;
    }

    /**
     * 服务列表
     */
    public Builder serviceList(List<OrderItemVO2> serviceList) {
      Internal.checkElementsNotNull(serviceList);
      this.serviceList = serviceList;
      return this;
    }

    /**
     * 附加服务列表
     */
    public Builder extraList(List<OrderItemVO2> extraList) {
      Internal.checkElementsNotNull(extraList);
      this.extraList = extraList;
      return this;
    }

    /**
     * 校正服务列表
     */
    public Builder adjustList(List<OrderItemVO2> adjustList) {
      Internal.checkElementsNotNull(adjustList);
      this.adjustList = adjustList;
      return this;
    }

    /**
     * 0-费用刚好 1-需要支付 2-需要退款
     */
    public Builder payFlag(Integer payFlag) {
      this.payFlag = payFlag;
      return this;
    }

    /**
     * 钱包余额
     */
    public Builder purse(String purse) {
      this.purse = purse;
      return this;
    }

    /**
     * 长护险账户
     */
    public Builder insureAccount(String insureAccount) {
      this.insureAccount = insureAccount;
      return this;
    }

    /**
     * 是否需要额外支付（只有当长护险账户有值得时候才使用）
     */
    public Builder extraPay(Boolean extraPay) {
      this.extraPay = extraPay;
      return this;
    }

    /**
     * 订单使用的预付款
     */
    public Builder preRealFee(String preRealFee) {
      this.preRealFee = preRealFee;
      return this;
    }

    /**
     * 支付提示
     */
    public Builder payHint(String payHint) {
      this.payHint = payHint;
      return this;
    }

    /**
     * 已支付金额
     */
    public Builder realPay(String realPay) {
      this.realPay = realPay;
      return this;
    }

    /**
     * 需要还金额 payFlag = 2时
     */
    public Builder returnPay(String returnPay) {
      this.returnPay = returnPay;
      return this;
    }

    /**
     * 职工优惠金额
     */
    public Builder hgRebateFee(String hgRebateFee) {
      this.hgRebateFee = hgRebateFee;
      return this;
    }

    /**
     * 消费总额
     */
    public Builder totalFee(String totalFee) {
      this.totalFee = totalFee;
      return this;
    }

    /**
     * 基础服务消费费用
     */
    public Builder serviceTotalFee(String serviceTotalFee) {
      this.serviceTotalFee = serviceTotalFee;
      return this;
    }

    /**
     * 附加消费费用
     */
    public Builder extraTotalFee(String extraTotalFee) {
      this.extraTotalFee = extraTotalFee;
      return this;
    }

    /**
     * 预付款余额
     */
    public Builder balancePreRealFee(String balancePreRealFee) {
      this.balancePreRealFee = balancePreRealFee;
      return this;
    }

    /**
     * 退款方式 0-无默认 1-默认现金，可选两种退款 2-线上，只能线上
     */
    public Builder returnType(Integer returnType) {
      this.returnType = returnType;
      return this;
    }

    /**
     * 督导收费配置 1-不可收费 2-可收费
     */
    public Builder dudaoChargeConfig(Integer dudaoChargeConfig) {
      this.dudaoChargeConfig = dudaoChargeConfig;
      return this;
    }

    @Override
    public SettlPayDetailRsp build() {
      return new SettlPayDetailRsp(order, serviceTime, expense, serviceFee, extraFee, adjustFee, usePurse, needPay, serviceList, extraList, adjustList, payFlag, purse, insureAccount, extraPay, preRealFee, payHint, realPay, returnPay, hgRebateFee, totalFee, serviceTotalFee, extraTotalFee, balancePreRealFee, returnType, dudaoChargeConfig, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SettlPayDetailRsp extends ProtoAdapter<SettlPayDetailRsp> {
    ProtoAdapter_SettlPayDetailRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, SettlPayDetailRsp.class);
    }

    @Override
    public int encodedSize(SettlPayDetailRsp value) {
      return (value.order != null ? OrderVO.ADAPTER.encodedSizeWithTag(1, value.order) : 0)
          + (value.serviceTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.serviceTime) : 0)
          + (value.expense != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.expense) : 0)
          + (value.serviceFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.serviceFee) : 0)
          + (value.extraFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.extraFee) : 0)
          + (value.adjustFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.adjustFee) : 0)
          + (value.usePurse != null ? ProtoAdapter.BOOL.encodedSizeWithTag(7, value.usePurse) : 0)
          + (value.needPay != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.needPay) : 0)
          + OrderItemVO2.ADAPTER.asRepeated().encodedSizeWithTag(9, value.serviceList)
          + OrderItemVO2.ADAPTER.asRepeated().encodedSizeWithTag(10, value.extraList)
          + OrderItemVO2.ADAPTER.asRepeated().encodedSizeWithTag(11, value.adjustList)
          + (value.payFlag != null ? ProtoAdapter.UINT32.encodedSizeWithTag(12, value.payFlag) : 0)
          + (value.purse != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.purse) : 0)
          + (value.insureAccount != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.insureAccount) : 0)
          + (value.extraPay != null ? ProtoAdapter.BOOL.encodedSizeWithTag(15, value.extraPay) : 0)
          + (value.preRealFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.preRealFee) : 0)
          + (value.payHint != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.payHint) : 0)
          + (value.realPay != null ? ProtoAdapter.STRING.encodedSizeWithTag(18, value.realPay) : 0)
          + (value.returnPay != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.returnPay) : 0)
          + (value.hgRebateFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(20, value.hgRebateFee) : 0)
          + (value.totalFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.totalFee) : 0)
          + (value.serviceTotalFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(22, value.serviceTotalFee) : 0)
          + (value.extraTotalFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.extraTotalFee) : 0)
          + (value.balancePreRealFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(24, value.balancePreRealFee) : 0)
          + (value.returnType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(25, value.returnType) : 0)
          + (value.dudaoChargeConfig != null ? ProtoAdapter.UINT32.encodedSizeWithTag(26, value.dudaoChargeConfig) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SettlPayDetailRsp value) throws IOException {
      if (value.order != null) OrderVO.ADAPTER.encodeWithTag(writer, 1, value.order);
      if (value.serviceTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.serviceTime);
      if (value.expense != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.expense);
      if (value.serviceFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.serviceFee);
      if (value.extraFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.extraFee);
      if (value.adjustFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.adjustFee);
      if (value.usePurse != null) ProtoAdapter.BOOL.encodeWithTag(writer, 7, value.usePurse);
      if (value.needPay != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.needPay);
      OrderItemVO2.ADAPTER.asRepeated().encodeWithTag(writer, 9, value.serviceList);
      OrderItemVO2.ADAPTER.asRepeated().encodeWithTag(writer, 10, value.extraList);
      OrderItemVO2.ADAPTER.asRepeated().encodeWithTag(writer, 11, value.adjustList);
      if (value.payFlag != null) ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.payFlag);
      if (value.purse != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.purse);
      if (value.insureAccount != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.insureAccount);
      if (value.extraPay != null) ProtoAdapter.BOOL.encodeWithTag(writer, 15, value.extraPay);
      if (value.preRealFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.preRealFee);
      if (value.payHint != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.payHint);
      if (value.realPay != null) ProtoAdapter.STRING.encodeWithTag(writer, 18, value.realPay);
      if (value.returnPay != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.returnPay);
      if (value.hgRebateFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 20, value.hgRebateFee);
      if (value.totalFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.totalFee);
      if (value.serviceTotalFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 22, value.serviceTotalFee);
      if (value.extraTotalFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.extraTotalFee);
      if (value.balancePreRealFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 24, value.balancePreRealFee);
      if (value.returnType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 25, value.returnType);
      if (value.dudaoChargeConfig != null) ProtoAdapter.UINT32.encodeWithTag(writer, 26, value.dudaoChargeConfig);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SettlPayDetailRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.order(OrderVO.ADAPTER.decode(reader)); break;
          case 2: builder.serviceTime(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.expense(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.serviceFee(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.extraFee(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.adjustFee(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.usePurse(ProtoAdapter.BOOL.decode(reader)); break;
          case 8: builder.needPay(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.serviceList.add(OrderItemVO2.ADAPTER.decode(reader)); break;
          case 10: builder.extraList.add(OrderItemVO2.ADAPTER.decode(reader)); break;
          case 11: builder.adjustList.add(OrderItemVO2.ADAPTER.decode(reader)); break;
          case 12: builder.payFlag(ProtoAdapter.UINT32.decode(reader)); break;
          case 13: builder.purse(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.insureAccount(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.extraPay(ProtoAdapter.BOOL.decode(reader)); break;
          case 16: builder.preRealFee(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.payHint(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.realPay(ProtoAdapter.STRING.decode(reader)); break;
          case 19: builder.returnPay(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.hgRebateFee(ProtoAdapter.STRING.decode(reader)); break;
          case 21: builder.totalFee(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.serviceTotalFee(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.extraTotalFee(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.balancePreRealFee(ProtoAdapter.STRING.decode(reader)); break;
          case 25: builder.returnType(ProtoAdapter.UINT32.decode(reader)); break;
          case 26: builder.dudaoChargeConfig(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SettlPayDetailRsp redact(SettlPayDetailRsp value) {
      Builder builder = value.newBuilder();
      if (builder.order != null) builder.order = OrderVO.ADAPTER.redact(builder.order);
      Internal.redactElements(builder.serviceList, OrderItemVO2.ADAPTER);
      Internal.redactElements(builder.extraList, OrderItemVO2.ADAPTER);
      Internal.redactElements(builder.adjustList, OrderItemVO2.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
