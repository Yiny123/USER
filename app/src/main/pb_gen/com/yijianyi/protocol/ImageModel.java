// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Model.proto at 7:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class ImageModel extends Message<ImageModel, ImageModel.Builder> {
  public static final ProtoAdapter<ImageModel> ADAPTER = new ProtoAdapter_ImageModel();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_IMAGEID = 0L;

  public static final String DEFAULT_TYPE = "";

  public static final String DEFAULT_SUFFIX = "";

  public static final Integer DEFAULT_WIDTH = 0;

  public static final Integer DEFAULT_HEIGHT = 0;

  public static final Integer DEFAULT_BGCOLOR = 0;

  public static final Double DEFAULT_LONGITUDE = 0.0d;

  public static final Double DEFAULT_LATITUDE = 0.0d;

  public static final Double DEFAULT_CENTER_X = 0.0d;

  public static final Double DEFAULT_CENTER_Y = 0.0d;

  public static final Long DEFAULT_CREATETIME = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long imageId;

  /**
   * 图片类型
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String type;

  /**
   * 后缀
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String suffix;

  /**
   * 图片宽度
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer width;

  /**
   * 图片高度
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer height;

  /**
   * 背景色
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer bgcolor;

  /**
   * 图片位置经度
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double longitude;

  /**
   * 图片位置纬度
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double latitude;

  /**
   * 图片中心点
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double center_x;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double center_y;

  /**
   * 上传时间
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  public ImageModel(Long imageId, String type, String suffix, Integer width, Integer height, Integer bgcolor, Double longitude, Double latitude, Double center_x, Double center_y, Long createTime) {
    this(imageId, type, suffix, width, height, bgcolor, longitude, latitude, center_x, center_y, createTime, ByteString.EMPTY);
  }

  public ImageModel(Long imageId, String type, String suffix, Integer width, Integer height, Integer bgcolor, Double longitude, Double latitude, Double center_x, Double center_y, Long createTime, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.imageId = imageId;
    this.type = type;
    this.suffix = suffix;
    this.width = width;
    this.height = height;
    this.bgcolor = bgcolor;
    this.longitude = longitude;
    this.latitude = latitude;
    this.center_x = center_x;
    this.center_y = center_y;
    this.createTime = createTime;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.imageId = imageId;
    builder.type = type;
    builder.suffix = suffix;
    builder.width = width;
    builder.height = height;
    builder.bgcolor = bgcolor;
    builder.longitude = longitude;
    builder.latitude = latitude;
    builder.center_x = center_x;
    builder.center_y = center_y;
    builder.createTime = createTime;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ImageModel)) return false;
    ImageModel o = (ImageModel) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(imageId, o.imageId)
        && Internal.equals(type, o.type)
        && Internal.equals(suffix, o.suffix)
        && Internal.equals(width, o.width)
        && Internal.equals(height, o.height)
        && Internal.equals(bgcolor, o.bgcolor)
        && Internal.equals(longitude, o.longitude)
        && Internal.equals(latitude, o.latitude)
        && Internal.equals(center_x, o.center_x)
        && Internal.equals(center_y, o.center_y)
        && Internal.equals(createTime, o.createTime);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (imageId != null ? imageId.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (suffix != null ? suffix.hashCode() : 0);
      result = result * 37 + (width != null ? width.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      result = result * 37 + (bgcolor != null ? bgcolor.hashCode() : 0);
      result = result * 37 + (longitude != null ? longitude.hashCode() : 0);
      result = result * 37 + (latitude != null ? latitude.hashCode() : 0);
      result = result * 37 + (center_x != null ? center_x.hashCode() : 0);
      result = result * 37 + (center_y != null ? center_y.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (imageId != null) builder.append(", imageId=").append(imageId);
    if (type != null) builder.append(", type=").append(type);
    if (suffix != null) builder.append(", suffix=").append(suffix);
    if (width != null) builder.append(", width=").append(width);
    if (height != null) builder.append(", height=").append(height);
    if (bgcolor != null) builder.append(", bgcolor=").append(bgcolor);
    if (longitude != null) builder.append(", longitude=").append(longitude);
    if (latitude != null) builder.append(", latitude=").append(latitude);
    if (center_x != null) builder.append(", center_x=").append(center_x);
    if (center_y != null) builder.append(", center_y=").append(center_y);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    return builder.replace(0, 2, "ImageModel{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ImageModel, Builder> {
    public Long imageId;

    public String type;

    public String suffix;

    public Integer width;

    public Integer height;

    public Integer bgcolor;

    public Double longitude;

    public Double latitude;

    public Double center_x;

    public Double center_y;

    public Long createTime;

    public Builder() {
    }

    public Builder imageId(Long imageId) {
      this.imageId = imageId;
      return this;
    }

    /**
     * 图片类型
     */
    public Builder type(String type) {
      this.type = type;
      return this;
    }

    /**
     * 后缀
     */
    public Builder suffix(String suffix) {
      this.suffix = suffix;
      return this;
    }

    /**
     * 图片宽度
     */
    public Builder width(Integer width) {
      this.width = width;
      return this;
    }

    /**
     * 图片高度
     */
    public Builder height(Integer height) {
      this.height = height;
      return this;
    }

    /**
     * 背景色
     */
    public Builder bgcolor(Integer bgcolor) {
      this.bgcolor = bgcolor;
      return this;
    }

    /**
     * 图片位置经度
     */
    public Builder longitude(Double longitude) {
      this.longitude = longitude;
      return this;
    }

    /**
     * 图片位置纬度
     */
    public Builder latitude(Double latitude) {
      this.latitude = latitude;
      return this;
    }

    /**
     * 图片中心点
     */
    public Builder center_x(Double center_x) {
      this.center_x = center_x;
      return this;
    }

    public Builder center_y(Double center_y) {
      this.center_y = center_y;
      return this;
    }

    /**
     * 上传时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    @Override
    public ImageModel build() {
      return new ImageModel(imageId, type, suffix, width, height, bgcolor, longitude, latitude, center_x, center_y, createTime, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ImageModel extends ProtoAdapter<ImageModel> {
    ProtoAdapter_ImageModel() {
      super(FieldEncoding.LENGTH_DELIMITED, ImageModel.class);
    }

    @Override
    public int encodedSize(ImageModel value) {
      return (value.imageId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.imageId) : 0)
          + (value.type != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.type) : 0)
          + (value.suffix != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.suffix) : 0)
          + (value.width != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.width) : 0)
          + (value.height != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.height) : 0)
          + (value.bgcolor != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.bgcolor) : 0)
          + (value.longitude != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(7, value.longitude) : 0)
          + (value.latitude != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(8, value.latitude) : 0)
          + (value.center_x != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(9, value.center_x) : 0)
          + (value.center_y != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(10, value.center_y) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(11, value.createTime) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ImageModel value) throws IOException {
      if (value.imageId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.imageId);
      if (value.type != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.type);
      if (value.suffix != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.suffix);
      if (value.width != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.width);
      if (value.height != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.height);
      if (value.bgcolor != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.bgcolor);
      if (value.longitude != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 7, value.longitude);
      if (value.latitude != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 8, value.latitude);
      if (value.center_x != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 9, value.center_x);
      if (value.center_y != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 10, value.center_y);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.createTime);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ImageModel decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.imageId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.type(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.suffix(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.width(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.height(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.bgcolor(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.longitude(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 8: builder.latitude(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 9: builder.center_x(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 10: builder.center_y(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 11: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ImageModel redact(ImageModel value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
