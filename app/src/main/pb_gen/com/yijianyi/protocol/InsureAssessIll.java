// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AssessModel.proto at 166:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 疾病状况评估
 */
public final class InsureAssessIll extends Message<InsureAssessIll, InsureAssessIll.Builder> {
  public static final ProtoAdapter<InsureAssessIll> ADAPTER = new ProtoAdapter_InsureAssessIll();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Long DEFAULT_RESULTID = 0L;

  public static final Integer DEFAULT_LEVEL = 0;

  public static final String DEFAULT_ANGIOCARPYOTHER = "";

  public static final String DEFAULT_BREATHEOTHER = "";

  public static final String DEFAULT_METABOLISMOTHER = "";

  public static final String DEFAULT_DIGESTIONOTHER = "";

  public static final String DEFAULT_JOINTOTHER = "";

  public static final String DEFAULT_NERVEOTHER = "";

  public static final String DEFAULT_URINARYOTHER = "";

  public static final String DEFAULT_BLOODOTHER = "";

  public static final String DEFAULT_SECONDILLOTHER = "";

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 报告id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long resultId;

  /**
   * 疾病状况等级 0-无一类和二类疾病 1-有1到2种一类疾病 2-有3种及以上一类疾病 3-有二类疾病
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer level;

  /**
   * 心血管系统
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> angiocarpy;

  /**
   * 心血管系统-其他
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String angiocarpyOther;

  /**
   * 呼吸系统
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> breathe;

  /**
   * 呼吸系统-其他
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String breatheOther;

  /**
   * 代谢和内分泌系统
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> metabolism;

  /**
   * 代谢和内分泌系统-其他
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String metabolismOther;

  /**
   * 消化系统
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> digestion;

  /**
   * 消化系统-其他
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String digestionOther;

  /**
   * 骨/关节/脊柱
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> joint;

  /**
   * 骨/关节/脊柱-其他
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jointOther;

  /**
   * 神经系统
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> nerve;

  /**
   * 神经系统-其他
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nerveOther;

  /**
   * 泌尿生殖系统
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> urinary;

  /**
   * 泌尿生殖系统-其他
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String urinaryOther;

  /**
   * 血液系统
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> blood;

  /**
   * 血液系统-其他
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bloodOther;

  /**
   * 其他
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> other;

  /**
   * 二类疾病
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> secondIll;

  /**
   * 二类疾病-其他
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String secondIllOther;

  /**
   * 本次评估时间
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 操作员工ID
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 评估人员
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  public InsureAssessIll(Long id, Long resultId, Integer level, List<String> angiocarpy, String angiocarpyOther, List<String> breathe, String breatheOther, List<String> metabolism, String metabolismOther, List<String> digestion, String digestionOther, List<String> joint, String jointOther, List<String> nerve, String nerveOther, List<String> urinary, String urinaryOther, List<String> blood, String bloodOther, List<String> other, List<String> secondIll, String secondIllOther, Long createTime, Long createStaffId, String createStaffName) {
    this(id, resultId, level, angiocarpy, angiocarpyOther, breathe, breatheOther, metabolism, metabolismOther, digestion, digestionOther, joint, jointOther, nerve, nerveOther, urinary, urinaryOther, blood, bloodOther, other, secondIll, secondIllOther, createTime, createStaffId, createStaffName, ByteString.EMPTY);
  }

  public InsureAssessIll(Long id, Long resultId, Integer level, List<String> angiocarpy, String angiocarpyOther, List<String> breathe, String breatheOther, List<String> metabolism, String metabolismOther, List<String> digestion, String digestionOther, List<String> joint, String jointOther, List<String> nerve, String nerveOther, List<String> urinary, String urinaryOther, List<String> blood, String bloodOther, List<String> other, List<String> secondIll, String secondIllOther, Long createTime, Long createStaffId, String createStaffName, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.resultId = resultId;
    this.level = level;
    this.angiocarpy = Internal.immutableCopyOf("angiocarpy", angiocarpy);
    this.angiocarpyOther = angiocarpyOther;
    this.breathe = Internal.immutableCopyOf("breathe", breathe);
    this.breatheOther = breatheOther;
    this.metabolism = Internal.immutableCopyOf("metabolism", metabolism);
    this.metabolismOther = metabolismOther;
    this.digestion = Internal.immutableCopyOf("digestion", digestion);
    this.digestionOther = digestionOther;
    this.joint = Internal.immutableCopyOf("joint", joint);
    this.jointOther = jointOther;
    this.nerve = Internal.immutableCopyOf("nerve", nerve);
    this.nerveOther = nerveOther;
    this.urinary = Internal.immutableCopyOf("urinary", urinary);
    this.urinaryOther = urinaryOther;
    this.blood = Internal.immutableCopyOf("blood", blood);
    this.bloodOther = bloodOther;
    this.other = Internal.immutableCopyOf("other", other);
    this.secondIll = Internal.immutableCopyOf("secondIll", secondIll);
    this.secondIllOther = secondIllOther;
    this.createTime = createTime;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.resultId = resultId;
    builder.level = level;
    builder.angiocarpy = Internal.copyOf("angiocarpy", angiocarpy);
    builder.angiocarpyOther = angiocarpyOther;
    builder.breathe = Internal.copyOf("breathe", breathe);
    builder.breatheOther = breatheOther;
    builder.metabolism = Internal.copyOf("metabolism", metabolism);
    builder.metabolismOther = metabolismOther;
    builder.digestion = Internal.copyOf("digestion", digestion);
    builder.digestionOther = digestionOther;
    builder.joint = Internal.copyOf("joint", joint);
    builder.jointOther = jointOther;
    builder.nerve = Internal.copyOf("nerve", nerve);
    builder.nerveOther = nerveOther;
    builder.urinary = Internal.copyOf("urinary", urinary);
    builder.urinaryOther = urinaryOther;
    builder.blood = Internal.copyOf("blood", blood);
    builder.bloodOther = bloodOther;
    builder.other = Internal.copyOf("other", other);
    builder.secondIll = Internal.copyOf("secondIll", secondIll);
    builder.secondIllOther = secondIllOther;
    builder.createTime = createTime;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other_) {
    if (other_ == this) return true;
    if (!(other_ instanceof InsureAssessIll)) return false;
    InsureAssessIll o = (InsureAssessIll) other_;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(resultId, o.resultId)
        && Internal.equals(level, o.level)
        && angiocarpy.equals(o.angiocarpy)
        && Internal.equals(angiocarpyOther, o.angiocarpyOther)
        && breathe.equals(o.breathe)
        && Internal.equals(breatheOther, o.breatheOther)
        && metabolism.equals(o.metabolism)
        && Internal.equals(metabolismOther, o.metabolismOther)
        && digestion.equals(o.digestion)
        && Internal.equals(digestionOther, o.digestionOther)
        && joint.equals(o.joint)
        && Internal.equals(jointOther, o.jointOther)
        && nerve.equals(o.nerve)
        && Internal.equals(nerveOther, o.nerveOther)
        && urinary.equals(o.urinary)
        && Internal.equals(urinaryOther, o.urinaryOther)
        && blood.equals(o.blood)
        && Internal.equals(bloodOther, o.bloodOther)
        && other.equals(o.other)
        && secondIll.equals(o.secondIll)
        && Internal.equals(secondIllOther, o.secondIllOther)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (resultId != null ? resultId.hashCode() : 0);
      result = result * 37 + (level != null ? level.hashCode() : 0);
      result = result * 37 + angiocarpy.hashCode();
      result = result * 37 + (angiocarpyOther != null ? angiocarpyOther.hashCode() : 0);
      result = result * 37 + breathe.hashCode();
      result = result * 37 + (breatheOther != null ? breatheOther.hashCode() : 0);
      result = result * 37 + metabolism.hashCode();
      result = result * 37 + (metabolismOther != null ? metabolismOther.hashCode() : 0);
      result = result * 37 + digestion.hashCode();
      result = result * 37 + (digestionOther != null ? digestionOther.hashCode() : 0);
      result = result * 37 + joint.hashCode();
      result = result * 37 + (jointOther != null ? jointOther.hashCode() : 0);
      result = result * 37 + nerve.hashCode();
      result = result * 37 + (nerveOther != null ? nerveOther.hashCode() : 0);
      result = result * 37 + urinary.hashCode();
      result = result * 37 + (urinaryOther != null ? urinaryOther.hashCode() : 0);
      result = result * 37 + blood.hashCode();
      result = result * 37 + (bloodOther != null ? bloodOther.hashCode() : 0);
      result = result * 37 + other.hashCode();
      result = result * 37 + secondIll.hashCode();
      result = result * 37 + (secondIllOther != null ? secondIllOther.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (resultId != null) builder.append(", resultId=").append(resultId);
    if (level != null) builder.append(", level=").append(level);
    if (!angiocarpy.isEmpty()) builder.append(", angiocarpy=").append(angiocarpy);
    if (angiocarpyOther != null) builder.append(", angiocarpyOther=").append(angiocarpyOther);
    if (!breathe.isEmpty()) builder.append(", breathe=").append(breathe);
    if (breatheOther != null) builder.append(", breatheOther=").append(breatheOther);
    if (!metabolism.isEmpty()) builder.append(", metabolism=").append(metabolism);
    if (metabolismOther != null) builder.append(", metabolismOther=").append(metabolismOther);
    if (!digestion.isEmpty()) builder.append(", digestion=").append(digestion);
    if (digestionOther != null) builder.append(", digestionOther=").append(digestionOther);
    if (!joint.isEmpty()) builder.append(", joint=").append(joint);
    if (jointOther != null) builder.append(", jointOther=").append(jointOther);
    if (!nerve.isEmpty()) builder.append(", nerve=").append(nerve);
    if (nerveOther != null) builder.append(", nerveOther=").append(nerveOther);
    if (!urinary.isEmpty()) builder.append(", urinary=").append(urinary);
    if (urinaryOther != null) builder.append(", urinaryOther=").append(urinaryOther);
    if (!blood.isEmpty()) builder.append(", blood=").append(blood);
    if (bloodOther != null) builder.append(", bloodOther=").append(bloodOther);
    if (!other.isEmpty()) builder.append(", other=").append(other);
    if (!secondIll.isEmpty()) builder.append(", secondIll=").append(secondIll);
    if (secondIllOther != null) builder.append(", secondIllOther=").append(secondIllOther);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    return builder.replace(0, 2, "InsureAssessIll{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<InsureAssessIll, Builder> {
    public Long id;

    public Long resultId;

    public Integer level;

    public List<String> angiocarpy;

    public String angiocarpyOther;

    public List<String> breathe;

    public String breatheOther;

    public List<String> metabolism;

    public String metabolismOther;

    public List<String> digestion;

    public String digestionOther;

    public List<String> joint;

    public String jointOther;

    public List<String> nerve;

    public String nerveOther;

    public List<String> urinary;

    public String urinaryOther;

    public List<String> blood;

    public String bloodOther;

    public List<String> other;

    public List<String> secondIll;

    public String secondIllOther;

    public Long createTime;

    public Long createStaffId;

    public String createStaffName;

    public Builder() {
      angiocarpy = Internal.newMutableList();
      breathe = Internal.newMutableList();
      metabolism = Internal.newMutableList();
      digestion = Internal.newMutableList();
      joint = Internal.newMutableList();
      nerve = Internal.newMutableList();
      urinary = Internal.newMutableList();
      blood = Internal.newMutableList();
      other = Internal.newMutableList();
      secondIll = Internal.newMutableList();
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 报告id
     */
    public Builder resultId(Long resultId) {
      this.resultId = resultId;
      return this;
    }

    /**
     * 疾病状况等级 0-无一类和二类疾病 1-有1到2种一类疾病 2-有3种及以上一类疾病 3-有二类疾病
     */
    public Builder level(Integer level) {
      this.level = level;
      return this;
    }

    /**
     * 心血管系统
     */
    public Builder angiocarpy(List<String> angiocarpy) {
      Internal.checkElementsNotNull(angiocarpy);
      this.angiocarpy = angiocarpy;
      return this;
    }

    /**
     * 心血管系统-其他
     */
    public Builder angiocarpyOther(String angiocarpyOther) {
      this.angiocarpyOther = angiocarpyOther;
      return this;
    }

    /**
     * 呼吸系统
     */
    public Builder breathe(List<String> breathe) {
      Internal.checkElementsNotNull(breathe);
      this.breathe = breathe;
      return this;
    }

    /**
     * 呼吸系统-其他
     */
    public Builder breatheOther(String breatheOther) {
      this.breatheOther = breatheOther;
      return this;
    }

    /**
     * 代谢和内分泌系统
     */
    public Builder metabolism(List<String> metabolism) {
      Internal.checkElementsNotNull(metabolism);
      this.metabolism = metabolism;
      return this;
    }

    /**
     * 代谢和内分泌系统-其他
     */
    public Builder metabolismOther(String metabolismOther) {
      this.metabolismOther = metabolismOther;
      return this;
    }

    /**
     * 消化系统
     */
    public Builder digestion(List<String> digestion) {
      Internal.checkElementsNotNull(digestion);
      this.digestion = digestion;
      return this;
    }

    /**
     * 消化系统-其他
     */
    public Builder digestionOther(String digestionOther) {
      this.digestionOther = digestionOther;
      return this;
    }

    /**
     * 骨/关节/脊柱
     */
    public Builder joint(List<String> joint) {
      Internal.checkElementsNotNull(joint);
      this.joint = joint;
      return this;
    }

    /**
     * 骨/关节/脊柱-其他
     */
    public Builder jointOther(String jointOther) {
      this.jointOther = jointOther;
      return this;
    }

    /**
     * 神经系统
     */
    public Builder nerve(List<String> nerve) {
      Internal.checkElementsNotNull(nerve);
      this.nerve = nerve;
      return this;
    }

    /**
     * 神经系统-其他
     */
    public Builder nerveOther(String nerveOther) {
      this.nerveOther = nerveOther;
      return this;
    }

    /**
     * 泌尿生殖系统
     */
    public Builder urinary(List<String> urinary) {
      Internal.checkElementsNotNull(urinary);
      this.urinary = urinary;
      return this;
    }

    /**
     * 泌尿生殖系统-其他
     */
    public Builder urinaryOther(String urinaryOther) {
      this.urinaryOther = urinaryOther;
      return this;
    }

    /**
     * 血液系统
     */
    public Builder blood(List<String> blood) {
      Internal.checkElementsNotNull(blood);
      this.blood = blood;
      return this;
    }

    /**
     * 血液系统-其他
     */
    public Builder bloodOther(String bloodOther) {
      this.bloodOther = bloodOther;
      return this;
    }

    /**
     * 其他
     */
    public Builder other(List<String> other) {
      Internal.checkElementsNotNull(other);
      this.other = other;
      return this;
    }

    /**
     * 二类疾病
     */
    public Builder secondIll(List<String> secondIll) {
      Internal.checkElementsNotNull(secondIll);
      this.secondIll = secondIll;
      return this;
    }

    /**
     * 二类疾病-其他
     */
    public Builder secondIllOther(String secondIllOther) {
      this.secondIllOther = secondIllOther;
      return this;
    }

    /**
     * 本次评估时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 操作员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 评估人员
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    @Override
    public InsureAssessIll build() {
      return new InsureAssessIll(id, resultId, level, angiocarpy, angiocarpyOther, breathe, breatheOther, metabolism, metabolismOther, digestion, digestionOther, joint, jointOther, nerve, nerveOther, urinary, urinaryOther, blood, bloodOther, other, secondIll, secondIllOther, createTime, createStaffId, createStaffName, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_InsureAssessIll extends ProtoAdapter<InsureAssessIll> {
    ProtoAdapter_InsureAssessIll() {
      super(FieldEncoding.LENGTH_DELIMITED, InsureAssessIll.class);
    }

    @Override
    public int encodedSize(InsureAssessIll value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.resultId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.resultId) : 0)
          + (value.level != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.level) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(4, value.angiocarpy)
          + (value.angiocarpyOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.angiocarpyOther) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(6, value.breathe)
          + (value.breatheOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.breatheOther) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(8, value.metabolism)
          + (value.metabolismOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.metabolismOther) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(10, value.digestion)
          + (value.digestionOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.digestionOther) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(12, value.joint)
          + (value.jointOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.jointOther) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(14, value.nerve)
          + (value.nerveOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(15, value.nerveOther) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(16, value.urinary)
          + (value.urinaryOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.urinaryOther) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(18, value.blood)
          + (value.bloodOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.bloodOther) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(20, value.other)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(21, value.secondIll)
          + (value.secondIllOther != null ? ProtoAdapter.STRING.encodedSizeWithTag(22, value.secondIllOther) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(23, value.createTime) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(24, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(25, value.createStaffName) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, InsureAssessIll value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.resultId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.resultId);
      if (value.level != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.level);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 4, value.angiocarpy);
      if (value.angiocarpyOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.angiocarpyOther);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 6, value.breathe);
      if (value.breatheOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.breatheOther);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 8, value.metabolism);
      if (value.metabolismOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.metabolismOther);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 10, value.digestion);
      if (value.digestionOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.digestionOther);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 12, value.joint);
      if (value.jointOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.jointOther);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 14, value.nerve);
      if (value.nerveOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 15, value.nerveOther);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 16, value.urinary);
      if (value.urinaryOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.urinaryOther);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 18, value.blood);
      if (value.bloodOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.bloodOther);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 20, value.other);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 21, value.secondIll);
      if (value.secondIllOther != null) ProtoAdapter.STRING.encodeWithTag(writer, 22, value.secondIllOther);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 23, value.createTime);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 24, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 25, value.createStaffName);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public InsureAssessIll decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.resultId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.level(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.angiocarpy.add(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.angiocarpyOther(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.breathe.add(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.breatheOther(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.metabolism.add(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.metabolismOther(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.digestion.add(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.digestionOther(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.joint.add(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.jointOther(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.nerve.add(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.nerveOther(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.urinary.add(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.urinaryOther(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.blood.add(ProtoAdapter.STRING.decode(reader)); break;
          case 19: builder.bloodOther(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.other.add(ProtoAdapter.STRING.decode(reader)); break;
          case 21: builder.secondIll.add(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.secondIllOther(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 24: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 25: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public InsureAssessIll redact(InsureAssessIll value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
