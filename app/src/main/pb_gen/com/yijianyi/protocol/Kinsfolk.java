// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 403:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 用户亲属关系
 */
public final class Kinsfolk extends Message<Kinsfolk, Kinsfolk.Builder> {
  public static final ProtoAdapter<Kinsfolk> ADAPTER = new ProtoAdapter_Kinsfolk();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_KINSFOLKID = 0L;

  public static final Long DEFAULT_USERID = 0L;

  public static final String DEFAULT_PHONE = "";

  public static final String DEFAULT_FULLNAME = "";

  public static final Integer DEFAULT_SEX = 0;

  public static final String DEFAULT_BIRTHDAY = "";

  public static final String DEFAULT_PIC = "";

  public static final String DEFAULT_NATIVEPLACE = "";

  public static final String DEFAULT_PROVINCE = "";

  public static final String DEFAULT_CITY = "";

  public static final String DEFAULT_DISTRICT = "";

  public static final String DEFAULT_ADDRESS = "";

  public static final String DEFAULT_RELIGION = "";

  public static final String DEFAULT_NATION = "";

  public static final String DEFAULT_HEIGHT = "";

  public static final String DEFAULT_WEIGHT = "";

  public static final Integer DEFAULT_EDUCATION = 0;

  public static final Integer DEFAULT_MARRIAGE = 0;

  public static final String DEFAULT_IDCARD = "";

  public static final String DEFAULT_IDCARDPIC = "";

  public static final String DEFAULT_IDCARDPIC2 = "";

  public static final String DEFAULT_IDCARDPIC3 = "";

  public static final String DEFAULT_IDCARDEXPIREDDATE = "";

  public static final String DEFAULT_CREATETIME = "";

  public static final Integer DEFAULT_CREATETYPE = 0;

  public static final String DEFAULT_CREATECHANNEL = "";

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final String DEFAULT_RELATION = "";

  public static final Integer DEFAULT_AGE = 0;

  public static final String DEFAULT_CONTACTSPHONE = "";

  public static final String DEFAULT_CONTACTS = "";

  public static final String DEFAULT_CONTACTSRELATION = "";

  public static final String DEFAULT_CONTACTS2PHONE = "";

  public static final String DEFAULT_CONTACTS2 = "";

  public static final String DEFAULT_CONTACTS2RELATION = "";

  public static final String DEFAULT_PHYSICALSTATE = "";

  public static final String DEFAULT_MEDICALNO = "";

  public static final Integer DEFAULT_ACTABILITY = 0;

  public static final Long DEFAULT_DEFAULTUSE = 0L;

  public static final Integer DEFAULT_ENABLE = 0;

  public static final String DEFAULT_REMARK = "";

  public static final Integer DEFAULT_MEDICARETYPE = 0;

  public static final String DEFAULT_HEALTHCARENO = "";

  public static final Integer DEFAULT_DWELLING = 0;

  public static final Integer DEFAULT_PROFESSIONTYPE = 0;

  public static final Integer DEFAULT_CHILDRENSTATUS1 = 0;

  public static final Integer DEFAULT_CHILDRENSTATUS2 = 0;

  public static final String DEFAULT_HOUSINGTYPE = "";

  public static final Integer DEFAULT_NURSETYPE = 0;

  public static final Long DEFAULT_EVALID = 0L;

  public static final String DEFAULT_HEALTHCAREIMG = "";

  public static final String DEFAULT_KINSFOLKIMG = "";

  public static final Integer DEFAULT_STAFFTYPE = 0;

  public static final Integer DEFAULT_PAPERSTYPE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kinsfolkId;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String phone;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String fullName;

  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sex;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String birthday;

  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String pic;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nativeplace;

  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String province;

  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String city;

  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String district;

  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String address;

  /**
   * 1 - 普通话  2 - 粤语 3 - 客家话 4 - 潮汕话
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> language;

  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String religion;

  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nation;

  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String height;

  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String weight;

  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer education;

  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer marriage;

  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcard;

  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcardpic;

  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcardpic2;

  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcardpic3;

  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcardExpiredDate;

  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createTime;

  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer createType;

  /**
   * 创建渠道
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createChannel;

  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 与用户的关系
   */
  @WireField(
      tag = 30,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String relation;

  @WireField(
      tag = 31,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer age;

  /**
   * 第一联系人手机号
   */
  @WireField(
      tag = 32,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String contactsPhone;

  /**
   * 第一联系人
   */
  @WireField(
      tag = 33,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String contacts;

  /**
   * 与第一联系人关系
   */
  @WireField(
      tag = 34,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String contactsRelation;

  /**
   * 第二联系人手机号
   */
  @WireField(
      tag = 35,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String contacts2Phone;

  /**
   * 第二联系人
   */
  @WireField(
      tag = 36,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String contacts2;

  /**
   * 与第二联系人关系
   */
  @WireField(
      tag = 37,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String contacts2Relation;

  /**
   * 身体状况描述
   */
  @WireField(
      tag = 38,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String physicalState;

  /**
   * 医院就诊卡号
   */
  @WireField(
      tag = 39,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String medicalNO;

  /**
   * 行动能力 1-自理 2-半失能 3-失能
   */
  @WireField(
      tag = 40,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer actAbility;

  /**
   * 默认亲属
   */
  @WireField(
      tag = 41,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long defaultUse;

  /**
   * -1-已删除 0-默认
   */
  @WireField(
      tag = 42,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer enable;

  /**
   * 备注信息
   */
  @WireField(
      tag = 43,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String remark;

  /**
   * 医保类型
   */
  @WireField(
      tag = 44,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer medicareType;

  /**
   * 医保卡号
   */
  @WireField(
      tag = 45,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String healthCareNO;

  /**
   * 居住状况1-独居 2-与配偶/伴侣居住 3-与子女居住 4-与父母居住 5-与配偶和子女居住 6-与兄弟姐妹居住 7-与其他亲属居住 8-与非亲属关系的人居住 9-养老机构
   */
  @WireField(
      tag = 46,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer dwelling;

  /**
   * 职业类别 1-政府机关人员 2-事业单位人员 3-企业职工 4-个体户 5-自由职业 6-无业
   */
  @WireField(
      tag = 47,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer professionType;

  /**
   * 收入来源 1-机关事业单位离退休金 2-城乡居民养老保险 3-供养人员补贴 4-低保金 5-子女抚养/补贴 6-亲友自助 7-其他
   */
  @WireField(
      tag = 48,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> income;

  /**
   * 子女状况 儿子个数
   */
  @WireField(
      tag = 49,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer childrenStatus1;

  /**
   * 子女状况 女儿个数
   */
  @WireField(
      tag = 50,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer childrenStatus2;

  /**
   * 信息采集渠道 本人 、家属 、病历 、医院诊断 、健康档案 、其他
   */
  @WireField(
      tag = 51,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> infoChannel;

  /**
   * 参与评估人员 本人 、子女 、亲属 、朋友 、居委会工作人员 、其他
   */
  @WireField(
      tag = 52,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> assessMan;

  /**
   * 住房性质 自有产权房 、租赁住房 、借住 、廉租房 、公租房 、其他
   */
  @WireField(
      tag = 53,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String housingType;

  /**
   * 医疗类别 1-公费医疗 2-职工医保 3-居民医保 4-商业医疗保险 5-自费 6-其他
   */
  @WireField(
      tag = 54,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer nurseType;

  /**
   * 评估点id
   */
  @WireField(
      tag = 55,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long evalId;

  /**
   * 医保卡信息照片
   */
  @WireField(
      tag = 56,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String healthCareImg;

  /**
   * 参保人照片
   */
  @WireField(
      tag = 57,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kinsfolkImg;

  /**
   * 人员类型 0-未设置 1-在职 2-退休
   */
  @WireField(
      tag = 58,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer staffType;

  /**
   * 证件类型 0-身份证 1-护照 2-港澳通行证
   */
  @WireField(
      tag = 59,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer papersType;

  public Kinsfolk(Long kinsfolkId, Long userId, String phone, String fullName, Integer sex, String birthday, String pic, String nativeplace, String province, String city, String district, String address, List<Integer> language, String religion, String nation, String height, String weight, Integer education, Integer marriage, String idcard, String idcardpic, String idcardpic2, String idcardpic3, String idcardExpiredDate, String createTime, Integer createType, String createChannel, Long createStaffId, String createStaffName, String relation, Integer age, String contactsPhone, String contacts, String contactsRelation, String contacts2Phone, String contacts2, String contacts2Relation, String physicalState, String medicalNO, Integer actAbility, Long defaultUse, Integer enable, String remark, Integer medicareType, String healthCareNO, Integer dwelling, Integer professionType, List<String> income, Integer childrenStatus1, Integer childrenStatus2, List<String> infoChannel, List<String> assessMan, String housingType, Integer nurseType, Long evalId, String healthCareImg, String kinsfolkImg, Integer staffType, Integer papersType) {
    this(kinsfolkId, userId, phone, fullName, sex, birthday, pic, nativeplace, province, city, district, address, language, religion, nation, height, weight, education, marriage, idcard, idcardpic, idcardpic2, idcardpic3, idcardExpiredDate, createTime, createType, createChannel, createStaffId, createStaffName, relation, age, contactsPhone, contacts, contactsRelation, contacts2Phone, contacts2, contacts2Relation, physicalState, medicalNO, actAbility, defaultUse, enable, remark, medicareType, healthCareNO, dwelling, professionType, income, childrenStatus1, childrenStatus2, infoChannel, assessMan, housingType, nurseType, evalId, healthCareImg, kinsfolkImg, staffType, papersType, ByteString.EMPTY);
  }

  public Kinsfolk(Long kinsfolkId, Long userId, String phone, String fullName, Integer sex, String birthday, String pic, String nativeplace, String province, String city, String district, String address, List<Integer> language, String religion, String nation, String height, String weight, Integer education, Integer marriage, String idcard, String idcardpic, String idcardpic2, String idcardpic3, String idcardExpiredDate, String createTime, Integer createType, String createChannel, Long createStaffId, String createStaffName, String relation, Integer age, String contactsPhone, String contacts, String contactsRelation, String contacts2Phone, String contacts2, String contacts2Relation, String physicalState, String medicalNO, Integer actAbility, Long defaultUse, Integer enable, String remark, Integer medicareType, String healthCareNO, Integer dwelling, Integer professionType, List<String> income, Integer childrenStatus1, Integer childrenStatus2, List<String> infoChannel, List<String> assessMan, String housingType, Integer nurseType, Long evalId, String healthCareImg, String kinsfolkImg, Integer staffType, Integer papersType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.kinsfolkId = kinsfolkId;
    this.userId = userId;
    this.phone = phone;
    this.fullName = fullName;
    this.sex = sex;
    this.birthday = birthday;
    this.pic = pic;
    this.nativeplace = nativeplace;
    this.province = province;
    this.city = city;
    this.district = district;
    this.address = address;
    this.language = Internal.immutableCopyOf("language", language);
    this.religion = religion;
    this.nation = nation;
    this.height = height;
    this.weight = weight;
    this.education = education;
    this.marriage = marriage;
    this.idcard = idcard;
    this.idcardpic = idcardpic;
    this.idcardpic2 = idcardpic2;
    this.idcardpic3 = idcardpic3;
    this.idcardExpiredDate = idcardExpiredDate;
    this.createTime = createTime;
    this.createType = createType;
    this.createChannel = createChannel;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.relation = relation;
    this.age = age;
    this.contactsPhone = contactsPhone;
    this.contacts = contacts;
    this.contactsRelation = contactsRelation;
    this.contacts2Phone = contacts2Phone;
    this.contacts2 = contacts2;
    this.contacts2Relation = contacts2Relation;
    this.physicalState = physicalState;
    this.medicalNO = medicalNO;
    this.actAbility = actAbility;
    this.defaultUse = defaultUse;
    this.enable = enable;
    this.remark = remark;
    this.medicareType = medicareType;
    this.healthCareNO = healthCareNO;
    this.dwelling = dwelling;
    this.professionType = professionType;
    this.income = Internal.immutableCopyOf("income", income);
    this.childrenStatus1 = childrenStatus1;
    this.childrenStatus2 = childrenStatus2;
    this.infoChannel = Internal.immutableCopyOf("infoChannel", infoChannel);
    this.assessMan = Internal.immutableCopyOf("assessMan", assessMan);
    this.housingType = housingType;
    this.nurseType = nurseType;
    this.evalId = evalId;
    this.healthCareImg = healthCareImg;
    this.kinsfolkImg = kinsfolkImg;
    this.staffType = staffType;
    this.papersType = papersType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.kinsfolkId = kinsfolkId;
    builder.userId = userId;
    builder.phone = phone;
    builder.fullName = fullName;
    builder.sex = sex;
    builder.birthday = birthday;
    builder.pic = pic;
    builder.nativeplace = nativeplace;
    builder.province = province;
    builder.city = city;
    builder.district = district;
    builder.address = address;
    builder.language = Internal.copyOf("language", language);
    builder.religion = religion;
    builder.nation = nation;
    builder.height = height;
    builder.weight = weight;
    builder.education = education;
    builder.marriage = marriage;
    builder.idcard = idcard;
    builder.idcardpic = idcardpic;
    builder.idcardpic2 = idcardpic2;
    builder.idcardpic3 = idcardpic3;
    builder.idcardExpiredDate = idcardExpiredDate;
    builder.createTime = createTime;
    builder.createType = createType;
    builder.createChannel = createChannel;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.relation = relation;
    builder.age = age;
    builder.contactsPhone = contactsPhone;
    builder.contacts = contacts;
    builder.contactsRelation = contactsRelation;
    builder.contacts2Phone = contacts2Phone;
    builder.contacts2 = contacts2;
    builder.contacts2Relation = contacts2Relation;
    builder.physicalState = physicalState;
    builder.medicalNO = medicalNO;
    builder.actAbility = actAbility;
    builder.defaultUse = defaultUse;
    builder.enable = enable;
    builder.remark = remark;
    builder.medicareType = medicareType;
    builder.healthCareNO = healthCareNO;
    builder.dwelling = dwelling;
    builder.professionType = professionType;
    builder.income = Internal.copyOf("income", income);
    builder.childrenStatus1 = childrenStatus1;
    builder.childrenStatus2 = childrenStatus2;
    builder.infoChannel = Internal.copyOf("infoChannel", infoChannel);
    builder.assessMan = Internal.copyOf("assessMan", assessMan);
    builder.housingType = housingType;
    builder.nurseType = nurseType;
    builder.evalId = evalId;
    builder.healthCareImg = healthCareImg;
    builder.kinsfolkImg = kinsfolkImg;
    builder.staffType = staffType;
    builder.papersType = papersType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Kinsfolk)) return false;
    Kinsfolk o = (Kinsfolk) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(kinsfolkId, o.kinsfolkId)
        && Internal.equals(userId, o.userId)
        && Internal.equals(phone, o.phone)
        && Internal.equals(fullName, o.fullName)
        && Internal.equals(sex, o.sex)
        && Internal.equals(birthday, o.birthday)
        && Internal.equals(pic, o.pic)
        && Internal.equals(nativeplace, o.nativeplace)
        && Internal.equals(province, o.province)
        && Internal.equals(city, o.city)
        && Internal.equals(district, o.district)
        && Internal.equals(address, o.address)
        && language.equals(o.language)
        && Internal.equals(religion, o.religion)
        && Internal.equals(nation, o.nation)
        && Internal.equals(height, o.height)
        && Internal.equals(weight, o.weight)
        && Internal.equals(education, o.education)
        && Internal.equals(marriage, o.marriage)
        && Internal.equals(idcard, o.idcard)
        && Internal.equals(idcardpic, o.idcardpic)
        && Internal.equals(idcardpic2, o.idcardpic2)
        && Internal.equals(idcardpic3, o.idcardpic3)
        && Internal.equals(idcardExpiredDate, o.idcardExpiredDate)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createType, o.createType)
        && Internal.equals(createChannel, o.createChannel)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(relation, o.relation)
        && Internal.equals(age, o.age)
        && Internal.equals(contactsPhone, o.contactsPhone)
        && Internal.equals(contacts, o.contacts)
        && Internal.equals(contactsRelation, o.contactsRelation)
        && Internal.equals(contacts2Phone, o.contacts2Phone)
        && Internal.equals(contacts2, o.contacts2)
        && Internal.equals(contacts2Relation, o.contacts2Relation)
        && Internal.equals(physicalState, o.physicalState)
        && Internal.equals(medicalNO, o.medicalNO)
        && Internal.equals(actAbility, o.actAbility)
        && Internal.equals(defaultUse, o.defaultUse)
        && Internal.equals(enable, o.enable)
        && Internal.equals(remark, o.remark)
        && Internal.equals(medicareType, o.medicareType)
        && Internal.equals(healthCareNO, o.healthCareNO)
        && Internal.equals(dwelling, o.dwelling)
        && Internal.equals(professionType, o.professionType)
        && income.equals(o.income)
        && Internal.equals(childrenStatus1, o.childrenStatus1)
        && Internal.equals(childrenStatus2, o.childrenStatus2)
        && infoChannel.equals(o.infoChannel)
        && assessMan.equals(o.assessMan)
        && Internal.equals(housingType, o.housingType)
        && Internal.equals(nurseType, o.nurseType)
        && Internal.equals(evalId, o.evalId)
        && Internal.equals(healthCareImg, o.healthCareImg)
        && Internal.equals(kinsfolkImg, o.kinsfolkImg)
        && Internal.equals(staffType, o.staffType)
        && Internal.equals(papersType, o.papersType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (kinsfolkId != null ? kinsfolkId.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (phone != null ? phone.hashCode() : 0);
      result = result * 37 + (fullName != null ? fullName.hashCode() : 0);
      result = result * 37 + (sex != null ? sex.hashCode() : 0);
      result = result * 37 + (birthday != null ? birthday.hashCode() : 0);
      result = result * 37 + (pic != null ? pic.hashCode() : 0);
      result = result * 37 + (nativeplace != null ? nativeplace.hashCode() : 0);
      result = result * 37 + (province != null ? province.hashCode() : 0);
      result = result * 37 + (city != null ? city.hashCode() : 0);
      result = result * 37 + (district != null ? district.hashCode() : 0);
      result = result * 37 + (address != null ? address.hashCode() : 0);
      result = result * 37 + language.hashCode();
      result = result * 37 + (religion != null ? religion.hashCode() : 0);
      result = result * 37 + (nation != null ? nation.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      result = result * 37 + (weight != null ? weight.hashCode() : 0);
      result = result * 37 + (education != null ? education.hashCode() : 0);
      result = result * 37 + (marriage != null ? marriage.hashCode() : 0);
      result = result * 37 + (idcard != null ? idcard.hashCode() : 0);
      result = result * 37 + (idcardpic != null ? idcardpic.hashCode() : 0);
      result = result * 37 + (idcardpic2 != null ? idcardpic2.hashCode() : 0);
      result = result * 37 + (idcardpic3 != null ? idcardpic3.hashCode() : 0);
      result = result * 37 + (idcardExpiredDate != null ? idcardExpiredDate.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createType != null ? createType.hashCode() : 0);
      result = result * 37 + (createChannel != null ? createChannel.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (relation != null ? relation.hashCode() : 0);
      result = result * 37 + (age != null ? age.hashCode() : 0);
      result = result * 37 + (contactsPhone != null ? contactsPhone.hashCode() : 0);
      result = result * 37 + (contacts != null ? contacts.hashCode() : 0);
      result = result * 37 + (contactsRelation != null ? contactsRelation.hashCode() : 0);
      result = result * 37 + (contacts2Phone != null ? contacts2Phone.hashCode() : 0);
      result = result * 37 + (contacts2 != null ? contacts2.hashCode() : 0);
      result = result * 37 + (contacts2Relation != null ? contacts2Relation.hashCode() : 0);
      result = result * 37 + (physicalState != null ? physicalState.hashCode() : 0);
      result = result * 37 + (medicalNO != null ? medicalNO.hashCode() : 0);
      result = result * 37 + (actAbility != null ? actAbility.hashCode() : 0);
      result = result * 37 + (defaultUse != null ? defaultUse.hashCode() : 0);
      result = result * 37 + (enable != null ? enable.hashCode() : 0);
      result = result * 37 + (remark != null ? remark.hashCode() : 0);
      result = result * 37 + (medicareType != null ? medicareType.hashCode() : 0);
      result = result * 37 + (healthCareNO != null ? healthCareNO.hashCode() : 0);
      result = result * 37 + (dwelling != null ? dwelling.hashCode() : 0);
      result = result * 37 + (professionType != null ? professionType.hashCode() : 0);
      result = result * 37 + income.hashCode();
      result = result * 37 + (childrenStatus1 != null ? childrenStatus1.hashCode() : 0);
      result = result * 37 + (childrenStatus2 != null ? childrenStatus2.hashCode() : 0);
      result = result * 37 + infoChannel.hashCode();
      result = result * 37 + assessMan.hashCode();
      result = result * 37 + (housingType != null ? housingType.hashCode() : 0);
      result = result * 37 + (nurseType != null ? nurseType.hashCode() : 0);
      result = result * 37 + (evalId != null ? evalId.hashCode() : 0);
      result = result * 37 + (healthCareImg != null ? healthCareImg.hashCode() : 0);
      result = result * 37 + (kinsfolkImg != null ? kinsfolkImg.hashCode() : 0);
      result = result * 37 + (staffType != null ? staffType.hashCode() : 0);
      result = result * 37 + (papersType != null ? papersType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (kinsfolkId != null) builder.append(", kinsfolkId=").append(kinsfolkId);
    if (userId != null) builder.append(", userId=").append(userId);
    if (phone != null) builder.append(", phone=").append(phone);
    if (fullName != null) builder.append(", fullName=").append(fullName);
    if (sex != null) builder.append(", sex=").append(sex);
    if (birthday != null) builder.append(", birthday=").append(birthday);
    if (pic != null) builder.append(", pic=").append(pic);
    if (nativeplace != null) builder.append(", nativeplace=").append(nativeplace);
    if (province != null) builder.append(", province=").append(province);
    if (city != null) builder.append(", city=").append(city);
    if (district != null) builder.append(", district=").append(district);
    if (address != null) builder.append(", address=").append(address);
    if (!language.isEmpty()) builder.append(", language=").append(language);
    if (religion != null) builder.append(", religion=").append(religion);
    if (nation != null) builder.append(", nation=").append(nation);
    if (height != null) builder.append(", height=").append(height);
    if (weight != null) builder.append(", weight=").append(weight);
    if (education != null) builder.append(", education=").append(education);
    if (marriage != null) builder.append(", marriage=").append(marriage);
    if (idcard != null) builder.append(", idcard=").append(idcard);
    if (idcardpic != null) builder.append(", idcardpic=").append(idcardpic);
    if (idcardpic2 != null) builder.append(", idcardpic2=").append(idcardpic2);
    if (idcardpic3 != null) builder.append(", idcardpic3=").append(idcardpic3);
    if (idcardExpiredDate != null) builder.append(", idcardExpiredDate=").append(idcardExpiredDate);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createType != null) builder.append(", createType=").append(createType);
    if (createChannel != null) builder.append(", createChannel=").append(createChannel);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (relation != null) builder.append(", relation=").append(relation);
    if (age != null) builder.append(", age=").append(age);
    if (contactsPhone != null) builder.append(", contactsPhone=").append(contactsPhone);
    if (contacts != null) builder.append(", contacts=").append(contacts);
    if (contactsRelation != null) builder.append(", contactsRelation=").append(contactsRelation);
    if (contacts2Phone != null) builder.append(", contacts2Phone=").append(contacts2Phone);
    if (contacts2 != null) builder.append(", contacts2=").append(contacts2);
    if (contacts2Relation != null) builder.append(", contacts2Relation=").append(contacts2Relation);
    if (physicalState != null) builder.append(", physicalState=").append(physicalState);
    if (medicalNO != null) builder.append(", medicalNO=").append(medicalNO);
    if (actAbility != null) builder.append(", actAbility=").append(actAbility);
    if (defaultUse != null) builder.append(", defaultUse=").append(defaultUse);
    if (enable != null) builder.append(", enable=").append(enable);
    if (remark != null) builder.append(", remark=").append(remark);
    if (medicareType != null) builder.append(", medicareType=").append(medicareType);
    if (healthCareNO != null) builder.append(", healthCareNO=").append(healthCareNO);
    if (dwelling != null) builder.append(", dwelling=").append(dwelling);
    if (professionType != null) builder.append(", professionType=").append(professionType);
    if (!income.isEmpty()) builder.append(", income=").append(income);
    if (childrenStatus1 != null) builder.append(", childrenStatus1=").append(childrenStatus1);
    if (childrenStatus2 != null) builder.append(", childrenStatus2=").append(childrenStatus2);
    if (!infoChannel.isEmpty()) builder.append(", infoChannel=").append(infoChannel);
    if (!assessMan.isEmpty()) builder.append(", assessMan=").append(assessMan);
    if (housingType != null) builder.append(", housingType=").append(housingType);
    if (nurseType != null) builder.append(", nurseType=").append(nurseType);
    if (evalId != null) builder.append(", evalId=").append(evalId);
    if (healthCareImg != null) builder.append(", healthCareImg=").append(healthCareImg);
    if (kinsfolkImg != null) builder.append(", kinsfolkImg=").append(kinsfolkImg);
    if (staffType != null) builder.append(", staffType=").append(staffType);
    if (papersType != null) builder.append(", papersType=").append(papersType);
    return builder.replace(0, 2, "Kinsfolk{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Kinsfolk, Builder> {
    public Long kinsfolkId;

    public Long userId;

    public String phone;

    public String fullName;

    public Integer sex;

    public String birthday;

    public String pic;

    public String nativeplace;

    public String province;

    public String city;

    public String district;

    public String address;

    public List<Integer> language;

    public String religion;

    public String nation;

    public String height;

    public String weight;

    public Integer education;

    public Integer marriage;

    public String idcard;

    public String idcardpic;

    public String idcardpic2;

    public String idcardpic3;

    public String idcardExpiredDate;

    public String createTime;

    public Integer createType;

    public String createChannel;

    public Long createStaffId;

    public String createStaffName;

    public String relation;

    public Integer age;

    public String contactsPhone;

    public String contacts;

    public String contactsRelation;

    public String contacts2Phone;

    public String contacts2;

    public String contacts2Relation;

    public String physicalState;

    public String medicalNO;

    public Integer actAbility;

    public Long defaultUse;

    public Integer enable;

    public String remark;

    public Integer medicareType;

    public String healthCareNO;

    public Integer dwelling;

    public Integer professionType;

    public List<String> income;

    public Integer childrenStatus1;

    public Integer childrenStatus2;

    public List<String> infoChannel;

    public List<String> assessMan;

    public String housingType;

    public Integer nurseType;

    public Long evalId;

    public String healthCareImg;

    public String kinsfolkImg;

    public Integer staffType;

    public Integer papersType;

    public Builder() {
      language = Internal.newMutableList();
      income = Internal.newMutableList();
      infoChannel = Internal.newMutableList();
      assessMan = Internal.newMutableList();
    }

    public Builder kinsfolkId(Long kinsfolkId) {
      this.kinsfolkId = kinsfolkId;
      return this;
    }

    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    public Builder phone(String phone) {
      this.phone = phone;
      return this;
    }

    public Builder fullName(String fullName) {
      this.fullName = fullName;
      return this;
    }

    public Builder sex(Integer sex) {
      this.sex = sex;
      return this;
    }

    public Builder birthday(String birthday) {
      this.birthday = birthday;
      return this;
    }

    public Builder pic(String pic) {
      this.pic = pic;
      return this;
    }

    public Builder nativeplace(String nativeplace) {
      this.nativeplace = nativeplace;
      return this;
    }

    public Builder province(String province) {
      this.province = province;
      return this;
    }

    public Builder city(String city) {
      this.city = city;
      return this;
    }

    public Builder district(String district) {
      this.district = district;
      return this;
    }

    public Builder address(String address) {
      this.address = address;
      return this;
    }

    /**
     * 1 - 普通话  2 - 粤语 3 - 客家话 4 - 潮汕话
     */
    public Builder language(List<Integer> language) {
      Internal.checkElementsNotNull(language);
      this.language = language;
      return this;
    }

    public Builder religion(String religion) {
      this.religion = religion;
      return this;
    }

    public Builder nation(String nation) {
      this.nation = nation;
      return this;
    }

    public Builder height(String height) {
      this.height = height;
      return this;
    }

    public Builder weight(String weight) {
      this.weight = weight;
      return this;
    }

    public Builder education(Integer education) {
      this.education = education;
      return this;
    }

    public Builder marriage(Integer marriage) {
      this.marriage = marriage;
      return this;
    }

    public Builder idcard(String idcard) {
      this.idcard = idcard;
      return this;
    }

    public Builder idcardpic(String idcardpic) {
      this.idcardpic = idcardpic;
      return this;
    }

    public Builder idcardpic2(String idcardpic2) {
      this.idcardpic2 = idcardpic2;
      return this;
    }

    public Builder idcardpic3(String idcardpic3) {
      this.idcardpic3 = idcardpic3;
      return this;
    }

    public Builder idcardExpiredDate(String idcardExpiredDate) {
      this.idcardExpiredDate = idcardExpiredDate;
      return this;
    }

    public Builder createTime(String createTime) {
      this.createTime = createTime;
      return this;
    }

    public Builder createType(Integer createType) {
      this.createType = createType;
      return this;
    }

    /**
     * 创建渠道
     */
    public Builder createChannel(String createChannel) {
      this.createChannel = createChannel;
      return this;
    }

    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 与用户的关系
     */
    public Builder relation(String relation) {
      this.relation = relation;
      return this;
    }

    public Builder age(Integer age) {
      this.age = age;
      return this;
    }

    /**
     * 第一联系人手机号
     */
    public Builder contactsPhone(String contactsPhone) {
      this.contactsPhone = contactsPhone;
      return this;
    }

    /**
     * 第一联系人
     */
    public Builder contacts(String contacts) {
      this.contacts = contacts;
      return this;
    }

    /**
     * 与第一联系人关系
     */
    public Builder contactsRelation(String contactsRelation) {
      this.contactsRelation = contactsRelation;
      return this;
    }

    /**
     * 第二联系人手机号
     */
    public Builder contacts2Phone(String contacts2Phone) {
      this.contacts2Phone = contacts2Phone;
      return this;
    }

    /**
     * 第二联系人
     */
    public Builder contacts2(String contacts2) {
      this.contacts2 = contacts2;
      return this;
    }

    /**
     * 与第二联系人关系
     */
    public Builder contacts2Relation(String contacts2Relation) {
      this.contacts2Relation = contacts2Relation;
      return this;
    }

    /**
     * 身体状况描述
     */
    public Builder physicalState(String physicalState) {
      this.physicalState = physicalState;
      return this;
    }

    /**
     * 医院就诊卡号
     */
    public Builder medicalNO(String medicalNO) {
      this.medicalNO = medicalNO;
      return this;
    }

    /**
     * 行动能力 1-自理 2-半失能 3-失能
     */
    public Builder actAbility(Integer actAbility) {
      this.actAbility = actAbility;
      return this;
    }

    /**
     * 默认亲属
     */
    public Builder defaultUse(Long defaultUse) {
      this.defaultUse = defaultUse;
      return this;
    }

    /**
     * -1-已删除 0-默认
     */
    public Builder enable(Integer enable) {
      this.enable = enable;
      return this;
    }

    /**
     * 备注信息
     */
    public Builder remark(String remark) {
      this.remark = remark;
      return this;
    }

    /**
     * 医保类型
     */
    public Builder medicareType(Integer medicareType) {
      this.medicareType = medicareType;
      return this;
    }

    /**
     * 医保卡号
     */
    public Builder healthCareNO(String healthCareNO) {
      this.healthCareNO = healthCareNO;
      return this;
    }

    /**
     * 居住状况1-独居 2-与配偶/伴侣居住 3-与子女居住 4-与父母居住 5-与配偶和子女居住 6-与兄弟姐妹居住 7-与其他亲属居住 8-与非亲属关系的人居住 9-养老机构
     */
    public Builder dwelling(Integer dwelling) {
      this.dwelling = dwelling;
      return this;
    }

    /**
     * 职业类别 1-政府机关人员 2-事业单位人员 3-企业职工 4-个体户 5-自由职业 6-无业
     */
    public Builder professionType(Integer professionType) {
      this.professionType = professionType;
      return this;
    }

    /**
     * 收入来源 1-机关事业单位离退休金 2-城乡居民养老保险 3-供养人员补贴 4-低保金 5-子女抚养/补贴 6-亲友自助 7-其他
     */
    public Builder income(List<String> income) {
      Internal.checkElementsNotNull(income);
      this.income = income;
      return this;
    }

    /**
     * 子女状况 儿子个数
     */
    public Builder childrenStatus1(Integer childrenStatus1) {
      this.childrenStatus1 = childrenStatus1;
      return this;
    }

    /**
     * 子女状况 女儿个数
     */
    public Builder childrenStatus2(Integer childrenStatus2) {
      this.childrenStatus2 = childrenStatus2;
      return this;
    }

    /**
     * 信息采集渠道 本人 、家属 、病历 、医院诊断 、健康档案 、其他
     */
    public Builder infoChannel(List<String> infoChannel) {
      Internal.checkElementsNotNull(infoChannel);
      this.infoChannel = infoChannel;
      return this;
    }

    /**
     * 参与评估人员 本人 、子女 、亲属 、朋友 、居委会工作人员 、其他
     */
    public Builder assessMan(List<String> assessMan) {
      Internal.checkElementsNotNull(assessMan);
      this.assessMan = assessMan;
      return this;
    }

    /**
     * 住房性质 自有产权房 、租赁住房 、借住 、廉租房 、公租房 、其他
     */
    public Builder housingType(String housingType) {
      this.housingType = housingType;
      return this;
    }

    /**
     * 医疗类别 1-公费医疗 2-职工医保 3-居民医保 4-商业医疗保险 5-自费 6-其他
     */
    public Builder nurseType(Integer nurseType) {
      this.nurseType = nurseType;
      return this;
    }

    /**
     * 评估点id
     */
    public Builder evalId(Long evalId) {
      this.evalId = evalId;
      return this;
    }

    /**
     * 医保卡信息照片
     */
    public Builder healthCareImg(String healthCareImg) {
      this.healthCareImg = healthCareImg;
      return this;
    }

    /**
     * 参保人照片
     */
    public Builder kinsfolkImg(String kinsfolkImg) {
      this.kinsfolkImg = kinsfolkImg;
      return this;
    }

    /**
     * 人员类型 0-未设置 1-在职 2-退休
     */
    public Builder staffType(Integer staffType) {
      this.staffType = staffType;
      return this;
    }

    /**
     * 证件类型 0-身份证 1-护照 2-港澳通行证
     */
    public Builder papersType(Integer papersType) {
      this.papersType = papersType;
      return this;
    }

    @Override
    public Kinsfolk build() {
      return new Kinsfolk(kinsfolkId, userId, phone, fullName, sex, birthday, pic, nativeplace, province, city, district, address, language, religion, nation, height, weight, education, marriage, idcard, idcardpic, idcardpic2, idcardpic3, idcardExpiredDate, createTime, createType, createChannel, createStaffId, createStaffName, relation, age, contactsPhone, contacts, contactsRelation, contacts2Phone, contacts2, contacts2Relation, physicalState, medicalNO, actAbility, defaultUse, enable, remark, medicareType, healthCareNO, dwelling, professionType, income, childrenStatus1, childrenStatus2, infoChannel, assessMan, housingType, nurseType, evalId, healthCareImg, kinsfolkImg, staffType, papersType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Kinsfolk extends ProtoAdapter<Kinsfolk> {
    ProtoAdapter_Kinsfolk() {
      super(FieldEncoding.LENGTH_DELIMITED, Kinsfolk.class);
    }

    @Override
    public int encodedSize(Kinsfolk value) {
      return (value.kinsfolkId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.kinsfolkId) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.userId) : 0)
          + (value.phone != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.phone) : 0)
          + (value.fullName != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.fullName) : 0)
          + (value.sex != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.sex) : 0)
          + (value.birthday != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.birthday) : 0)
          + (value.pic != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.pic) : 0)
          + (value.nativeplace != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.nativeplace) : 0)
          + (value.province != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.province) : 0)
          + (value.city != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.city) : 0)
          + (value.district != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.district) : 0)
          + (value.address != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.address) : 0)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(13, value.language)
          + (value.religion != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.religion) : 0)
          + (value.nation != null ? ProtoAdapter.STRING.encodedSizeWithTag(15, value.nation) : 0)
          + (value.height != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.height) : 0)
          + (value.weight != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.weight) : 0)
          + (value.education != null ? ProtoAdapter.UINT32.encodedSizeWithTag(18, value.education) : 0)
          + (value.marriage != null ? ProtoAdapter.UINT32.encodedSizeWithTag(19, value.marriage) : 0)
          + (value.idcard != null ? ProtoAdapter.STRING.encodedSizeWithTag(20, value.idcard) : 0)
          + (value.idcardpic != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.idcardpic) : 0)
          + (value.idcardpic2 != null ? ProtoAdapter.STRING.encodedSizeWithTag(22, value.idcardpic2) : 0)
          + (value.idcardpic3 != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.idcardpic3) : 0)
          + (value.idcardExpiredDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(24, value.idcardExpiredDate) : 0)
          + (value.createTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(25, value.createTime) : 0)
          + (value.createType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(26, value.createType) : 0)
          + (value.createChannel != null ? ProtoAdapter.STRING.encodedSizeWithTag(27, value.createChannel) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(28, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(29, value.createStaffName) : 0)
          + (value.relation != null ? ProtoAdapter.STRING.encodedSizeWithTag(30, value.relation) : 0)
          + (value.age != null ? ProtoAdapter.UINT32.encodedSizeWithTag(31, value.age) : 0)
          + (value.contactsPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(32, value.contactsPhone) : 0)
          + (value.contacts != null ? ProtoAdapter.STRING.encodedSizeWithTag(33, value.contacts) : 0)
          + (value.contactsRelation != null ? ProtoAdapter.STRING.encodedSizeWithTag(34, value.contactsRelation) : 0)
          + (value.contacts2Phone != null ? ProtoAdapter.STRING.encodedSizeWithTag(35, value.contacts2Phone) : 0)
          + (value.contacts2 != null ? ProtoAdapter.STRING.encodedSizeWithTag(36, value.contacts2) : 0)
          + (value.contacts2Relation != null ? ProtoAdapter.STRING.encodedSizeWithTag(37, value.contacts2Relation) : 0)
          + (value.physicalState != null ? ProtoAdapter.STRING.encodedSizeWithTag(38, value.physicalState) : 0)
          + (value.medicalNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(39, value.medicalNO) : 0)
          + (value.actAbility != null ? ProtoAdapter.UINT32.encodedSizeWithTag(40, value.actAbility) : 0)
          + (value.defaultUse != null ? ProtoAdapter.UINT64.encodedSizeWithTag(41, value.defaultUse) : 0)
          + (value.enable != null ? ProtoAdapter.INT32.encodedSizeWithTag(42, value.enable) : 0)
          + (value.remark != null ? ProtoAdapter.STRING.encodedSizeWithTag(43, value.remark) : 0)
          + (value.medicareType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(44, value.medicareType) : 0)
          + (value.healthCareNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(45, value.healthCareNO) : 0)
          + (value.dwelling != null ? ProtoAdapter.UINT32.encodedSizeWithTag(46, value.dwelling) : 0)
          + (value.professionType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(47, value.professionType) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(48, value.income)
          + (value.childrenStatus1 != null ? ProtoAdapter.UINT32.encodedSizeWithTag(49, value.childrenStatus1) : 0)
          + (value.childrenStatus2 != null ? ProtoAdapter.UINT32.encodedSizeWithTag(50, value.childrenStatus2) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(51, value.infoChannel)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(52, value.assessMan)
          + (value.housingType != null ? ProtoAdapter.STRING.encodedSizeWithTag(53, value.housingType) : 0)
          + (value.nurseType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(54, value.nurseType) : 0)
          + (value.evalId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(55, value.evalId) : 0)
          + (value.healthCareImg != null ? ProtoAdapter.STRING.encodedSizeWithTag(56, value.healthCareImg) : 0)
          + (value.kinsfolkImg != null ? ProtoAdapter.STRING.encodedSizeWithTag(57, value.kinsfolkImg) : 0)
          + (value.staffType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(58, value.staffType) : 0)
          + (value.papersType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(59, value.papersType) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Kinsfolk value) throws IOException {
      if (value.kinsfolkId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.kinsfolkId);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.userId);
      if (value.phone != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.phone);
      if (value.fullName != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.fullName);
      if (value.sex != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.sex);
      if (value.birthday != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.birthday);
      if (value.pic != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.pic);
      if (value.nativeplace != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.nativeplace);
      if (value.province != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.province);
      if (value.city != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.city);
      if (value.district != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.district);
      if (value.address != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.address);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 13, value.language);
      if (value.religion != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.religion);
      if (value.nation != null) ProtoAdapter.STRING.encodeWithTag(writer, 15, value.nation);
      if (value.height != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.height);
      if (value.weight != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.weight);
      if (value.education != null) ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.education);
      if (value.marriage != null) ProtoAdapter.UINT32.encodeWithTag(writer, 19, value.marriage);
      if (value.idcard != null) ProtoAdapter.STRING.encodeWithTag(writer, 20, value.idcard);
      if (value.idcardpic != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.idcardpic);
      if (value.idcardpic2 != null) ProtoAdapter.STRING.encodeWithTag(writer, 22, value.idcardpic2);
      if (value.idcardpic3 != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.idcardpic3);
      if (value.idcardExpiredDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 24, value.idcardExpiredDate);
      if (value.createTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 25, value.createTime);
      if (value.createType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 26, value.createType);
      if (value.createChannel != null) ProtoAdapter.STRING.encodeWithTag(writer, 27, value.createChannel);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 28, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 29, value.createStaffName);
      if (value.relation != null) ProtoAdapter.STRING.encodeWithTag(writer, 30, value.relation);
      if (value.age != null) ProtoAdapter.UINT32.encodeWithTag(writer, 31, value.age);
      if (value.contactsPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 32, value.contactsPhone);
      if (value.contacts != null) ProtoAdapter.STRING.encodeWithTag(writer, 33, value.contacts);
      if (value.contactsRelation != null) ProtoAdapter.STRING.encodeWithTag(writer, 34, value.contactsRelation);
      if (value.contacts2Phone != null) ProtoAdapter.STRING.encodeWithTag(writer, 35, value.contacts2Phone);
      if (value.contacts2 != null) ProtoAdapter.STRING.encodeWithTag(writer, 36, value.contacts2);
      if (value.contacts2Relation != null) ProtoAdapter.STRING.encodeWithTag(writer, 37, value.contacts2Relation);
      if (value.physicalState != null) ProtoAdapter.STRING.encodeWithTag(writer, 38, value.physicalState);
      if (value.medicalNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 39, value.medicalNO);
      if (value.actAbility != null) ProtoAdapter.UINT32.encodeWithTag(writer, 40, value.actAbility);
      if (value.defaultUse != null) ProtoAdapter.UINT64.encodeWithTag(writer, 41, value.defaultUse);
      if (value.enable != null) ProtoAdapter.INT32.encodeWithTag(writer, 42, value.enable);
      if (value.remark != null) ProtoAdapter.STRING.encodeWithTag(writer, 43, value.remark);
      if (value.medicareType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 44, value.medicareType);
      if (value.healthCareNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 45, value.healthCareNO);
      if (value.dwelling != null) ProtoAdapter.UINT32.encodeWithTag(writer, 46, value.dwelling);
      if (value.professionType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 47, value.professionType);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 48, value.income);
      if (value.childrenStatus1 != null) ProtoAdapter.UINT32.encodeWithTag(writer, 49, value.childrenStatus1);
      if (value.childrenStatus2 != null) ProtoAdapter.UINT32.encodeWithTag(writer, 50, value.childrenStatus2);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 51, value.infoChannel);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 52, value.assessMan);
      if (value.housingType != null) ProtoAdapter.STRING.encodeWithTag(writer, 53, value.housingType);
      if (value.nurseType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 54, value.nurseType);
      if (value.evalId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 55, value.evalId);
      if (value.healthCareImg != null) ProtoAdapter.STRING.encodeWithTag(writer, 56, value.healthCareImg);
      if (value.kinsfolkImg != null) ProtoAdapter.STRING.encodeWithTag(writer, 57, value.kinsfolkImg);
      if (value.staffType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 58, value.staffType);
      if (value.papersType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 59, value.papersType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Kinsfolk decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.kinsfolkId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.phone(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.fullName(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.sex(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.birthday(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.pic(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.nativeplace(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.province(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.city(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.district(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.address(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.language.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.religion(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.nation(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.height(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.weight(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.education(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.marriage(ProtoAdapter.UINT32.decode(reader)); break;
          case 20: builder.idcard(ProtoAdapter.STRING.decode(reader)); break;
          case 21: builder.idcardpic(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.idcardpic2(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.idcardpic3(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.idcardExpiredDate(ProtoAdapter.STRING.decode(reader)); break;
          case 25: builder.createTime(ProtoAdapter.STRING.decode(reader)); break;
          case 26: builder.createType(ProtoAdapter.UINT32.decode(reader)); break;
          case 27: builder.createChannel(ProtoAdapter.STRING.decode(reader)); break;
          case 28: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 29: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 30: builder.relation(ProtoAdapter.STRING.decode(reader)); break;
          case 31: builder.age(ProtoAdapter.UINT32.decode(reader)); break;
          case 32: builder.contactsPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 33: builder.contacts(ProtoAdapter.STRING.decode(reader)); break;
          case 34: builder.contactsRelation(ProtoAdapter.STRING.decode(reader)); break;
          case 35: builder.contacts2Phone(ProtoAdapter.STRING.decode(reader)); break;
          case 36: builder.contacts2(ProtoAdapter.STRING.decode(reader)); break;
          case 37: builder.contacts2Relation(ProtoAdapter.STRING.decode(reader)); break;
          case 38: builder.physicalState(ProtoAdapter.STRING.decode(reader)); break;
          case 39: builder.medicalNO(ProtoAdapter.STRING.decode(reader)); break;
          case 40: builder.actAbility(ProtoAdapter.UINT32.decode(reader)); break;
          case 41: builder.defaultUse(ProtoAdapter.UINT64.decode(reader)); break;
          case 42: builder.enable(ProtoAdapter.INT32.decode(reader)); break;
          case 43: builder.remark(ProtoAdapter.STRING.decode(reader)); break;
          case 44: builder.medicareType(ProtoAdapter.UINT32.decode(reader)); break;
          case 45: builder.healthCareNO(ProtoAdapter.STRING.decode(reader)); break;
          case 46: builder.dwelling(ProtoAdapter.UINT32.decode(reader)); break;
          case 47: builder.professionType(ProtoAdapter.UINT32.decode(reader)); break;
          case 48: builder.income.add(ProtoAdapter.STRING.decode(reader)); break;
          case 49: builder.childrenStatus1(ProtoAdapter.UINT32.decode(reader)); break;
          case 50: builder.childrenStatus2(ProtoAdapter.UINT32.decode(reader)); break;
          case 51: builder.infoChannel.add(ProtoAdapter.STRING.decode(reader)); break;
          case 52: builder.assessMan.add(ProtoAdapter.STRING.decode(reader)); break;
          case 53: builder.housingType(ProtoAdapter.STRING.decode(reader)); break;
          case 54: builder.nurseType(ProtoAdapter.UINT32.decode(reader)); break;
          case 55: builder.evalId(ProtoAdapter.UINT64.decode(reader)); break;
          case 56: builder.healthCareImg(ProtoAdapter.STRING.decode(reader)); break;
          case 57: builder.kinsfolkImg(ProtoAdapter.STRING.decode(reader)); break;
          case 58: builder.staffType(ProtoAdapter.UINT32.decode(reader)); break;
          case 59: builder.papersType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Kinsfolk redact(Kinsfolk value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
