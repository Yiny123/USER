// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 579:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 订单结算后校正表
 */
public final class OrderCheck extends Message<OrderCheck, OrderCheck.Builder> {
  public static final ProtoAdapter<OrderCheck> ADAPTER = new ProtoAdapter_OrderCheck();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_KINSID = 0L;

  public static final String DEFAULT_KINSNAME = "";

  public static final Long DEFAULT_ORGID = 0L;

  public static final Long DEFAULT_BRANCHID = 0L;

  public static final Integer DEFAULT_STATUS = 0;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_SETTLETIME = 0L;

  public static final Long DEFAULT_CHECKTIME = 0L;

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 订单id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 被陪护人id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kinsId;

  /**
   * 被陪护人名
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kinsName;

  /**
   * 机构id
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long orgId;

  /**
   * 科室id
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long branchId;

  /**
   * 0-未结算 1-已结算
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer status;

  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 结算时间
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long settleTime;

  /**
   * 校正时间（校正后支付或校正后退款时间）
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long checkTime;

  /**
   * 创建员工ID
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 创建员工名称
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  public OrderCheck(Long id, String orderId, Long kinsId, String kinsName, Long orgId, Long branchId, Integer status, Long createTime, Long settleTime, Long checkTime, Long createStaffId, String createStaffName) {
    this(id, orderId, kinsId, kinsName, orgId, branchId, status, createTime, settleTime, checkTime, createStaffId, createStaffName, ByteString.EMPTY);
  }

  public OrderCheck(Long id, String orderId, Long kinsId, String kinsName, Long orgId, Long branchId, Integer status, Long createTime, Long settleTime, Long checkTime, Long createStaffId, String createStaffName, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.orderId = orderId;
    this.kinsId = kinsId;
    this.kinsName = kinsName;
    this.orgId = orgId;
    this.branchId = branchId;
    this.status = status;
    this.createTime = createTime;
    this.settleTime = settleTime;
    this.checkTime = checkTime;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.orderId = orderId;
    builder.kinsId = kinsId;
    builder.kinsName = kinsName;
    builder.orgId = orgId;
    builder.branchId = branchId;
    builder.status = status;
    builder.createTime = createTime;
    builder.settleTime = settleTime;
    builder.checkTime = checkTime;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OrderCheck)) return false;
    OrderCheck o = (OrderCheck) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(kinsId, o.kinsId)
        && Internal.equals(kinsName, o.kinsName)
        && Internal.equals(orgId, o.orgId)
        && Internal.equals(branchId, o.branchId)
        && Internal.equals(status, o.status)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(settleTime, o.settleTime)
        && Internal.equals(checkTime, o.checkTime)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (kinsId != null ? kinsId.hashCode() : 0);
      result = result * 37 + (kinsName != null ? kinsName.hashCode() : 0);
      result = result * 37 + (orgId != null ? orgId.hashCode() : 0);
      result = result * 37 + (branchId != null ? branchId.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (settleTime != null ? settleTime.hashCode() : 0);
      result = result * 37 + (checkTime != null ? checkTime.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (kinsId != null) builder.append(", kinsId=").append(kinsId);
    if (kinsName != null) builder.append(", kinsName=").append(kinsName);
    if (orgId != null) builder.append(", orgId=").append(orgId);
    if (branchId != null) builder.append(", branchId=").append(branchId);
    if (status != null) builder.append(", status=").append(status);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (settleTime != null) builder.append(", settleTime=").append(settleTime);
    if (checkTime != null) builder.append(", checkTime=").append(checkTime);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    return builder.replace(0, 2, "OrderCheck{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<OrderCheck, Builder> {
    public Long id;

    public String orderId;

    public Long kinsId;

    public String kinsName;

    public Long orgId;

    public Long branchId;

    public Integer status;

    public Long createTime;

    public Long settleTime;

    public Long checkTime;

    public Long createStaffId;

    public String createStaffName;

    public Builder() {
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 订单id
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 被陪护人id
     */
    public Builder kinsId(Long kinsId) {
      this.kinsId = kinsId;
      return this;
    }

    /**
     * 被陪护人名
     */
    public Builder kinsName(String kinsName) {
      this.kinsName = kinsName;
      return this;
    }

    /**
     * 机构id
     */
    public Builder orgId(Long orgId) {
      this.orgId = orgId;
      return this;
    }

    /**
     * 科室id
     */
    public Builder branchId(Long branchId) {
      this.branchId = branchId;
      return this;
    }

    /**
     * 0-未结算 1-已结算
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 结算时间
     */
    public Builder settleTime(Long settleTime) {
      this.settleTime = settleTime;
      return this;
    }

    /**
     * 校正时间（校正后支付或校正后退款时间）
     */
    public Builder checkTime(Long checkTime) {
      this.checkTime = checkTime;
      return this;
    }

    /**
     * 创建员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 创建员工名称
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    @Override
    public OrderCheck build() {
      return new OrderCheck(id, orderId, kinsId, kinsName, orgId, branchId, status, createTime, settleTime, checkTime, createStaffId, createStaffName, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OrderCheck extends ProtoAdapter<OrderCheck> {
    ProtoAdapter_OrderCheck() {
      super(FieldEncoding.LENGTH_DELIMITED, OrderCheck.class);
    }

    @Override
    public int encodedSize(OrderCheck value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.orderId) : 0)
          + (value.kinsId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.kinsId) : 0)
          + (value.kinsName != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.kinsName) : 0)
          + (value.orgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(5, value.orgId) : 0)
          + (value.branchId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(6, value.branchId) : 0)
          + (value.status != null ? ProtoAdapter.UINT32.encodedSizeWithTag(7, value.status) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.createTime) : 0)
          + (value.settleTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.settleTime) : 0)
          + (value.checkTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(10, value.checkTime) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(11, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.createStaffName) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OrderCheck value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.orderId);
      if (value.kinsId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.kinsId);
      if (value.kinsName != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.kinsName);
      if (value.orgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.orgId);
      if (value.branchId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.branchId);
      if (value.status != null) ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.status);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.createTime);
      if (value.settleTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.settleTime);
      if (value.checkTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 10, value.checkTime);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.createStaffName);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OrderCheck decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.kinsId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.kinsName(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.orgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.branchId(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.status(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.settleTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.checkTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 11: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 12: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OrderCheck redact(OrderCheck value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
