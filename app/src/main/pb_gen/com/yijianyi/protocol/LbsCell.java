// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Lbs.proto at 20:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class LbsCell extends Message<LbsCell, LbsCell.Builder> {
  public static final ProtoAdapter<LbsCell> ADAPTER = new ProtoAdapter_LbsCell();

  private static final long serialVersionUID = 0L;

  public static final Integer DEFAULT_MCC = 0;

  public static final Integer DEFAULT_MNC = 0;

  public static final Integer DEFAULT_LAC = 0;

  public static final Integer DEFAULT_CELLID = 0;

  public static final Integer DEFAULT_RSSI = 0;

  /**
   * mcc	国家码 (MCC for GSM and CDMA)
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer mcc;

  /**
   * mnc	网络码 (MNC for GSM, SystemID for CDMA)
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer mnc;

  /**
   * lac	小区号 (LAC for GSM, NetworkID for CDMA)
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer lac;

  /**
   * cellid	基站ID (CID for GSM, BaseStationID for CDMA)
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer cellId;

  /**
   * rssi	信号强度（dBm）
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer rssi;

  public LbsCell(Integer mcc, Integer mnc, Integer lac, Integer cellId, Integer rssi) {
    this(mcc, mnc, lac, cellId, rssi, ByteString.EMPTY);
  }

  public LbsCell(Integer mcc, Integer mnc, Integer lac, Integer cellId, Integer rssi, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.mcc = mcc;
    this.mnc = mnc;
    this.lac = lac;
    this.cellId = cellId;
    this.rssi = rssi;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.mcc = mcc;
    builder.mnc = mnc;
    builder.lac = lac;
    builder.cellId = cellId;
    builder.rssi = rssi;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LbsCell)) return false;
    LbsCell o = (LbsCell) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(mcc, o.mcc)
        && Internal.equals(mnc, o.mnc)
        && Internal.equals(lac, o.lac)
        && Internal.equals(cellId, o.cellId)
        && Internal.equals(rssi, o.rssi);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (mcc != null ? mcc.hashCode() : 0);
      result = result * 37 + (mnc != null ? mnc.hashCode() : 0);
      result = result * 37 + (lac != null ? lac.hashCode() : 0);
      result = result * 37 + (cellId != null ? cellId.hashCode() : 0);
      result = result * 37 + (rssi != null ? rssi.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (mcc != null) builder.append(", mcc=").append(mcc);
    if (mnc != null) builder.append(", mnc=").append(mnc);
    if (lac != null) builder.append(", lac=").append(lac);
    if (cellId != null) builder.append(", cellId=").append(cellId);
    if (rssi != null) builder.append(", rssi=").append(rssi);
    return builder.replace(0, 2, "LbsCell{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<LbsCell, Builder> {
    public Integer mcc;

    public Integer mnc;

    public Integer lac;

    public Integer cellId;

    public Integer rssi;

    public Builder() {
    }

    /**
     * mcc	国家码 (MCC for GSM and CDMA)
     */
    public Builder mcc(Integer mcc) {
      this.mcc = mcc;
      return this;
    }

    /**
     * mnc	网络码 (MNC for GSM, SystemID for CDMA)
     */
    public Builder mnc(Integer mnc) {
      this.mnc = mnc;
      return this;
    }

    /**
     * lac	小区号 (LAC for GSM, NetworkID for CDMA)
     */
    public Builder lac(Integer lac) {
      this.lac = lac;
      return this;
    }

    /**
     * cellid	基站ID (CID for GSM, BaseStationID for CDMA)
     */
    public Builder cellId(Integer cellId) {
      this.cellId = cellId;
      return this;
    }

    /**
     * rssi	信号强度（dBm）
     */
    public Builder rssi(Integer rssi) {
      this.rssi = rssi;
      return this;
    }

    @Override
    public LbsCell build() {
      return new LbsCell(mcc, mnc, lac, cellId, rssi, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_LbsCell extends ProtoAdapter<LbsCell> {
    ProtoAdapter_LbsCell() {
      super(FieldEncoding.LENGTH_DELIMITED, LbsCell.class);
    }

    @Override
    public int encodedSize(LbsCell value) {
      return (value.mcc != null ? ProtoAdapter.UINT32.encodedSizeWithTag(1, value.mcc) : 0)
          + (value.mnc != null ? ProtoAdapter.UINT32.encodedSizeWithTag(2, value.mnc) : 0)
          + (value.lac != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.lac) : 0)
          + (value.cellId != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.cellId) : 0)
          + (value.rssi != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.rssi) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, LbsCell value) throws IOException {
      if (value.mcc != null) ProtoAdapter.UINT32.encodeWithTag(writer, 1, value.mcc);
      if (value.mnc != null) ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.mnc);
      if (value.lac != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.lac);
      if (value.cellId != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.cellId);
      if (value.rssi != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.rssi);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public LbsCell decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.mcc(ProtoAdapter.UINT32.decode(reader)); break;
          case 2: builder.mnc(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.lac(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.cellId(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.rssi(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public LbsCell redact(LbsCell value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
