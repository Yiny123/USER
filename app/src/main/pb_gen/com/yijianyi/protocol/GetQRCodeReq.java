// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 1376:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 获取二维码
 */
public final class GetQRCodeReq extends Message<GetQRCodeReq, GetQRCodeReq.Builder> {
  public static final ProtoAdapter<GetQRCodeReq> ADAPTER = new ProtoAdapter_GetQRCodeReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_WIDTH = "";

  public static final String DEFAULT_HEIGHT = "";

  public static final String DEFAULT_PURPOSE = "";

  public static final String DEFAULT_FORMAT = "";

  public static final Integer DEFAULT_URLTYPE = 0;

  public static final String DEFAULT_ORDERID = "";

  /**
   * 宽度
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String width;

  /**
   * 高度
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String height;

  /**
   * 类型  LoginQR - 登录	PayQR - 支付
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String purpose;

  /**
   * 图片类型
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String format;

  /**
   * 链接类型 0 - 不做操作（登录） 1 - 跳订单详情（支付预付款） 2 - 跳结算页 3 - 跳充值预付款    4 - 跳订单详情(跟中间支付)
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer urlType;

  /**
   * 订单id
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  public GetQRCodeReq(String width, String height, String purpose, String format, Integer urlType, String orderId) {
    this(width, height, purpose, format, urlType, orderId, ByteString.EMPTY);
  }

  public GetQRCodeReq(String width, String height, String purpose, String format, Integer urlType, String orderId, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.width = width;
    this.height = height;
    this.purpose = purpose;
    this.format = format;
    this.urlType = urlType;
    this.orderId = orderId;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.width = width;
    builder.height = height;
    builder.purpose = purpose;
    builder.format = format;
    builder.urlType = urlType;
    builder.orderId = orderId;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetQRCodeReq)) return false;
    GetQRCodeReq o = (GetQRCodeReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(width, o.width)
        && Internal.equals(height, o.height)
        && Internal.equals(purpose, o.purpose)
        && Internal.equals(format, o.format)
        && Internal.equals(urlType, o.urlType)
        && Internal.equals(orderId, o.orderId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (width != null ? width.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      result = result * 37 + (purpose != null ? purpose.hashCode() : 0);
      result = result * 37 + (format != null ? format.hashCode() : 0);
      result = result * 37 + (urlType != null ? urlType.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (width != null) builder.append(", width=").append(width);
    if (height != null) builder.append(", height=").append(height);
    if (purpose != null) builder.append(", purpose=").append(purpose);
    if (format != null) builder.append(", format=").append(format);
    if (urlType != null) builder.append(", urlType=").append(urlType);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    return builder.replace(0, 2, "GetQRCodeReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetQRCodeReq, Builder> {
    public String width;

    public String height;

    public String purpose;

    public String format;

    public Integer urlType;

    public String orderId;

    public Builder() {
    }

    /**
     * 宽度
     */
    public Builder width(String width) {
      this.width = width;
      return this;
    }

    /**
     * 高度
     */
    public Builder height(String height) {
      this.height = height;
      return this;
    }

    /**
     * 类型  LoginQR - 登录	PayQR - 支付
     */
    public Builder purpose(String purpose) {
      this.purpose = purpose;
      return this;
    }

    /**
     * 图片类型
     */
    public Builder format(String format) {
      this.format = format;
      return this;
    }

    /**
     * 链接类型 0 - 不做操作（登录） 1 - 跳订单详情（支付预付款） 2 - 跳结算页 3 - 跳充值预付款    4 - 跳订单详情(跟中间支付)
     */
    public Builder urlType(Integer urlType) {
      this.urlType = urlType;
      return this;
    }

    /**
     * 订单id
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    @Override
    public GetQRCodeReq build() {
      return new GetQRCodeReq(width, height, purpose, format, urlType, orderId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetQRCodeReq extends ProtoAdapter<GetQRCodeReq> {
    ProtoAdapter_GetQRCodeReq() {
      super(FieldEncoding.LENGTH_DELIMITED, GetQRCodeReq.class);
    }

    @Override
    public int encodedSize(GetQRCodeReq value) {
      return (value.width != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.width) : 0)
          + (value.height != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.height) : 0)
          + (value.purpose != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.purpose) : 0)
          + (value.format != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.format) : 0)
          + (value.urlType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.urlType) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.orderId) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetQRCodeReq value) throws IOException {
      if (value.width != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.width);
      if (value.height != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.height);
      if (value.purpose != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.purpose);
      if (value.format != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.format);
      if (value.urlType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.urlType);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.orderId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetQRCodeReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.width(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.height(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.purpose(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.format(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.urlType(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetQRCodeReq redact(GetQRCodeReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
