// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 428:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 用于支付详情页展示套餐明细
 */
public final class OrderItemVO2 extends Message<OrderItemVO2, OrderItemVO2.Builder> {
  public static final ProtoAdapter<OrderItemVO2> ADAPTER = new ProtoAdapter_OrderItemVO2();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_SERVICE = "";

  public static final Integer DEFAULT_SERVICEDAYS = 0;

  public static final Long DEFAULT_PAIDFEE = 0L;

  public static final String DEFAULT_PAIDFEE_YUAN = "";

  public static final Long DEFAULT_NEEDPAY = 0L;

  public static final String DEFAULT_NEEDPAY_YUAN = "";

  public static final Long DEFAULT_TOTALCOST = 0L;

  public static final String DEFAULT_SERVICEDATE = "";

  public static final Boolean DEFAULT_ISINSURE = false;

  public static final Long DEFAULT_PRICEID = 0L;

  public static final String DEFAULT_SERVICESTARTDATE = "";

  public static final String DEFAULT_SERVICEENDDATE = "";

  public static final String DEFAULT_TOTALCOSTSTR = "";

  public static final String DEFAULT_PRICEDESC = "";

  public static final Double DEFAULT_BASICSERVICEDAYS = 0.0d;

  public static final Integer DEFAULT_ITEMTYPE = 0;

  public static final Integer DEFAULT_SERVICESUBJOINTYPE = 0;

  public static final Integer DEFAULT_PAIDPAYNUM = 0;

  public static final Long DEFAULT_PRICE = 0L;

  public static final Integer DEFAULT_SERVICEUNIT = 0;

  public static final Integer DEFAULT_SUBJOINGROUPINGTYPE = 0;

  /**
   * 服务内容
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String service;

  /**
   * 服务次数
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer serviceDays;

  /**
   * 已付金额
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long paidFee;

  /**
   * 转换成元
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String paidFee_yuan;

  /**
   * 未付金额
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long needPay;

  /**
   * 转换成元
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String needPay_yuan;

  /**
   * 总费用
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long totalCost;

  /**
   * 消费时间
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceDate;

  /**
   * 是否是长护险医疗附近项
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isInsure;

  /**
   * 服务id
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long priceId;

  /**
   * 服务开始时间
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceStartDate;

  /**
   * 服务结束时间
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceEndDate;

  /**
   * 总费用转换为元
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String totalCostStr;

  /**
   * 服务单价
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String PriceDesc;

  /**
   * 基础服务天数
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double basicServiceDays;

  /**
   * saas中间支付服务开始结束时间
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> startEndDateDays;

  /**
   * 服务类型
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer itemType;

  /**
   * 附加项类型 0-普通附加项 1-金额调整 2-陪人床
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer serviceSubjoinType;

  /**
   * 已支付数量
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer paidPayNum;

  /**
   * 服务单价
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long Price;

  /**
   * 服务单位 1-次 2-小时 3-天  4-月
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer serviceUnit;

  /**
   * 附加项子类型 1-专陪 2-多陪 3-夜陪
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer subjoinGroupingType;

  public OrderItemVO2(String service, Integer serviceDays, Long paidFee, String paidFee_yuan, Long needPay, String needPay_yuan, Long totalCost, String serviceDate, Boolean isInsure, Long priceId, String serviceStartDate, String serviceEndDate, String totalCostStr, String PriceDesc, Double basicServiceDays, List<String> startEndDateDays, Integer itemType, Integer serviceSubjoinType, Integer paidPayNum, Long Price, Integer serviceUnit, Integer subjoinGroupingType) {
    this(service, serviceDays, paidFee, paidFee_yuan, needPay, needPay_yuan, totalCost, serviceDate, isInsure, priceId, serviceStartDate, serviceEndDate, totalCostStr, PriceDesc, basicServiceDays, startEndDateDays, itemType, serviceSubjoinType, paidPayNum, Price, serviceUnit, subjoinGroupingType, ByteString.EMPTY);
  }

  public OrderItemVO2(String service, Integer serviceDays, Long paidFee, String paidFee_yuan, Long needPay, String needPay_yuan, Long totalCost, String serviceDate, Boolean isInsure, Long priceId, String serviceStartDate, String serviceEndDate, String totalCostStr, String PriceDesc, Double basicServiceDays, List<String> startEndDateDays, Integer itemType, Integer serviceSubjoinType, Integer paidPayNum, Long Price, Integer serviceUnit, Integer subjoinGroupingType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.service = service;
    this.serviceDays = serviceDays;
    this.paidFee = paidFee;
    this.paidFee_yuan = paidFee_yuan;
    this.needPay = needPay;
    this.needPay_yuan = needPay_yuan;
    this.totalCost = totalCost;
    this.serviceDate = serviceDate;
    this.isInsure = isInsure;
    this.priceId = priceId;
    this.serviceStartDate = serviceStartDate;
    this.serviceEndDate = serviceEndDate;
    this.totalCostStr = totalCostStr;
    this.PriceDesc = PriceDesc;
    this.basicServiceDays = basicServiceDays;
    this.startEndDateDays = Internal.immutableCopyOf("startEndDateDays", startEndDateDays);
    this.itemType = itemType;
    this.serviceSubjoinType = serviceSubjoinType;
    this.paidPayNum = paidPayNum;
    this.Price = Price;
    this.serviceUnit = serviceUnit;
    this.subjoinGroupingType = subjoinGroupingType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.service = service;
    builder.serviceDays = serviceDays;
    builder.paidFee = paidFee;
    builder.paidFee_yuan = paidFee_yuan;
    builder.needPay = needPay;
    builder.needPay_yuan = needPay_yuan;
    builder.totalCost = totalCost;
    builder.serviceDate = serviceDate;
    builder.isInsure = isInsure;
    builder.priceId = priceId;
    builder.serviceStartDate = serviceStartDate;
    builder.serviceEndDate = serviceEndDate;
    builder.totalCostStr = totalCostStr;
    builder.PriceDesc = PriceDesc;
    builder.basicServiceDays = basicServiceDays;
    builder.startEndDateDays = Internal.copyOf("startEndDateDays", startEndDateDays);
    builder.itemType = itemType;
    builder.serviceSubjoinType = serviceSubjoinType;
    builder.paidPayNum = paidPayNum;
    builder.Price = Price;
    builder.serviceUnit = serviceUnit;
    builder.subjoinGroupingType = subjoinGroupingType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OrderItemVO2)) return false;
    OrderItemVO2 o = (OrderItemVO2) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(service, o.service)
        && Internal.equals(serviceDays, o.serviceDays)
        && Internal.equals(paidFee, o.paidFee)
        && Internal.equals(paidFee_yuan, o.paidFee_yuan)
        && Internal.equals(needPay, o.needPay)
        && Internal.equals(needPay_yuan, o.needPay_yuan)
        && Internal.equals(totalCost, o.totalCost)
        && Internal.equals(serviceDate, o.serviceDate)
        && Internal.equals(isInsure, o.isInsure)
        && Internal.equals(priceId, o.priceId)
        && Internal.equals(serviceStartDate, o.serviceStartDate)
        && Internal.equals(serviceEndDate, o.serviceEndDate)
        && Internal.equals(totalCostStr, o.totalCostStr)
        && Internal.equals(PriceDesc, o.PriceDesc)
        && Internal.equals(basicServiceDays, o.basicServiceDays)
        && startEndDateDays.equals(o.startEndDateDays)
        && Internal.equals(itemType, o.itemType)
        && Internal.equals(serviceSubjoinType, o.serviceSubjoinType)
        && Internal.equals(paidPayNum, o.paidPayNum)
        && Internal.equals(Price, o.Price)
        && Internal.equals(serviceUnit, o.serviceUnit)
        && Internal.equals(subjoinGroupingType, o.subjoinGroupingType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (service != null ? service.hashCode() : 0);
      result = result * 37 + (serviceDays != null ? serviceDays.hashCode() : 0);
      result = result * 37 + (paidFee != null ? paidFee.hashCode() : 0);
      result = result * 37 + (paidFee_yuan != null ? paidFee_yuan.hashCode() : 0);
      result = result * 37 + (needPay != null ? needPay.hashCode() : 0);
      result = result * 37 + (needPay_yuan != null ? needPay_yuan.hashCode() : 0);
      result = result * 37 + (totalCost != null ? totalCost.hashCode() : 0);
      result = result * 37 + (serviceDate != null ? serviceDate.hashCode() : 0);
      result = result * 37 + (isInsure != null ? isInsure.hashCode() : 0);
      result = result * 37 + (priceId != null ? priceId.hashCode() : 0);
      result = result * 37 + (serviceStartDate != null ? serviceStartDate.hashCode() : 0);
      result = result * 37 + (serviceEndDate != null ? serviceEndDate.hashCode() : 0);
      result = result * 37 + (totalCostStr != null ? totalCostStr.hashCode() : 0);
      result = result * 37 + (PriceDesc != null ? PriceDesc.hashCode() : 0);
      result = result * 37 + (basicServiceDays != null ? basicServiceDays.hashCode() : 0);
      result = result * 37 + startEndDateDays.hashCode();
      result = result * 37 + (itemType != null ? itemType.hashCode() : 0);
      result = result * 37 + (serviceSubjoinType != null ? serviceSubjoinType.hashCode() : 0);
      result = result * 37 + (paidPayNum != null ? paidPayNum.hashCode() : 0);
      result = result * 37 + (Price != null ? Price.hashCode() : 0);
      result = result * 37 + (serviceUnit != null ? serviceUnit.hashCode() : 0);
      result = result * 37 + (subjoinGroupingType != null ? subjoinGroupingType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (service != null) builder.append(", service=").append(service);
    if (serviceDays != null) builder.append(", serviceDays=").append(serviceDays);
    if (paidFee != null) builder.append(", paidFee=").append(paidFee);
    if (paidFee_yuan != null) builder.append(", paidFee_yuan=").append(paidFee_yuan);
    if (needPay != null) builder.append(", needPay=").append(needPay);
    if (needPay_yuan != null) builder.append(", needPay_yuan=").append(needPay_yuan);
    if (totalCost != null) builder.append(", totalCost=").append(totalCost);
    if (serviceDate != null) builder.append(", serviceDate=").append(serviceDate);
    if (isInsure != null) builder.append(", isInsure=").append(isInsure);
    if (priceId != null) builder.append(", priceId=").append(priceId);
    if (serviceStartDate != null) builder.append(", serviceStartDate=").append(serviceStartDate);
    if (serviceEndDate != null) builder.append(", serviceEndDate=").append(serviceEndDate);
    if (totalCostStr != null) builder.append(", totalCostStr=").append(totalCostStr);
    if (PriceDesc != null) builder.append(", PriceDesc=").append(PriceDesc);
    if (basicServiceDays != null) builder.append(", basicServiceDays=").append(basicServiceDays);
    if (!startEndDateDays.isEmpty()) builder.append(", startEndDateDays=").append(startEndDateDays);
    if (itemType != null) builder.append(", itemType=").append(itemType);
    if (serviceSubjoinType != null) builder.append(", serviceSubjoinType=").append(serviceSubjoinType);
    if (paidPayNum != null) builder.append(", paidPayNum=").append(paidPayNum);
    if (Price != null) builder.append(", Price=").append(Price);
    if (serviceUnit != null) builder.append(", serviceUnit=").append(serviceUnit);
    if (subjoinGroupingType != null) builder.append(", subjoinGroupingType=").append(subjoinGroupingType);
    return builder.replace(0, 2, "OrderItemVO2{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<OrderItemVO2, Builder> {
    public String service;

    public Integer serviceDays;

    public Long paidFee;

    public String paidFee_yuan;

    public Long needPay;

    public String needPay_yuan;

    public Long totalCost;

    public String serviceDate;

    public Boolean isInsure;

    public Long priceId;

    public String serviceStartDate;

    public String serviceEndDate;

    public String totalCostStr;

    public String PriceDesc;

    public Double basicServiceDays;

    public List<String> startEndDateDays;

    public Integer itemType;

    public Integer serviceSubjoinType;

    public Integer paidPayNum;

    public Long Price;

    public Integer serviceUnit;

    public Integer subjoinGroupingType;

    public Builder() {
      startEndDateDays = Internal.newMutableList();
    }

    /**
     * 服务内容
     */
    public Builder service(String service) {
      this.service = service;
      return this;
    }

    /**
     * 服务次数
     */
    public Builder serviceDays(Integer serviceDays) {
      this.serviceDays = serviceDays;
      return this;
    }

    /**
     * 已付金额
     */
    public Builder paidFee(Long paidFee) {
      this.paidFee = paidFee;
      return this;
    }

    /**
     * 转换成元
     */
    public Builder paidFee_yuan(String paidFee_yuan) {
      this.paidFee_yuan = paidFee_yuan;
      return this;
    }

    /**
     * 未付金额
     */
    public Builder needPay(Long needPay) {
      this.needPay = needPay;
      return this;
    }

    /**
     * 转换成元
     */
    public Builder needPay_yuan(String needPay_yuan) {
      this.needPay_yuan = needPay_yuan;
      return this;
    }

    /**
     * 总费用
     */
    public Builder totalCost(Long totalCost) {
      this.totalCost = totalCost;
      return this;
    }

    /**
     * 消费时间
     */
    public Builder serviceDate(String serviceDate) {
      this.serviceDate = serviceDate;
      return this;
    }

    /**
     * 是否是长护险医疗附近项
     */
    public Builder isInsure(Boolean isInsure) {
      this.isInsure = isInsure;
      return this;
    }

    /**
     * 服务id
     */
    public Builder priceId(Long priceId) {
      this.priceId = priceId;
      return this;
    }

    /**
     * 服务开始时间
     */
    public Builder serviceStartDate(String serviceStartDate) {
      this.serviceStartDate = serviceStartDate;
      return this;
    }

    /**
     * 服务结束时间
     */
    public Builder serviceEndDate(String serviceEndDate) {
      this.serviceEndDate = serviceEndDate;
      return this;
    }

    /**
     * 总费用转换为元
     */
    public Builder totalCostStr(String totalCostStr) {
      this.totalCostStr = totalCostStr;
      return this;
    }

    /**
     * 服务单价
     */
    public Builder PriceDesc(String PriceDesc) {
      this.PriceDesc = PriceDesc;
      return this;
    }

    /**
     * 基础服务天数
     */
    public Builder basicServiceDays(Double basicServiceDays) {
      this.basicServiceDays = basicServiceDays;
      return this;
    }

    /**
     * saas中间支付服务开始结束时间
     */
    public Builder startEndDateDays(List<String> startEndDateDays) {
      Internal.checkElementsNotNull(startEndDateDays);
      this.startEndDateDays = startEndDateDays;
      return this;
    }

    /**
     * 服务类型
     */
    public Builder itemType(Integer itemType) {
      this.itemType = itemType;
      return this;
    }

    /**
     * 附加项类型 0-普通附加项 1-金额调整 2-陪人床
     */
    public Builder serviceSubjoinType(Integer serviceSubjoinType) {
      this.serviceSubjoinType = serviceSubjoinType;
      return this;
    }

    /**
     * 已支付数量
     */
    public Builder paidPayNum(Integer paidPayNum) {
      this.paidPayNum = paidPayNum;
      return this;
    }

    /**
     * 服务单价
     */
    public Builder Price(Long Price) {
      this.Price = Price;
      return this;
    }

    /**
     * 服务单位 1-次 2-小时 3-天  4-月
     */
    public Builder serviceUnit(Integer serviceUnit) {
      this.serviceUnit = serviceUnit;
      return this;
    }

    /**
     * 附加项子类型 1-专陪 2-多陪 3-夜陪
     */
    public Builder subjoinGroupingType(Integer subjoinGroupingType) {
      this.subjoinGroupingType = subjoinGroupingType;
      return this;
    }

    @Override
    public OrderItemVO2 build() {
      return new OrderItemVO2(service, serviceDays, paidFee, paidFee_yuan, needPay, needPay_yuan, totalCost, serviceDate, isInsure, priceId, serviceStartDate, serviceEndDate, totalCostStr, PriceDesc, basicServiceDays, startEndDateDays, itemType, serviceSubjoinType, paidPayNum, Price, serviceUnit, subjoinGroupingType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OrderItemVO2 extends ProtoAdapter<OrderItemVO2> {
    ProtoAdapter_OrderItemVO2() {
      super(FieldEncoding.LENGTH_DELIMITED, OrderItemVO2.class);
    }

    @Override
    public int encodedSize(OrderItemVO2 value) {
      return (value.service != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.service) : 0)
          + (value.serviceDays != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.serviceDays) : 0)
          + (value.paidFee != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.paidFee) : 0)
          + (value.paidFee_yuan != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.paidFee_yuan) : 0)
          + (value.needPay != null ? ProtoAdapter.UINT64.encodedSizeWithTag(5, value.needPay) : 0)
          + (value.needPay_yuan != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.needPay_yuan) : 0)
          + (value.totalCost != null ? ProtoAdapter.UINT64.encodedSizeWithTag(7, value.totalCost) : 0)
          + (value.serviceDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.serviceDate) : 0)
          + (value.isInsure != null ? ProtoAdapter.BOOL.encodedSizeWithTag(9, value.isInsure) : 0)
          + (value.priceId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(10, value.priceId) : 0)
          + (value.serviceStartDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.serviceStartDate) : 0)
          + (value.serviceEndDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.serviceEndDate) : 0)
          + (value.totalCostStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.totalCostStr) : 0)
          + (value.PriceDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.PriceDesc) : 0)
          + (value.basicServiceDays != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(15, value.basicServiceDays) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(16, value.startEndDateDays)
          + (value.itemType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(17, value.itemType) : 0)
          + (value.serviceSubjoinType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(18, value.serviceSubjoinType) : 0)
          + (value.paidPayNum != null ? ProtoAdapter.INT32.encodedSizeWithTag(19, value.paidPayNum) : 0)
          + (value.Price != null ? ProtoAdapter.INT64.encodedSizeWithTag(20, value.Price) : 0)
          + (value.serviceUnit != null ? ProtoAdapter.INT32.encodedSizeWithTag(21, value.serviceUnit) : 0)
          + (value.subjoinGroupingType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(22, value.subjoinGroupingType) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OrderItemVO2 value) throws IOException {
      if (value.service != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.service);
      if (value.serviceDays != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.serviceDays);
      if (value.paidFee != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.paidFee);
      if (value.paidFee_yuan != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.paidFee_yuan);
      if (value.needPay != null) ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.needPay);
      if (value.needPay_yuan != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.needPay_yuan);
      if (value.totalCost != null) ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.totalCost);
      if (value.serviceDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.serviceDate);
      if (value.isInsure != null) ProtoAdapter.BOOL.encodeWithTag(writer, 9, value.isInsure);
      if (value.priceId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 10, value.priceId);
      if (value.serviceStartDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.serviceStartDate);
      if (value.serviceEndDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.serviceEndDate);
      if (value.totalCostStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.totalCostStr);
      if (value.PriceDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.PriceDesc);
      if (value.basicServiceDays != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 15, value.basicServiceDays);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 16, value.startEndDateDays);
      if (value.itemType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.itemType);
      if (value.serviceSubjoinType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.serviceSubjoinType);
      if (value.paidPayNum != null) ProtoAdapter.INT32.encodeWithTag(writer, 19, value.paidPayNum);
      if (value.Price != null) ProtoAdapter.INT64.encodeWithTag(writer, 20, value.Price);
      if (value.serviceUnit != null) ProtoAdapter.INT32.encodeWithTag(writer, 21, value.serviceUnit);
      if (value.subjoinGroupingType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 22, value.subjoinGroupingType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OrderItemVO2 decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.service(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.serviceDays(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.paidFee(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.paidFee_yuan(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.needPay(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.needPay_yuan(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.totalCost(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.serviceDate(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.isInsure(ProtoAdapter.BOOL.decode(reader)); break;
          case 10: builder.priceId(ProtoAdapter.UINT64.decode(reader)); break;
          case 11: builder.serviceStartDate(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.serviceEndDate(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.totalCostStr(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.PriceDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.basicServiceDays(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 16: builder.startEndDateDays.add(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.itemType(ProtoAdapter.UINT32.decode(reader)); break;
          case 18: builder.serviceSubjoinType(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.paidPayNum(ProtoAdapter.INT32.decode(reader)); break;
          case 20: builder.Price(ProtoAdapter.INT64.decode(reader)); break;
          case 21: builder.serviceUnit(ProtoAdapter.INT32.decode(reader)); break;
          case 22: builder.subjoinGroupingType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OrderItemVO2 redact(OrderItemVO2 value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
