// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 32:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 短信登陆返回
 */
public final class LoginRsp extends Message<LoginRsp, LoginRsp.Builder> {
  public static final ProtoAdapter<LoginRsp> ADAPTER = new ProtoAdapter_LoginRsp();

  private static final long serialVersionUID = 0L;

  public static final Boolean DEFAULT_ISCOMPLETE = false;

  public static final Long DEFAULT_ROLEID = 0L;

  public static final Integer DEFAULT_HGTYPE = 0;

  /**
   * 用户信息是否完善
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isComplete;

  /**
   * 角色 0-无角色 10003-健康经理 10006-督导 10004-护士长  10001-护工 10002-护士 6-其他 10100-客户经理
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long roleId;

  /**
   * 护工类型 1-居家 2-机构 3-自照
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer hgType;

  public LoginRsp(Boolean isComplete, Long roleId, Integer hgType) {
    this(isComplete, roleId, hgType, ByteString.EMPTY);
  }

  public LoginRsp(Boolean isComplete, Long roleId, Integer hgType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.isComplete = isComplete;
    this.roleId = roleId;
    this.hgType = hgType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.isComplete = isComplete;
    builder.roleId = roleId;
    builder.hgType = hgType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LoginRsp)) return false;
    LoginRsp o = (LoginRsp) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(isComplete, o.isComplete)
        && Internal.equals(roleId, o.roleId)
        && Internal.equals(hgType, o.hgType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (isComplete != null ? isComplete.hashCode() : 0);
      result = result * 37 + (roleId != null ? roleId.hashCode() : 0);
      result = result * 37 + (hgType != null ? hgType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (isComplete != null) builder.append(", isComplete=").append(isComplete);
    if (roleId != null) builder.append(", roleId=").append(roleId);
    if (hgType != null) builder.append(", hgType=").append(hgType);
    return builder.replace(0, 2, "LoginRsp{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<LoginRsp, Builder> {
    public Boolean isComplete;

    public Long roleId;

    public Integer hgType;

    public Builder() {
    }

    /**
     * 用户信息是否完善
     */
    public Builder isComplete(Boolean isComplete) {
      this.isComplete = isComplete;
      return this;
    }

    /**
     * 角色 0-无角色 10003-健康经理 10006-督导 10004-护士长  10001-护工 10002-护士 6-其他 10100-客户经理
     */
    public Builder roleId(Long roleId) {
      this.roleId = roleId;
      return this;
    }

    /**
     * 护工类型 1-居家 2-机构 3-自照
     */
    public Builder hgType(Integer hgType) {
      this.hgType = hgType;
      return this;
    }

    @Override
    public LoginRsp build() {
      return new LoginRsp(isComplete, roleId, hgType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_LoginRsp extends ProtoAdapter<LoginRsp> {
    ProtoAdapter_LoginRsp() {
      super(FieldEncoding.LENGTH_DELIMITED, LoginRsp.class);
    }

    @Override
    public int encodedSize(LoginRsp value) {
      return (value.isComplete != null ? ProtoAdapter.BOOL.encodedSizeWithTag(1, value.isComplete) : 0)
          + (value.roleId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.roleId) : 0)
          + (value.hgType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.hgType) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, LoginRsp value) throws IOException {
      if (value.isComplete != null) ProtoAdapter.BOOL.encodeWithTag(writer, 1, value.isComplete);
      if (value.roleId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.roleId);
      if (value.hgType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.hgType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public LoginRsp decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.isComplete(ProtoAdapter.BOOL.decode(reader)); break;
          case 2: builder.roleId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.hgType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public LoginRsp redact(LoginRsp value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
