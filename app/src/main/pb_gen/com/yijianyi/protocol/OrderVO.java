// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 247:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 用于APP端展示的订单数据模型
 */
public final class OrderVO extends Message<OrderVO, OrderVO.Builder> {
  public static final ProtoAdapter<OrderVO> ADAPTER = new ProtoAdapter_OrderVO();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final String DEFAULT_CREATETIME = "";

  public static final String DEFAULT_SERVICE = "";

  public static final String DEFAULT_LOCATION = "";

  public static final Integer DEFAULT_STATUS = 0;

  public static final String DEFAULT_SERVICESTAFF = "";

  public static final String DEFAULT_INVALIDTIME = "";

  public static final String DEFAULT_CONTACTPHONE = "";

  public static final String DEFAULT_CONTACTNAME = "";

  public static final String DEFAULT_KINSNAME = "";

  public static final String DEFAULT_RELATION = "";

  public static final String DEFAULT_PRICEDESC = "";

  public static final String DEFAULT_PREPAYAMOUNT = "";

  public static final String DEFAULT_PAIDFEE = "";

  public static final String DEFAULT_NEEDPAY = "";

  public static final String DEFAULT_HOSPITAL = "";

  public static final String DEFAULT_BRANCH = "";

  public static final String DEFAULT_ROOM = "";

  public static final String DEFAULT_BED = "";

  public static final String DEFAULT_MEMO = "";

  public static final String DEFAULT_LOCATIONMINUTE = "";

  public static final String DEFAULT_SERVICETIME = "";

  public static final Integer DEFAULT_ORDERTYPE = 0;

  public static final String DEFAULT_KFPHONE = "";

  public static final Integer DEFAULT_PAYFLAG = 0;

  public static final String DEFAULT_STATUSSTR = "";

  public static final String DEFAULT_ACTIONSTR = "";

  public static final String DEFAULT_KFMEMO = "";

  public static final String DEFAULT_WANTFEE = "";

  public static final Integer DEFAULT_INSURETYPE = 0;

  public static final Long DEFAULT_USERID = 0L;

  public static final Long DEFAULT_KINSID = 0L;

  public static final String DEFAULT_SUPERIORNAME = "";

  public static final String DEFAULT_EXTRAFEE = "";

  public static final String DEFAULT_PREREALFEE = "";

  public static final Long DEFAULT_MANAGERID = 0L;

  public static final Integer DEFAULT_PGSTATUS = 0;

  public static final String DEFAULT_ORDERSTARTTIME = "";

  public static final String DEFAULT_ORDERENDTIME = "";

  public static final String DEFAULT_ADDRPHONE = "";

  public static final String DEFAULT_ADDRCONTACTS = "";

  public static final String DEFAULT_INSURENO = "";

  public static final Integer DEFAULT_ISALL = 0;

  public static final Long DEFAULT_HGID = 0L;

  public static final String DEFAULT_SECURITYASSESS = "";

  public static final String DEFAULT_UPDATETIME = "";

  public static final String DEFAULT_REVISEFEE = "";

  public static final String DEFAULT_ORGNO = "";

  public static final String DEFAULT_NEEDREFUNDFEE = "";

  public static final Long DEFAULT_PRICEID = 0L;

  public static final Long DEFAULT_BRANCHID = 0L;

  public static final Integer DEFAULT_CREATETYPE = 0;

  public static final Long DEFAULT_ORGID = 0L;

  public static final String DEFAULT_ORGNAME = "";

  public static final String DEFAULT_BRANCHNAME = "";

  /**
   * 订单ID
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 下单时间
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createTime;

  /**
   * 服务内容
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String service;

  /**
   * 服务地点
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String location;

  /**
   * -1-已取消 0-待付款预交金,1-待派工,2-待服务,3-服务中,4-服务完成,5-待评价,6-已完成
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer status;

  /**
   * 服务人员
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceStaff;

  /**
   * 订单失效时间
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String invalidTime;

  /**
   * 联系电话
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String contactPhone;

  /**
   * 联系人
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String contactName;

  /**
   * 被照护人姓名
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kinsName;

  /**
   * 关系
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String relation;

  /**
   * 收费标准
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String priceDesc;

  /**
   * 预交金
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String prepayAmount;

  /**
   * 已支付
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String paidFee;

  /**
   * 需要支付的费用
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String needPay;

  /**
   * 医院
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String hospital;

  /**
   * 科室
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String branch;

  /**
   * 病房
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String room;

  /**
   * 床号
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bed;

  /**
   * 备注
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String memo;

  /**
   * 服务地址详细信息
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String locationMinute;

  /**
   * 预约时间
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceTime;

  /**
   * 订单类型 1-机构订单 2-居家订单
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer orderType;

  /**
   * 催单电话
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kfPhone;

  /**
   * 0-费用刚好 1-需要支付 2-需要退款
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payFlag;

  /**
   * 状态描述
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String statusStr;

  /**
   * 操作描述
   */
  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String actionStr;

  /**
   * 客服备注
   */
  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kfmemo;

  /**
   * 需交费用
   */
  @WireField(
      tag = 30,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String wantFee;

  /**
   * 是否长护险订单 1:长护险 2：不为长护险
   */
  @WireField(
      tag = 31,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer insureType;

  /**
   * 申请人id
   */
  @WireField(
      tag = 32,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 被陪护人id
   */
  @WireField(
      tag = 33,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kinsId;

  /**
   * 督导或者健康经理
   */
  @WireField(
      tag = 34,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String superiorName;

  /**
   * 门禁卡费用
   */
  @WireField(
      tag = 35,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String extraFee;

  /**
   * 预付金额
   */
  @WireField(
      tag = 36,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String preRealFee;

  /**
   * 健康经理或者督导id
   */
  @WireField(
      tag = 37,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long managerId;

  /**
   * 评估状态 0-待评估 1-已评估 2-跳过评估
   */
  @WireField(
      tag = 38,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer pgStatus;

  /**
   * 订单开始时间
   */
  @WireField(
      tag = 39,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderStartTime;

  /**
   * 订单结束时间
   */
  @WireField(
      tag = 40,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderEndTime;

  /**
   * 地址联系电话
   */
  @WireField(
      tag = 41,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String addrPhone;

  /**
   * 地址联系人
   */
  @WireField(
      tag = 42,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String addrContacts;

  /**
   * 长护险申请单id，当为长护险订单时才有值
   */
  @WireField(
      tag = 43,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String insureNO;

  /**
   * 科室承包状态 '0 -未定义 1 - 承包 2 - 非承包'
   */
  @WireField(
      tag = 44,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer isAll;

  /**
   * 服务人员id
   */
  @WireField(
      tag = 45,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long hgId;

  /**
   * 安全风险评估
   */
  @WireField(
      tag = 46,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String securityAssess;

  /**
   * 附加项校正时间
   */
  @WireField(
      tag = 47,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String updateTime;

  /**
   * 服务附加费调整金额
   */
  @WireField(
      tag = 48,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String reviseFee;

  /**
   * 住院号
   */
  @WireField(
      tag = 76,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orgNO;

  /**
   * 订单结算时待退款金额
   */
  @WireField(
      tag = 77,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String needRefundFee;

  /**
   * 服务套餐id
   */
  @WireField(
      tag = 78,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long priceId;

  /**
   * 科室id
   */
  @WireField(
      tag = 79,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long branchId;

  /**
   * 1-用户app下单 2-saas下单 3-企业app下单 4-用户h5下单
   */
  @WireField(
      tag = 80,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer createType;

  /**
   * 机构id
   */
  @WireField(
      tag = 81,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long orgId;

  /**
   * 机构名
   */
  @WireField(
      tag = 82,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orgName;

  /**
   * 科室名
   */
  @WireField(
      tag = 83,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String branchName;

  public OrderVO(String orderId, String createTime, String service, String location, Integer status, String serviceStaff, String invalidTime, String contactPhone, String contactName, String kinsName, String relation, String priceDesc, String prepayAmount, String paidFee, String needPay, String hospital, String branch, String room, String bed, String memo, String locationMinute, String serviceTime, Integer orderType, String kfPhone, Integer payFlag, String statusStr, String actionStr, String kfmemo, String wantFee, Integer insureType, Long userId, Long kinsId, String superiorName, String extraFee, String preRealFee, Long managerId, Integer pgStatus, String orderStartTime, String orderEndTime, String addrPhone, String addrContacts, String insureNO, Integer isAll, Long hgId, String securityAssess, String updateTime, String reviseFee, String orgNO, String needRefundFee, Long priceId, Long branchId, Integer createType, Long orgId, String orgName, String branchName) {
    this(orderId, createTime, service, location, status, serviceStaff, invalidTime, contactPhone, contactName, kinsName, relation, priceDesc, prepayAmount, paidFee, needPay, hospital, branch, room, bed, memo, locationMinute, serviceTime, orderType, kfPhone, payFlag, statusStr, actionStr, kfmemo, wantFee, insureType, userId, kinsId, superiorName, extraFee, preRealFee, managerId, pgStatus, orderStartTime, orderEndTime, addrPhone, addrContacts, insureNO, isAll, hgId, securityAssess, updateTime, reviseFee, orgNO, needRefundFee, priceId, branchId, createType, orgId, orgName, branchName, ByteString.EMPTY);
  }

  public OrderVO(String orderId, String createTime, String service, String location, Integer status, String serviceStaff, String invalidTime, String contactPhone, String contactName, String kinsName, String relation, String priceDesc, String prepayAmount, String paidFee, String needPay, String hospital, String branch, String room, String bed, String memo, String locationMinute, String serviceTime, Integer orderType, String kfPhone, Integer payFlag, String statusStr, String actionStr, String kfmemo, String wantFee, Integer insureType, Long userId, Long kinsId, String superiorName, String extraFee, String preRealFee, Long managerId, Integer pgStatus, String orderStartTime, String orderEndTime, String addrPhone, String addrContacts, String insureNO, Integer isAll, Long hgId, String securityAssess, String updateTime, String reviseFee, String orgNO, String needRefundFee, Long priceId, Long branchId, Integer createType, Long orgId, String orgName, String branchName, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.orderId = orderId;
    this.createTime = createTime;
    this.service = service;
    this.location = location;
    this.status = status;
    this.serviceStaff = serviceStaff;
    this.invalidTime = invalidTime;
    this.contactPhone = contactPhone;
    this.contactName = contactName;
    this.kinsName = kinsName;
    this.relation = relation;
    this.priceDesc = priceDesc;
    this.prepayAmount = prepayAmount;
    this.paidFee = paidFee;
    this.needPay = needPay;
    this.hospital = hospital;
    this.branch = branch;
    this.room = room;
    this.bed = bed;
    this.memo = memo;
    this.locationMinute = locationMinute;
    this.serviceTime = serviceTime;
    this.orderType = orderType;
    this.kfPhone = kfPhone;
    this.payFlag = payFlag;
    this.statusStr = statusStr;
    this.actionStr = actionStr;
    this.kfmemo = kfmemo;
    this.wantFee = wantFee;
    this.insureType = insureType;
    this.userId = userId;
    this.kinsId = kinsId;
    this.superiorName = superiorName;
    this.extraFee = extraFee;
    this.preRealFee = preRealFee;
    this.managerId = managerId;
    this.pgStatus = pgStatus;
    this.orderStartTime = orderStartTime;
    this.orderEndTime = orderEndTime;
    this.addrPhone = addrPhone;
    this.addrContacts = addrContacts;
    this.insureNO = insureNO;
    this.isAll = isAll;
    this.hgId = hgId;
    this.securityAssess = securityAssess;
    this.updateTime = updateTime;
    this.reviseFee = reviseFee;
    this.orgNO = orgNO;
    this.needRefundFee = needRefundFee;
    this.priceId = priceId;
    this.branchId = branchId;
    this.createType = createType;
    this.orgId = orgId;
    this.orgName = orgName;
    this.branchName = branchName;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.orderId = orderId;
    builder.createTime = createTime;
    builder.service = service;
    builder.location = location;
    builder.status = status;
    builder.serviceStaff = serviceStaff;
    builder.invalidTime = invalidTime;
    builder.contactPhone = contactPhone;
    builder.contactName = contactName;
    builder.kinsName = kinsName;
    builder.relation = relation;
    builder.priceDesc = priceDesc;
    builder.prepayAmount = prepayAmount;
    builder.paidFee = paidFee;
    builder.needPay = needPay;
    builder.hospital = hospital;
    builder.branch = branch;
    builder.room = room;
    builder.bed = bed;
    builder.memo = memo;
    builder.locationMinute = locationMinute;
    builder.serviceTime = serviceTime;
    builder.orderType = orderType;
    builder.kfPhone = kfPhone;
    builder.payFlag = payFlag;
    builder.statusStr = statusStr;
    builder.actionStr = actionStr;
    builder.kfmemo = kfmemo;
    builder.wantFee = wantFee;
    builder.insureType = insureType;
    builder.userId = userId;
    builder.kinsId = kinsId;
    builder.superiorName = superiorName;
    builder.extraFee = extraFee;
    builder.preRealFee = preRealFee;
    builder.managerId = managerId;
    builder.pgStatus = pgStatus;
    builder.orderStartTime = orderStartTime;
    builder.orderEndTime = orderEndTime;
    builder.addrPhone = addrPhone;
    builder.addrContacts = addrContacts;
    builder.insureNO = insureNO;
    builder.isAll = isAll;
    builder.hgId = hgId;
    builder.securityAssess = securityAssess;
    builder.updateTime = updateTime;
    builder.reviseFee = reviseFee;
    builder.orgNO = orgNO;
    builder.needRefundFee = needRefundFee;
    builder.priceId = priceId;
    builder.branchId = branchId;
    builder.createType = createType;
    builder.orgId = orgId;
    builder.orgName = orgName;
    builder.branchName = branchName;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OrderVO)) return false;
    OrderVO o = (OrderVO) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(service, o.service)
        && Internal.equals(location, o.location)
        && Internal.equals(status, o.status)
        && Internal.equals(serviceStaff, o.serviceStaff)
        && Internal.equals(invalidTime, o.invalidTime)
        && Internal.equals(contactPhone, o.contactPhone)
        && Internal.equals(contactName, o.contactName)
        && Internal.equals(kinsName, o.kinsName)
        && Internal.equals(relation, o.relation)
        && Internal.equals(priceDesc, o.priceDesc)
        && Internal.equals(prepayAmount, o.prepayAmount)
        && Internal.equals(paidFee, o.paidFee)
        && Internal.equals(needPay, o.needPay)
        && Internal.equals(hospital, o.hospital)
        && Internal.equals(branch, o.branch)
        && Internal.equals(room, o.room)
        && Internal.equals(bed, o.bed)
        && Internal.equals(memo, o.memo)
        && Internal.equals(locationMinute, o.locationMinute)
        && Internal.equals(serviceTime, o.serviceTime)
        && Internal.equals(orderType, o.orderType)
        && Internal.equals(kfPhone, o.kfPhone)
        && Internal.equals(payFlag, o.payFlag)
        && Internal.equals(statusStr, o.statusStr)
        && Internal.equals(actionStr, o.actionStr)
        && Internal.equals(kfmemo, o.kfmemo)
        && Internal.equals(wantFee, o.wantFee)
        && Internal.equals(insureType, o.insureType)
        && Internal.equals(userId, o.userId)
        && Internal.equals(kinsId, o.kinsId)
        && Internal.equals(superiorName, o.superiorName)
        && Internal.equals(extraFee, o.extraFee)
        && Internal.equals(preRealFee, o.preRealFee)
        && Internal.equals(managerId, o.managerId)
        && Internal.equals(pgStatus, o.pgStatus)
        && Internal.equals(orderStartTime, o.orderStartTime)
        && Internal.equals(orderEndTime, o.orderEndTime)
        && Internal.equals(addrPhone, o.addrPhone)
        && Internal.equals(addrContacts, o.addrContacts)
        && Internal.equals(insureNO, o.insureNO)
        && Internal.equals(isAll, o.isAll)
        && Internal.equals(hgId, o.hgId)
        && Internal.equals(securityAssess, o.securityAssess)
        && Internal.equals(updateTime, o.updateTime)
        && Internal.equals(reviseFee, o.reviseFee)
        && Internal.equals(orgNO, o.orgNO)
        && Internal.equals(needRefundFee, o.needRefundFee)
        && Internal.equals(priceId, o.priceId)
        && Internal.equals(branchId, o.branchId)
        && Internal.equals(createType, o.createType)
        && Internal.equals(orgId, o.orgId)
        && Internal.equals(orgName, o.orgName)
        && Internal.equals(branchName, o.branchName);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (service != null ? service.hashCode() : 0);
      result = result * 37 + (location != null ? location.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (serviceStaff != null ? serviceStaff.hashCode() : 0);
      result = result * 37 + (invalidTime != null ? invalidTime.hashCode() : 0);
      result = result * 37 + (contactPhone != null ? contactPhone.hashCode() : 0);
      result = result * 37 + (contactName != null ? contactName.hashCode() : 0);
      result = result * 37 + (kinsName != null ? kinsName.hashCode() : 0);
      result = result * 37 + (relation != null ? relation.hashCode() : 0);
      result = result * 37 + (priceDesc != null ? priceDesc.hashCode() : 0);
      result = result * 37 + (prepayAmount != null ? prepayAmount.hashCode() : 0);
      result = result * 37 + (paidFee != null ? paidFee.hashCode() : 0);
      result = result * 37 + (needPay != null ? needPay.hashCode() : 0);
      result = result * 37 + (hospital != null ? hospital.hashCode() : 0);
      result = result * 37 + (branch != null ? branch.hashCode() : 0);
      result = result * 37 + (room != null ? room.hashCode() : 0);
      result = result * 37 + (bed != null ? bed.hashCode() : 0);
      result = result * 37 + (memo != null ? memo.hashCode() : 0);
      result = result * 37 + (locationMinute != null ? locationMinute.hashCode() : 0);
      result = result * 37 + (serviceTime != null ? serviceTime.hashCode() : 0);
      result = result * 37 + (orderType != null ? orderType.hashCode() : 0);
      result = result * 37 + (kfPhone != null ? kfPhone.hashCode() : 0);
      result = result * 37 + (payFlag != null ? payFlag.hashCode() : 0);
      result = result * 37 + (statusStr != null ? statusStr.hashCode() : 0);
      result = result * 37 + (actionStr != null ? actionStr.hashCode() : 0);
      result = result * 37 + (kfmemo != null ? kfmemo.hashCode() : 0);
      result = result * 37 + (wantFee != null ? wantFee.hashCode() : 0);
      result = result * 37 + (insureType != null ? insureType.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (kinsId != null ? kinsId.hashCode() : 0);
      result = result * 37 + (superiorName != null ? superiorName.hashCode() : 0);
      result = result * 37 + (extraFee != null ? extraFee.hashCode() : 0);
      result = result * 37 + (preRealFee != null ? preRealFee.hashCode() : 0);
      result = result * 37 + (managerId != null ? managerId.hashCode() : 0);
      result = result * 37 + (pgStatus != null ? pgStatus.hashCode() : 0);
      result = result * 37 + (orderStartTime != null ? orderStartTime.hashCode() : 0);
      result = result * 37 + (orderEndTime != null ? orderEndTime.hashCode() : 0);
      result = result * 37 + (addrPhone != null ? addrPhone.hashCode() : 0);
      result = result * 37 + (addrContacts != null ? addrContacts.hashCode() : 0);
      result = result * 37 + (insureNO != null ? insureNO.hashCode() : 0);
      result = result * 37 + (isAll != null ? isAll.hashCode() : 0);
      result = result * 37 + (hgId != null ? hgId.hashCode() : 0);
      result = result * 37 + (securityAssess != null ? securityAssess.hashCode() : 0);
      result = result * 37 + (updateTime != null ? updateTime.hashCode() : 0);
      result = result * 37 + (reviseFee != null ? reviseFee.hashCode() : 0);
      result = result * 37 + (orgNO != null ? orgNO.hashCode() : 0);
      result = result * 37 + (needRefundFee != null ? needRefundFee.hashCode() : 0);
      result = result * 37 + (priceId != null ? priceId.hashCode() : 0);
      result = result * 37 + (branchId != null ? branchId.hashCode() : 0);
      result = result * 37 + (createType != null ? createType.hashCode() : 0);
      result = result * 37 + (orgId != null ? orgId.hashCode() : 0);
      result = result * 37 + (orgName != null ? orgName.hashCode() : 0);
      result = result * 37 + (branchName != null ? branchName.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (service != null) builder.append(", service=").append(service);
    if (location != null) builder.append(", location=").append(location);
    if (status != null) builder.append(", status=").append(status);
    if (serviceStaff != null) builder.append(", serviceStaff=").append(serviceStaff);
    if (invalidTime != null) builder.append(", invalidTime=").append(invalidTime);
    if (contactPhone != null) builder.append(", contactPhone=").append(contactPhone);
    if (contactName != null) builder.append(", contactName=").append(contactName);
    if (kinsName != null) builder.append(", kinsName=").append(kinsName);
    if (relation != null) builder.append(", relation=").append(relation);
    if (priceDesc != null) builder.append(", priceDesc=").append(priceDesc);
    if (prepayAmount != null) builder.append(", prepayAmount=").append(prepayAmount);
    if (paidFee != null) builder.append(", paidFee=").append(paidFee);
    if (needPay != null) builder.append(", needPay=").append(needPay);
    if (hospital != null) builder.append(", hospital=").append(hospital);
    if (branch != null) builder.append(", branch=").append(branch);
    if (room != null) builder.append(", room=").append(room);
    if (bed != null) builder.append(", bed=").append(bed);
    if (memo != null) builder.append(", memo=").append(memo);
    if (locationMinute != null) builder.append(", locationMinute=").append(locationMinute);
    if (serviceTime != null) builder.append(", serviceTime=").append(serviceTime);
    if (orderType != null) builder.append(", orderType=").append(orderType);
    if (kfPhone != null) builder.append(", kfPhone=").append(kfPhone);
    if (payFlag != null) builder.append(", payFlag=").append(payFlag);
    if (statusStr != null) builder.append(", statusStr=").append(statusStr);
    if (actionStr != null) builder.append(", actionStr=").append(actionStr);
    if (kfmemo != null) builder.append(", kfmemo=").append(kfmemo);
    if (wantFee != null) builder.append(", wantFee=").append(wantFee);
    if (insureType != null) builder.append(", insureType=").append(insureType);
    if (userId != null) builder.append(", userId=").append(userId);
    if (kinsId != null) builder.append(", kinsId=").append(kinsId);
    if (superiorName != null) builder.append(", superiorName=").append(superiorName);
    if (extraFee != null) builder.append(", extraFee=").append(extraFee);
    if (preRealFee != null) builder.append(", preRealFee=").append(preRealFee);
    if (managerId != null) builder.append(", managerId=").append(managerId);
    if (pgStatus != null) builder.append(", pgStatus=").append(pgStatus);
    if (orderStartTime != null) builder.append(", orderStartTime=").append(orderStartTime);
    if (orderEndTime != null) builder.append(", orderEndTime=").append(orderEndTime);
    if (addrPhone != null) builder.append(", addrPhone=").append(addrPhone);
    if (addrContacts != null) builder.append(", addrContacts=").append(addrContacts);
    if (insureNO != null) builder.append(", insureNO=").append(insureNO);
    if (isAll != null) builder.append(", isAll=").append(isAll);
    if (hgId != null) builder.append(", hgId=").append(hgId);
    if (securityAssess != null) builder.append(", securityAssess=").append(securityAssess);
    if (updateTime != null) builder.append(", updateTime=").append(updateTime);
    if (reviseFee != null) builder.append(", reviseFee=").append(reviseFee);
    if (orgNO != null) builder.append(", orgNO=").append(orgNO);
    if (needRefundFee != null) builder.append(", needRefundFee=").append(needRefundFee);
    if (priceId != null) builder.append(", priceId=").append(priceId);
    if (branchId != null) builder.append(", branchId=").append(branchId);
    if (createType != null) builder.append(", createType=").append(createType);
    if (orgId != null) builder.append(", orgId=").append(orgId);
    if (orgName != null) builder.append(", orgName=").append(orgName);
    if (branchName != null) builder.append(", branchName=").append(branchName);
    return builder.replace(0, 2, "OrderVO{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<OrderVO, Builder> {
    public String orderId;

    public String createTime;

    public String service;

    public String location;

    public Integer status;

    public String serviceStaff;

    public String invalidTime;

    public String contactPhone;

    public String contactName;

    public String kinsName;

    public String relation;

    public String priceDesc;

    public String prepayAmount;

    public String paidFee;

    public String needPay;

    public String hospital;

    public String branch;

    public String room;

    public String bed;

    public String memo;

    public String locationMinute;

    public String serviceTime;

    public Integer orderType;

    public String kfPhone;

    public Integer payFlag;

    public String statusStr;

    public String actionStr;

    public String kfmemo;

    public String wantFee;

    public Integer insureType;

    public Long userId;

    public Long kinsId;

    public String superiorName;

    public String extraFee;

    public String preRealFee;

    public Long managerId;

    public Integer pgStatus;

    public String orderStartTime;

    public String orderEndTime;

    public String addrPhone;

    public String addrContacts;

    public String insureNO;

    public Integer isAll;

    public Long hgId;

    public String securityAssess;

    public String updateTime;

    public String reviseFee;

    public String orgNO;

    public String needRefundFee;

    public Long priceId;

    public Long branchId;

    public Integer createType;

    public Long orgId;

    public String orgName;

    public String branchName;

    public Builder() {
    }

    /**
     * 订单ID
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 下单时间
     */
    public Builder createTime(String createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 服务内容
     */
    public Builder service(String service) {
      this.service = service;
      return this;
    }

    /**
     * 服务地点
     */
    public Builder location(String location) {
      this.location = location;
      return this;
    }

    /**
     * -1-已取消 0-待付款预交金,1-待派工,2-待服务,3-服务中,4-服务完成,5-待评价,6-已完成
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 服务人员
     */
    public Builder serviceStaff(String serviceStaff) {
      this.serviceStaff = serviceStaff;
      return this;
    }

    /**
     * 订单失效时间
     */
    public Builder invalidTime(String invalidTime) {
      this.invalidTime = invalidTime;
      return this;
    }

    /**
     * 联系电话
     */
    public Builder contactPhone(String contactPhone) {
      this.contactPhone = contactPhone;
      return this;
    }

    /**
     * 联系人
     */
    public Builder contactName(String contactName) {
      this.contactName = contactName;
      return this;
    }

    /**
     * 被照护人姓名
     */
    public Builder kinsName(String kinsName) {
      this.kinsName = kinsName;
      return this;
    }

    /**
     * 关系
     */
    public Builder relation(String relation) {
      this.relation = relation;
      return this;
    }

    /**
     * 收费标准
     */
    public Builder priceDesc(String priceDesc) {
      this.priceDesc = priceDesc;
      return this;
    }

    /**
     * 预交金
     */
    public Builder prepayAmount(String prepayAmount) {
      this.prepayAmount = prepayAmount;
      return this;
    }

    /**
     * 已支付
     */
    public Builder paidFee(String paidFee) {
      this.paidFee = paidFee;
      return this;
    }

    /**
     * 需要支付的费用
     */
    public Builder needPay(String needPay) {
      this.needPay = needPay;
      return this;
    }

    /**
     * 医院
     */
    public Builder hospital(String hospital) {
      this.hospital = hospital;
      return this;
    }

    /**
     * 科室
     */
    public Builder branch(String branch) {
      this.branch = branch;
      return this;
    }

    /**
     * 病房
     */
    public Builder room(String room) {
      this.room = room;
      return this;
    }

    /**
     * 床号
     */
    public Builder bed(String bed) {
      this.bed = bed;
      return this;
    }

    /**
     * 备注
     */
    public Builder memo(String memo) {
      this.memo = memo;
      return this;
    }

    /**
     * 服务地址详细信息
     */
    public Builder locationMinute(String locationMinute) {
      this.locationMinute = locationMinute;
      return this;
    }

    /**
     * 预约时间
     */
    public Builder serviceTime(String serviceTime) {
      this.serviceTime = serviceTime;
      return this;
    }

    /**
     * 订单类型 1-机构订单 2-居家订单
     */
    public Builder orderType(Integer orderType) {
      this.orderType = orderType;
      return this;
    }

    /**
     * 催单电话
     */
    public Builder kfPhone(String kfPhone) {
      this.kfPhone = kfPhone;
      return this;
    }

    /**
     * 0-费用刚好 1-需要支付 2-需要退款
     */
    public Builder payFlag(Integer payFlag) {
      this.payFlag = payFlag;
      return this;
    }

    /**
     * 状态描述
     */
    public Builder statusStr(String statusStr) {
      this.statusStr = statusStr;
      return this;
    }

    /**
     * 操作描述
     */
    public Builder actionStr(String actionStr) {
      this.actionStr = actionStr;
      return this;
    }

    /**
     * 客服备注
     */
    public Builder kfmemo(String kfmemo) {
      this.kfmemo = kfmemo;
      return this;
    }

    /**
     * 需交费用
     */
    public Builder wantFee(String wantFee) {
      this.wantFee = wantFee;
      return this;
    }

    /**
     * 是否长护险订单 1:长护险 2：不为长护险
     */
    public Builder insureType(Integer insureType) {
      this.insureType = insureType;
      return this;
    }

    /**
     * 申请人id
     */
    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 被陪护人id
     */
    public Builder kinsId(Long kinsId) {
      this.kinsId = kinsId;
      return this;
    }

    /**
     * 督导或者健康经理
     */
    public Builder superiorName(String superiorName) {
      this.superiorName = superiorName;
      return this;
    }

    /**
     * 门禁卡费用
     */
    public Builder extraFee(String extraFee) {
      this.extraFee = extraFee;
      return this;
    }

    /**
     * 预付金额
     */
    public Builder preRealFee(String preRealFee) {
      this.preRealFee = preRealFee;
      return this;
    }

    /**
     * 健康经理或者督导id
     */
    public Builder managerId(Long managerId) {
      this.managerId = managerId;
      return this;
    }

    /**
     * 评估状态 0-待评估 1-已评估 2-跳过评估
     */
    public Builder pgStatus(Integer pgStatus) {
      this.pgStatus = pgStatus;
      return this;
    }

    /**
     * 订单开始时间
     */
    public Builder orderStartTime(String orderStartTime) {
      this.orderStartTime = orderStartTime;
      return this;
    }

    /**
     * 订单结束时间
     */
    public Builder orderEndTime(String orderEndTime) {
      this.orderEndTime = orderEndTime;
      return this;
    }

    /**
     * 地址联系电话
     */
    public Builder addrPhone(String addrPhone) {
      this.addrPhone = addrPhone;
      return this;
    }

    /**
     * 地址联系人
     */
    public Builder addrContacts(String addrContacts) {
      this.addrContacts = addrContacts;
      return this;
    }

    /**
     * 长护险申请单id，当为长护险订单时才有值
     */
    public Builder insureNO(String insureNO) {
      this.insureNO = insureNO;
      return this;
    }

    /**
     * 科室承包状态 '0 -未定义 1 - 承包 2 - 非承包'
     */
    public Builder isAll(Integer isAll) {
      this.isAll = isAll;
      return this;
    }

    /**
     * 服务人员id
     */
    public Builder hgId(Long hgId) {
      this.hgId = hgId;
      return this;
    }

    /**
     * 安全风险评估
     */
    public Builder securityAssess(String securityAssess) {
      this.securityAssess = securityAssess;
      return this;
    }

    /**
     * 附加项校正时间
     */
    public Builder updateTime(String updateTime) {
      this.updateTime = updateTime;
      return this;
    }

    /**
     * 服务附加费调整金额
     */
    public Builder reviseFee(String reviseFee) {
      this.reviseFee = reviseFee;
      return this;
    }

    /**
     * 住院号
     */
    public Builder orgNO(String orgNO) {
      this.orgNO = orgNO;
      return this;
    }

    /**
     * 订单结算时待退款金额
     */
    public Builder needRefundFee(String needRefundFee) {
      this.needRefundFee = needRefundFee;
      return this;
    }

    /**
     * 服务套餐id
     */
    public Builder priceId(Long priceId) {
      this.priceId = priceId;
      return this;
    }

    /**
     * 科室id
     */
    public Builder branchId(Long branchId) {
      this.branchId = branchId;
      return this;
    }

    /**
     * 1-用户app下单 2-saas下单 3-企业app下单 4-用户h5下单
     */
    public Builder createType(Integer createType) {
      this.createType = createType;
      return this;
    }

    /**
     * 机构id
     */
    public Builder orgId(Long orgId) {
      this.orgId = orgId;
      return this;
    }

    /**
     * 机构名
     */
    public Builder orgName(String orgName) {
      this.orgName = orgName;
      return this;
    }

    /**
     * 科室名
     */
    public Builder branchName(String branchName) {
      this.branchName = branchName;
      return this;
    }

    @Override
    public OrderVO build() {
      return new OrderVO(orderId, createTime, service, location, status, serviceStaff, invalidTime, contactPhone, contactName, kinsName, relation, priceDesc, prepayAmount, paidFee, needPay, hospital, branch, room, bed, memo, locationMinute, serviceTime, orderType, kfPhone, payFlag, statusStr, actionStr, kfmemo, wantFee, insureType, userId, kinsId, superiorName, extraFee, preRealFee, managerId, pgStatus, orderStartTime, orderEndTime, addrPhone, addrContacts, insureNO, isAll, hgId, securityAssess, updateTime, reviseFee, orgNO, needRefundFee, priceId, branchId, createType, orgId, orgName, branchName, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OrderVO extends ProtoAdapter<OrderVO> {
    ProtoAdapter_OrderVO() {
      super(FieldEncoding.LENGTH_DELIMITED, OrderVO.class);
    }

    @Override
    public int encodedSize(OrderVO value) {
      return (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.orderId) : 0)
          + (value.createTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.createTime) : 0)
          + (value.service != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.service) : 0)
          + (value.location != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.location) : 0)
          + (value.status != null ? ProtoAdapter.INT32.encodedSizeWithTag(5, value.status) : 0)
          + (value.serviceStaff != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.serviceStaff) : 0)
          + (value.invalidTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.invalidTime) : 0)
          + (value.contactPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.contactPhone) : 0)
          + (value.contactName != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.contactName) : 0)
          + (value.kinsName != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.kinsName) : 0)
          + (value.relation != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.relation) : 0)
          + (value.priceDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.priceDesc) : 0)
          + (value.prepayAmount != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.prepayAmount) : 0)
          + (value.paidFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(15, value.paidFee) : 0)
          + (value.needPay != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.needPay) : 0)
          + (value.hospital != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.hospital) : 0)
          + (value.branch != null ? ProtoAdapter.STRING.encodedSizeWithTag(18, value.branch) : 0)
          + (value.room != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.room) : 0)
          + (value.bed != null ? ProtoAdapter.STRING.encodedSizeWithTag(20, value.bed) : 0)
          + (value.memo != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.memo) : 0)
          + (value.locationMinute != null ? ProtoAdapter.STRING.encodedSizeWithTag(22, value.locationMinute) : 0)
          + (value.serviceTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.serviceTime) : 0)
          + (value.orderType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(24, value.orderType) : 0)
          + (value.kfPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(25, value.kfPhone) : 0)
          + (value.payFlag != null ? ProtoAdapter.UINT32.encodedSizeWithTag(26, value.payFlag) : 0)
          + (value.statusStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(27, value.statusStr) : 0)
          + (value.actionStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(28, value.actionStr) : 0)
          + (value.kfmemo != null ? ProtoAdapter.STRING.encodedSizeWithTag(29, value.kfmemo) : 0)
          + (value.wantFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(30, value.wantFee) : 0)
          + (value.insureType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(31, value.insureType) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(32, value.userId) : 0)
          + (value.kinsId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(33, value.kinsId) : 0)
          + (value.superiorName != null ? ProtoAdapter.STRING.encodedSizeWithTag(34, value.superiorName) : 0)
          + (value.extraFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(35, value.extraFee) : 0)
          + (value.preRealFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(36, value.preRealFee) : 0)
          + (value.managerId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(37, value.managerId) : 0)
          + (value.pgStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(38, value.pgStatus) : 0)
          + (value.orderStartTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(39, value.orderStartTime) : 0)
          + (value.orderEndTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(40, value.orderEndTime) : 0)
          + (value.addrPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(41, value.addrPhone) : 0)
          + (value.addrContacts != null ? ProtoAdapter.STRING.encodedSizeWithTag(42, value.addrContacts) : 0)
          + (value.insureNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(43, value.insureNO) : 0)
          + (value.isAll != null ? ProtoAdapter.UINT32.encodedSizeWithTag(44, value.isAll) : 0)
          + (value.hgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(45, value.hgId) : 0)
          + (value.securityAssess != null ? ProtoAdapter.STRING.encodedSizeWithTag(46, value.securityAssess) : 0)
          + (value.updateTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(47, value.updateTime) : 0)
          + (value.reviseFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(48, value.reviseFee) : 0)
          + (value.orgNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(76, value.orgNO) : 0)
          + (value.needRefundFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(77, value.needRefundFee) : 0)
          + (value.priceId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(78, value.priceId) : 0)
          + (value.branchId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(79, value.branchId) : 0)
          + (value.createType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(80, value.createType) : 0)
          + (value.orgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(81, value.orgId) : 0)
          + (value.orgName != null ? ProtoAdapter.STRING.encodedSizeWithTag(82, value.orgName) : 0)
          + (value.branchName != null ? ProtoAdapter.STRING.encodedSizeWithTag(83, value.branchName) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OrderVO value) throws IOException {
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.orderId);
      if (value.createTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.createTime);
      if (value.service != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.service);
      if (value.location != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.location);
      if (value.status != null) ProtoAdapter.INT32.encodeWithTag(writer, 5, value.status);
      if (value.serviceStaff != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.serviceStaff);
      if (value.invalidTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.invalidTime);
      if (value.contactPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.contactPhone);
      if (value.contactName != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.contactName);
      if (value.kinsName != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.kinsName);
      if (value.relation != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.relation);
      if (value.priceDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.priceDesc);
      if (value.prepayAmount != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.prepayAmount);
      if (value.paidFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 15, value.paidFee);
      if (value.needPay != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.needPay);
      if (value.hospital != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.hospital);
      if (value.branch != null) ProtoAdapter.STRING.encodeWithTag(writer, 18, value.branch);
      if (value.room != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.room);
      if (value.bed != null) ProtoAdapter.STRING.encodeWithTag(writer, 20, value.bed);
      if (value.memo != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.memo);
      if (value.locationMinute != null) ProtoAdapter.STRING.encodeWithTag(writer, 22, value.locationMinute);
      if (value.serviceTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.serviceTime);
      if (value.orderType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 24, value.orderType);
      if (value.kfPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 25, value.kfPhone);
      if (value.payFlag != null) ProtoAdapter.UINT32.encodeWithTag(writer, 26, value.payFlag);
      if (value.statusStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 27, value.statusStr);
      if (value.actionStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 28, value.actionStr);
      if (value.kfmemo != null) ProtoAdapter.STRING.encodeWithTag(writer, 29, value.kfmemo);
      if (value.wantFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 30, value.wantFee);
      if (value.insureType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 31, value.insureType);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 32, value.userId);
      if (value.kinsId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 33, value.kinsId);
      if (value.superiorName != null) ProtoAdapter.STRING.encodeWithTag(writer, 34, value.superiorName);
      if (value.extraFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 35, value.extraFee);
      if (value.preRealFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 36, value.preRealFee);
      if (value.managerId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 37, value.managerId);
      if (value.pgStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 38, value.pgStatus);
      if (value.orderStartTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 39, value.orderStartTime);
      if (value.orderEndTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 40, value.orderEndTime);
      if (value.addrPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 41, value.addrPhone);
      if (value.addrContacts != null) ProtoAdapter.STRING.encodeWithTag(writer, 42, value.addrContacts);
      if (value.insureNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 43, value.insureNO);
      if (value.isAll != null) ProtoAdapter.UINT32.encodeWithTag(writer, 44, value.isAll);
      if (value.hgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 45, value.hgId);
      if (value.securityAssess != null) ProtoAdapter.STRING.encodeWithTag(writer, 46, value.securityAssess);
      if (value.updateTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 47, value.updateTime);
      if (value.reviseFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 48, value.reviseFee);
      if (value.orgNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 76, value.orgNO);
      if (value.needRefundFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 77, value.needRefundFee);
      if (value.priceId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 78, value.priceId);
      if (value.branchId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 79, value.branchId);
      if (value.createType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 80, value.createType);
      if (value.orgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 81, value.orgId);
      if (value.orgName != null) ProtoAdapter.STRING.encodeWithTag(writer, 82, value.orgName);
      if (value.branchName != null) ProtoAdapter.STRING.encodeWithTag(writer, 83, value.branchName);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OrderVO decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.createTime(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.service(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.location(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.status(ProtoAdapter.INT32.decode(reader)); break;
          case 6: builder.serviceStaff(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.invalidTime(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.contactPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.contactName(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.kinsName(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.relation(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.priceDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.prepayAmount(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.paidFee(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.needPay(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.hospital(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.branch(ProtoAdapter.STRING.decode(reader)); break;
          case 19: builder.room(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.bed(ProtoAdapter.STRING.decode(reader)); break;
          case 21: builder.memo(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.locationMinute(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.serviceTime(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.orderType(ProtoAdapter.UINT32.decode(reader)); break;
          case 25: builder.kfPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 26: builder.payFlag(ProtoAdapter.UINT32.decode(reader)); break;
          case 27: builder.statusStr(ProtoAdapter.STRING.decode(reader)); break;
          case 28: builder.actionStr(ProtoAdapter.STRING.decode(reader)); break;
          case 29: builder.kfmemo(ProtoAdapter.STRING.decode(reader)); break;
          case 30: builder.wantFee(ProtoAdapter.STRING.decode(reader)); break;
          case 31: builder.insureType(ProtoAdapter.UINT32.decode(reader)); break;
          case 32: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 33: builder.kinsId(ProtoAdapter.UINT64.decode(reader)); break;
          case 34: builder.superiorName(ProtoAdapter.STRING.decode(reader)); break;
          case 35: builder.extraFee(ProtoAdapter.STRING.decode(reader)); break;
          case 36: builder.preRealFee(ProtoAdapter.STRING.decode(reader)); break;
          case 37: builder.managerId(ProtoAdapter.UINT64.decode(reader)); break;
          case 38: builder.pgStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 39: builder.orderStartTime(ProtoAdapter.STRING.decode(reader)); break;
          case 40: builder.orderEndTime(ProtoAdapter.STRING.decode(reader)); break;
          case 41: builder.addrPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 42: builder.addrContacts(ProtoAdapter.STRING.decode(reader)); break;
          case 43: builder.insureNO(ProtoAdapter.STRING.decode(reader)); break;
          case 44: builder.isAll(ProtoAdapter.UINT32.decode(reader)); break;
          case 45: builder.hgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 46: builder.securityAssess(ProtoAdapter.STRING.decode(reader)); break;
          case 47: builder.updateTime(ProtoAdapter.STRING.decode(reader)); break;
          case 48: builder.reviseFee(ProtoAdapter.STRING.decode(reader)); break;
          case 76: builder.orgNO(ProtoAdapter.STRING.decode(reader)); break;
          case 77: builder.needRefundFee(ProtoAdapter.STRING.decode(reader)); break;
          case 78: builder.priceId(ProtoAdapter.UINT64.decode(reader)); break;
          case 79: builder.branchId(ProtoAdapter.UINT64.decode(reader)); break;
          case 80: builder.createType(ProtoAdapter.UINT32.decode(reader)); break;
          case 81: builder.orgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 82: builder.orgName(ProtoAdapter.STRING.decode(reader)); break;
          case 83: builder.branchName(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OrderVO redact(OrderVO value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
