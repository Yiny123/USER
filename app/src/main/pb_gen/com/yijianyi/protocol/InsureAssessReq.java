// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 1306:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 长护险审核评估
 */
public final class InsureAssessReq extends Message<InsureAssessReq, InsureAssessReq.Builder> {
  public static final ProtoAdapter<InsureAssessReq> ADAPTER = new ProtoAdapter_InsureAssessReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_INSURENO = "";

  public static final Integer DEFAULT_ASSESSTYPE = 0;

  public static final Integer DEFAULT_STATUS = 0;

  public static final String DEFAULT_REMARK = "";

  public static final String DEFAULT_REJECTDESC = "";

  public static final Long DEFAULT_HGID = 0L;

  public static final String DEFAULT_DATETIME = "";

  public static final Integer DEFAULT_ISAMENTIA = 0;

  public static final String DEFAULT_HSCASEPRESENTATION = "";

  public static final String DEFAULT_MEDICALHISTORY = "";

  /**
   * 申请批号
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String insureNO;

  /**
   * 状态 1-护士初审 2-等待提交复审 3-等待复审 4-复审通过 5-复审中  50-客服驳回 51-初审驳回(初审驳回保存) 52-复审驳回 53-已关闭 54-复审中保存备注
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer assessType;

  /**
   * 操作状态 1-通过  2-驳回     assessType == 3 时  1-确认参加，录入复审时间 2-不能参加，将申请单状态重新变为等待提交复审 3-关闭申请单
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer status;

  /**
   * 					 assessType == 5 时  1-通过  2-驳回 3-保存复审备注
   * 客服，护士，复审评估的备注
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String remark;

  /**
   * 客服，护士，复审驳回备注
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String rejectDesc;

  /**
   * 护士，护士长，健康经理id
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long hgId;

  /**
   * 预约上门时间及资质到期时间
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String dateTime;

  /**
   * 是否智障
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer isAmentia;

  /**
   * 病情描述
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String hsCasePresentation;

  /**
   * 评估情况说明
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String medicalHistory;

  /**
   * 中重度智能障碍照片
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> dysgnosiaePic;

  /**
   * 上传诊断、病历或其他照片
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> caseDiagnosePic;

  public InsureAssessReq(String insureNO, Integer assessType, Integer status, String remark, String rejectDesc, Long hgId, String dateTime, Integer isAmentia, String hsCasePresentation, String medicalHistory, List<String> dysgnosiaePic, List<String> caseDiagnosePic) {
    this(insureNO, assessType, status, remark, rejectDesc, hgId, dateTime, isAmentia, hsCasePresentation, medicalHistory, dysgnosiaePic, caseDiagnosePic, ByteString.EMPTY);
  }

  public InsureAssessReq(String insureNO, Integer assessType, Integer status, String remark, String rejectDesc, Long hgId, String dateTime, Integer isAmentia, String hsCasePresentation, String medicalHistory, List<String> dysgnosiaePic, List<String> caseDiagnosePic, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.insureNO = insureNO;
    this.assessType = assessType;
    this.status = status;
    this.remark = remark;
    this.rejectDesc = rejectDesc;
    this.hgId = hgId;
    this.dateTime = dateTime;
    this.isAmentia = isAmentia;
    this.hsCasePresentation = hsCasePresentation;
    this.medicalHistory = medicalHistory;
    this.dysgnosiaePic = Internal.immutableCopyOf("dysgnosiaePic", dysgnosiaePic);
    this.caseDiagnosePic = Internal.immutableCopyOf("caseDiagnosePic", caseDiagnosePic);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.insureNO = insureNO;
    builder.assessType = assessType;
    builder.status = status;
    builder.remark = remark;
    builder.rejectDesc = rejectDesc;
    builder.hgId = hgId;
    builder.dateTime = dateTime;
    builder.isAmentia = isAmentia;
    builder.hsCasePresentation = hsCasePresentation;
    builder.medicalHistory = medicalHistory;
    builder.dysgnosiaePic = Internal.copyOf("dysgnosiaePic", dysgnosiaePic);
    builder.caseDiagnosePic = Internal.copyOf("caseDiagnosePic", caseDiagnosePic);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof InsureAssessReq)) return false;
    InsureAssessReq o = (InsureAssessReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(insureNO, o.insureNO)
        && Internal.equals(assessType, o.assessType)
        && Internal.equals(status, o.status)
        && Internal.equals(remark, o.remark)
        && Internal.equals(rejectDesc, o.rejectDesc)
        && Internal.equals(hgId, o.hgId)
        && Internal.equals(dateTime, o.dateTime)
        && Internal.equals(isAmentia, o.isAmentia)
        && Internal.equals(hsCasePresentation, o.hsCasePresentation)
        && Internal.equals(medicalHistory, o.medicalHistory)
        && dysgnosiaePic.equals(o.dysgnosiaePic)
        && caseDiagnosePic.equals(o.caseDiagnosePic);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (insureNO != null ? insureNO.hashCode() : 0);
      result = result * 37 + (assessType != null ? assessType.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (remark != null ? remark.hashCode() : 0);
      result = result * 37 + (rejectDesc != null ? rejectDesc.hashCode() : 0);
      result = result * 37 + (hgId != null ? hgId.hashCode() : 0);
      result = result * 37 + (dateTime != null ? dateTime.hashCode() : 0);
      result = result * 37 + (isAmentia != null ? isAmentia.hashCode() : 0);
      result = result * 37 + (hsCasePresentation != null ? hsCasePresentation.hashCode() : 0);
      result = result * 37 + (medicalHistory != null ? medicalHistory.hashCode() : 0);
      result = result * 37 + dysgnosiaePic.hashCode();
      result = result * 37 + caseDiagnosePic.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (insureNO != null) builder.append(", insureNO=").append(insureNO);
    if (assessType != null) builder.append(", assessType=").append(assessType);
    if (status != null) builder.append(", status=").append(status);
    if (remark != null) builder.append(", remark=").append(remark);
    if (rejectDesc != null) builder.append(", rejectDesc=").append(rejectDesc);
    if (hgId != null) builder.append(", hgId=").append(hgId);
    if (dateTime != null) builder.append(", dateTime=").append(dateTime);
    if (isAmentia != null) builder.append(", isAmentia=").append(isAmentia);
    if (hsCasePresentation != null) builder.append(", hsCasePresentation=").append(hsCasePresentation);
    if (medicalHistory != null) builder.append(", medicalHistory=").append(medicalHistory);
    if (!dysgnosiaePic.isEmpty()) builder.append(", dysgnosiaePic=").append(dysgnosiaePic);
    if (!caseDiagnosePic.isEmpty()) builder.append(", caseDiagnosePic=").append(caseDiagnosePic);
    return builder.replace(0, 2, "InsureAssessReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<InsureAssessReq, Builder> {
    public String insureNO;

    public Integer assessType;

    public Integer status;

    public String remark;

    public String rejectDesc;

    public Long hgId;

    public String dateTime;

    public Integer isAmentia;

    public String hsCasePresentation;

    public String medicalHistory;

    public List<String> dysgnosiaePic;

    public List<String> caseDiagnosePic;

    public Builder() {
      dysgnosiaePic = Internal.newMutableList();
      caseDiagnosePic = Internal.newMutableList();
    }

    /**
     * 申请批号
     */
    public Builder insureNO(String insureNO) {
      this.insureNO = insureNO;
      return this;
    }

    /**
     * 状态 1-护士初审 2-等待提交复审 3-等待复审 4-复审通过 5-复审中  50-客服驳回 51-初审驳回(初审驳回保存) 52-复审驳回 53-已关闭 54-复审中保存备注
     */
    public Builder assessType(Integer assessType) {
      this.assessType = assessType;
      return this;
    }

    /**
     * 操作状态 1-通过  2-驳回     assessType == 3 时  1-确认参加，录入复审时间 2-不能参加，将申请单状态重新变为等待提交复审 3-关闭申请单
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 					 assessType == 5 时  1-通过  2-驳回 3-保存复审备注
     * 客服，护士，复审评估的备注
     */
    public Builder remark(String remark) {
      this.remark = remark;
      return this;
    }

    /**
     * 客服，护士，复审驳回备注
     */
    public Builder rejectDesc(String rejectDesc) {
      this.rejectDesc = rejectDesc;
      return this;
    }

    /**
     * 护士，护士长，健康经理id
     */
    public Builder hgId(Long hgId) {
      this.hgId = hgId;
      return this;
    }

    /**
     * 预约上门时间及资质到期时间
     */
    public Builder dateTime(String dateTime) {
      this.dateTime = dateTime;
      return this;
    }

    /**
     * 是否智障
     */
    public Builder isAmentia(Integer isAmentia) {
      this.isAmentia = isAmentia;
      return this;
    }

    /**
     * 病情描述
     */
    public Builder hsCasePresentation(String hsCasePresentation) {
      this.hsCasePresentation = hsCasePresentation;
      return this;
    }

    /**
     * 评估情况说明
     */
    public Builder medicalHistory(String medicalHistory) {
      this.medicalHistory = medicalHistory;
      return this;
    }

    /**
     * 中重度智能障碍照片
     */
    public Builder dysgnosiaePic(List<String> dysgnosiaePic) {
      Internal.checkElementsNotNull(dysgnosiaePic);
      this.dysgnosiaePic = dysgnosiaePic;
      return this;
    }

    /**
     * 上传诊断、病历或其他照片
     */
    public Builder caseDiagnosePic(List<String> caseDiagnosePic) {
      Internal.checkElementsNotNull(caseDiagnosePic);
      this.caseDiagnosePic = caseDiagnosePic;
      return this;
    }

    @Override
    public InsureAssessReq build() {
      return new InsureAssessReq(insureNO, assessType, status, remark, rejectDesc, hgId, dateTime, isAmentia, hsCasePresentation, medicalHistory, dysgnosiaePic, caseDiagnosePic, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_InsureAssessReq extends ProtoAdapter<InsureAssessReq> {
    ProtoAdapter_InsureAssessReq() {
      super(FieldEncoding.LENGTH_DELIMITED, InsureAssessReq.class);
    }

    @Override
    public int encodedSize(InsureAssessReq value) {
      return (value.insureNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.insureNO) : 0)
          + (value.assessType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(2, value.assessType) : 0)
          + (value.status != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.status) : 0)
          + (value.remark != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.remark) : 0)
          + (value.rejectDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.rejectDesc) : 0)
          + (value.hgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(6, value.hgId) : 0)
          + (value.dateTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.dateTime) : 0)
          + (value.isAmentia != null ? ProtoAdapter.UINT32.encodedSizeWithTag(8, value.isAmentia) : 0)
          + (value.hsCasePresentation != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.hsCasePresentation) : 0)
          + (value.medicalHistory != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.medicalHistory) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(11, value.dysgnosiaePic)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(12, value.caseDiagnosePic)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, InsureAssessReq value) throws IOException {
      if (value.insureNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.insureNO);
      if (value.assessType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.assessType);
      if (value.status != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.status);
      if (value.remark != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.remark);
      if (value.rejectDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.rejectDesc);
      if (value.hgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.hgId);
      if (value.dateTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.dateTime);
      if (value.isAmentia != null) ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.isAmentia);
      if (value.hsCasePresentation != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.hsCasePresentation);
      if (value.medicalHistory != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.medicalHistory);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 11, value.dysgnosiaePic);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 12, value.caseDiagnosePic);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public InsureAssessReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.insureNO(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.assessType(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.status(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.remark(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.rejectDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.hgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.dateTime(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.isAmentia(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.hsCasePresentation(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.medicalHistory(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.dysgnosiaePic.add(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.caseDiagnosePic.add(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public InsureAssessReq redact(InsureAssessReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
