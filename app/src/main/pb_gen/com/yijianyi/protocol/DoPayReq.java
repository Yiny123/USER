// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 261:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 预支付请求
 */
public final class DoPayReq extends Message<DoPayReq, DoPayReq.Builder> {
  public static final ProtoAdapter<DoPayReq> ADAPTER = new ProtoAdapter_DoPayReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_OPERATION = "";

  public static final Integer DEFAULT_PAYTYPE = 0;

  public static final Integer DEFAULT_RECHARGEID = 0;

  public static final String DEFAULT_RECHARGEFEE = "";

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_ITEMID = 0L;

  public static final String DEFAULT_INSURENO = "";

  public static final String DEFAULT_APPLYID = "";

  public static final String DEFAULT_AUTHCODE = "";

  public static final Long DEFAULT_HGID = 0L;

  public static final Long DEFAULT_USERID = 0L;

  public static final String DEFAULT_IP = "";

  public static final String DEFAULT_OPENID = "";

  public static final String DEFAULT_CBURL = "";

  public static final Integer DEFAULT_REQUESTSTATUS = 0;

  /**
   * 支付业务（会员充值 - PAY_RECHARGE ,支付预交金 - PAY_PREAMOUNT,结算,支付订单 - PAY_ORDER(暂时不用), 中途支付订单-PAY_ORDERSETTLE, 支付订单项-PAY_ORDERITEM, 支付强制提交长护险申请-PAY_INSURE）
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String operation;

  /**
   * 支付方式 1-支付宝 2-微信H5 3-微信app 5-现金支付 6-会员支付
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payType;

  /**
   * ----充值---
   * 充值项id（定额充值）
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer rechargeId;

  /**
   * 充值金额（任意金额充值）
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String rechargeFee;

  /**
   * ----订单支付---
   * 订单支付必传
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 支付的月份数组（中途支付使用 格式：yyyyMM）
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> months;

  /**
   * 支付订单项的id（支付订单项使用）
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long itemId;

  /**
   * ----支付长护险保证金----
   * 长护险批次号
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String insureNO;

  /**
   * ----支付自照护理员培训费--
   * 申请id
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String applyId;

  /**
   * ----SAAS扫码支付----
   * 条码
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String authCode;

  /**
   * 当前操作的员工id
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long hgId;

  /**
   * 用户id（企业端支付必传此参数）
   */
  @WireField(
      tag = 200,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 用户ip
   */
  @WireField(
      tag = 201,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String ip;

  /**
   * 微信h5支付时的openId
   */
  @WireField(
      tag = 202,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String openId;

  /**
   * 回调链接
   */
  @WireField(
      tag = 203,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cburl;

  /**
   * 订单结算是传1
   */
  @WireField(
      tag = 204,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer requestStatus;

  public DoPayReq(String operation, Integer payType, Integer rechargeId, String rechargeFee, String orderId, List<String> months, Long itemId, String insureNO, String applyId, String authCode, Long hgId, Long userId, String ip, String openId, String cburl, Integer requestStatus) {
    this(operation, payType, rechargeId, rechargeFee, orderId, months, itemId, insureNO, applyId, authCode, hgId, userId, ip, openId, cburl, requestStatus, ByteString.EMPTY);
  }

  public DoPayReq(String operation, Integer payType, Integer rechargeId, String rechargeFee, String orderId, List<String> months, Long itemId, String insureNO, String applyId, String authCode, Long hgId, Long userId, String ip, String openId, String cburl, Integer requestStatus, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.operation = operation;
    this.payType = payType;
    this.rechargeId = rechargeId;
    this.rechargeFee = rechargeFee;
    this.orderId = orderId;
    this.months = Internal.immutableCopyOf("months", months);
    this.itemId = itemId;
    this.insureNO = insureNO;
    this.applyId = applyId;
    this.authCode = authCode;
    this.hgId = hgId;
    this.userId = userId;
    this.ip = ip;
    this.openId = openId;
    this.cburl = cburl;
    this.requestStatus = requestStatus;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.operation = operation;
    builder.payType = payType;
    builder.rechargeId = rechargeId;
    builder.rechargeFee = rechargeFee;
    builder.orderId = orderId;
    builder.months = Internal.copyOf("months", months);
    builder.itemId = itemId;
    builder.insureNO = insureNO;
    builder.applyId = applyId;
    builder.authCode = authCode;
    builder.hgId = hgId;
    builder.userId = userId;
    builder.ip = ip;
    builder.openId = openId;
    builder.cburl = cburl;
    builder.requestStatus = requestStatus;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof DoPayReq)) return false;
    DoPayReq o = (DoPayReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(operation, o.operation)
        && Internal.equals(payType, o.payType)
        && Internal.equals(rechargeId, o.rechargeId)
        && Internal.equals(rechargeFee, o.rechargeFee)
        && Internal.equals(orderId, o.orderId)
        && months.equals(o.months)
        && Internal.equals(itemId, o.itemId)
        && Internal.equals(insureNO, o.insureNO)
        && Internal.equals(applyId, o.applyId)
        && Internal.equals(authCode, o.authCode)
        && Internal.equals(hgId, o.hgId)
        && Internal.equals(userId, o.userId)
        && Internal.equals(ip, o.ip)
        && Internal.equals(openId, o.openId)
        && Internal.equals(cburl, o.cburl)
        && Internal.equals(requestStatus, o.requestStatus);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (operation != null ? operation.hashCode() : 0);
      result = result * 37 + (payType != null ? payType.hashCode() : 0);
      result = result * 37 + (rechargeId != null ? rechargeId.hashCode() : 0);
      result = result * 37 + (rechargeFee != null ? rechargeFee.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + months.hashCode();
      result = result * 37 + (itemId != null ? itemId.hashCode() : 0);
      result = result * 37 + (insureNO != null ? insureNO.hashCode() : 0);
      result = result * 37 + (applyId != null ? applyId.hashCode() : 0);
      result = result * 37 + (authCode != null ? authCode.hashCode() : 0);
      result = result * 37 + (hgId != null ? hgId.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (ip != null ? ip.hashCode() : 0);
      result = result * 37 + (openId != null ? openId.hashCode() : 0);
      result = result * 37 + (cburl != null ? cburl.hashCode() : 0);
      result = result * 37 + (requestStatus != null ? requestStatus.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (operation != null) builder.append(", operation=").append(operation);
    if (payType != null) builder.append(", payType=").append(payType);
    if (rechargeId != null) builder.append(", rechargeId=").append(rechargeId);
    if (rechargeFee != null) builder.append(", rechargeFee=").append(rechargeFee);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (!months.isEmpty()) builder.append(", months=").append(months);
    if (itemId != null) builder.append(", itemId=").append(itemId);
    if (insureNO != null) builder.append(", insureNO=").append(insureNO);
    if (applyId != null) builder.append(", applyId=").append(applyId);
    if (authCode != null) builder.append(", authCode=").append(authCode);
    if (hgId != null) builder.append(", hgId=").append(hgId);
    if (userId != null) builder.append(", userId=").append(userId);
    if (ip != null) builder.append(", ip=").append(ip);
    if (openId != null) builder.append(", openId=").append(openId);
    if (cburl != null) builder.append(", cburl=").append(cburl);
    if (requestStatus != null) builder.append(", requestStatus=").append(requestStatus);
    return builder.replace(0, 2, "DoPayReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<DoPayReq, Builder> {
    public String operation;

    public Integer payType;

    public Integer rechargeId;

    public String rechargeFee;

    public String orderId;

    public List<String> months;

    public Long itemId;

    public String insureNO;

    public String applyId;

    public String authCode;

    public Long hgId;

    public Long userId;

    public String ip;

    public String openId;

    public String cburl;

    public Integer requestStatus;

    public Builder() {
      months = Internal.newMutableList();
    }

    /**
     * 支付业务（会员充值 - PAY_RECHARGE ,支付预交金 - PAY_PREAMOUNT,结算,支付订单 - PAY_ORDER(暂时不用), 中途支付订单-PAY_ORDERSETTLE, 支付订单项-PAY_ORDERITEM, 支付强制提交长护险申请-PAY_INSURE）
     */
    public Builder operation(String operation) {
      this.operation = operation;
      return this;
    }

    /**
     * 支付方式 1-支付宝 2-微信H5 3-微信app 5-现金支付 6-会员支付
     */
    public Builder payType(Integer payType) {
      this.payType = payType;
      return this;
    }

    /**
     * ----充值---
     * 充值项id（定额充值）
     */
    public Builder rechargeId(Integer rechargeId) {
      this.rechargeId = rechargeId;
      return this;
    }

    /**
     * 充值金额（任意金额充值）
     */
    public Builder rechargeFee(String rechargeFee) {
      this.rechargeFee = rechargeFee;
      return this;
    }

    /**
     * ----订单支付---
     * 订单支付必传
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 支付的月份数组（中途支付使用 格式：yyyyMM）
     */
    public Builder months(List<String> months) {
      Internal.checkElementsNotNull(months);
      this.months = months;
      return this;
    }

    /**
     * 支付订单项的id（支付订单项使用）
     */
    public Builder itemId(Long itemId) {
      this.itemId = itemId;
      return this;
    }

    /**
     * ----支付长护险保证金----
     * 长护险批次号
     */
    public Builder insureNO(String insureNO) {
      this.insureNO = insureNO;
      return this;
    }

    /**
     * ----支付自照护理员培训费--
     * 申请id
     */
    public Builder applyId(String applyId) {
      this.applyId = applyId;
      return this;
    }

    /**
     * ----SAAS扫码支付----
     * 条码
     */
    public Builder authCode(String authCode) {
      this.authCode = authCode;
      return this;
    }

    /**
     * 当前操作的员工id
     */
    public Builder hgId(Long hgId) {
      this.hgId = hgId;
      return this;
    }

    /**
     * 用户id（企业端支付必传此参数）
     */
    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 用户ip
     */
    public Builder ip(String ip) {
      this.ip = ip;
      return this;
    }

    /**
     * 微信h5支付时的openId
     */
    public Builder openId(String openId) {
      this.openId = openId;
      return this;
    }

    /**
     * 回调链接
     */
    public Builder cburl(String cburl) {
      this.cburl = cburl;
      return this;
    }

    /**
     * 订单结算是传1
     */
    public Builder requestStatus(Integer requestStatus) {
      this.requestStatus = requestStatus;
      return this;
    }

    @Override
    public DoPayReq build() {
      return new DoPayReq(operation, payType, rechargeId, rechargeFee, orderId, months, itemId, insureNO, applyId, authCode, hgId, userId, ip, openId, cburl, requestStatus, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_DoPayReq extends ProtoAdapter<DoPayReq> {
    ProtoAdapter_DoPayReq() {
      super(FieldEncoding.LENGTH_DELIMITED, DoPayReq.class);
    }

    @Override
    public int encodedSize(DoPayReq value) {
      return (value.operation != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.operation) : 0)
          + (value.payType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(2, value.payType) : 0)
          + (value.rechargeId != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.rechargeId) : 0)
          + (value.rechargeFee != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.rechargeFee) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.orderId) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(6, value.months)
          + (value.itemId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(7, value.itemId) : 0)
          + (value.insureNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.insureNO) : 0)
          + (value.applyId != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.applyId) : 0)
          + (value.authCode != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.authCode) : 0)
          + (value.hgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(11, value.hgId) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(200, value.userId) : 0)
          + (value.ip != null ? ProtoAdapter.STRING.encodedSizeWithTag(201, value.ip) : 0)
          + (value.openId != null ? ProtoAdapter.STRING.encodedSizeWithTag(202, value.openId) : 0)
          + (value.cburl != null ? ProtoAdapter.STRING.encodedSizeWithTag(203, value.cburl) : 0)
          + (value.requestStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(204, value.requestStatus) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, DoPayReq value) throws IOException {
      if (value.operation != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.operation);
      if (value.payType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 2, value.payType);
      if (value.rechargeId != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.rechargeId);
      if (value.rechargeFee != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.rechargeFee);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.orderId);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 6, value.months);
      if (value.itemId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.itemId);
      if (value.insureNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.insureNO);
      if (value.applyId != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.applyId);
      if (value.authCode != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.authCode);
      if (value.hgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.hgId);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 200, value.userId);
      if (value.ip != null) ProtoAdapter.STRING.encodeWithTag(writer, 201, value.ip);
      if (value.openId != null) ProtoAdapter.STRING.encodeWithTag(writer, 202, value.openId);
      if (value.cburl != null) ProtoAdapter.STRING.encodeWithTag(writer, 203, value.cburl);
      if (value.requestStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 204, value.requestStatus);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public DoPayReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.operation(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.payType(ProtoAdapter.UINT32.decode(reader)); break;
          case 3: builder.rechargeId(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.rechargeFee(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.months.add(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.itemId(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.insureNO(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.applyId(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.authCode(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.hgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 200: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 201: builder.ip(ProtoAdapter.STRING.decode(reader)); break;
          case 202: builder.openId(ProtoAdapter.STRING.decode(reader)); break;
          case 203: builder.cburl(ProtoAdapter.STRING.decode(reader)); break;
          case 204: builder.requestStatus(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public DoPayReq redact(DoPayReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
