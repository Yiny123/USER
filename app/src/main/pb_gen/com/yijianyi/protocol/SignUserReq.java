// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 840:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * saasApp注册信息
 */
public final class SignUserReq extends Message<SignUserReq, SignUserReq.Builder> {
  public static final ProtoAdapter<SignUserReq> ADAPTER = new ProtoAdapter_SignUserReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_PHONE = "";

  public static final String DEFAULT_CODE = "";

  /**
   * 手机号
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String phone;

  /**
   * 验证码
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String code;

  public SignUserReq(String phone, String code) {
    this(phone, code, ByteString.EMPTY);
  }

  public SignUserReq(String phone, String code, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.phone = phone;
    this.code = code;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.phone = phone;
    builder.code = code;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SignUserReq)) return false;
    SignUserReq o = (SignUserReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(phone, o.phone)
        && Internal.equals(code, o.code);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (phone != null ? phone.hashCode() : 0);
      result = result * 37 + (code != null ? code.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (phone != null) builder.append(", phone=").append(phone);
    if (code != null) builder.append(", code=").append(code);
    return builder.replace(0, 2, "SignUserReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<SignUserReq, Builder> {
    public String phone;

    public String code;

    public Builder() {
    }

    /**
     * 手机号
     */
    public Builder phone(String phone) {
      this.phone = phone;
      return this;
    }

    /**
     * 验证码
     */
    public Builder code(String code) {
      this.code = code;
      return this;
    }

    @Override
    public SignUserReq build() {
      return new SignUserReq(phone, code, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_SignUserReq extends ProtoAdapter<SignUserReq> {
    ProtoAdapter_SignUserReq() {
      super(FieldEncoding.LENGTH_DELIMITED, SignUserReq.class);
    }

    @Override
    public int encodedSize(SignUserReq value) {
      return (value.phone != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.phone) : 0)
          + (value.code != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.code) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SignUserReq value) throws IOException {
      if (value.phone != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.phone);
      if (value.code != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.code);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SignUserReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.phone(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.code(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SignUserReq redact(SignUserReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
