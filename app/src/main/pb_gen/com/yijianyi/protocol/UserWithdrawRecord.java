// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 501:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class UserWithdrawRecord extends Message<UserWithdrawRecord, UserWithdrawRecord.Builder> {
  public static final ProtoAdapter<UserWithdrawRecord> ADAPTER = new ProtoAdapter_UserWithdrawRecord();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Long DEFAULT_USERID = 0L;

  public static final Long DEFAULT_COMPANYID = 0L;

  public static final String DEFAULT_USERNAME = "";

  public static final String DEFAULT_PHONE = "";

  public static final Long DEFAULT_FEE = 0L;

  public static final Long DEFAULT_ACCOUNT = 0L;

  public static final Integer DEFAULT_STATUS = 0;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_ACCEPTTIME = 0L;

  public static final Long DEFAULT_UPDATESTAFFID = 0L;

  public static final String DEFAULT_UPDATESTAFFNAME = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 公司id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long companyId;

  /**
   * 用户名
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String userName;

  /**
   * 手机号
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String phone;

  /**
   * 提现金额
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long fee;

  /**
   * 剩余账户金额
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long account;

  /**
   * 提现状态 0-未受理 1-已受理 2-待财务处理
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer status;

  /**
   * 创建时间
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 受理时间
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long acceptTime;

  /**
   * 操作处理人id
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long updateStaffId;

  /**
   * 操作处理人
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String updateStaffName;

  public UserWithdrawRecord(Long id, Long userId, Long companyId, String userName, String phone, Long fee, Long account, Integer status, Long createTime, Long acceptTime, Long updateStaffId, String updateStaffName) {
    this(id, userId, companyId, userName, phone, fee, account, status, createTime, acceptTime, updateStaffId, updateStaffName, ByteString.EMPTY);
  }

  public UserWithdrawRecord(Long id, Long userId, Long companyId, String userName, String phone, Long fee, Long account, Integer status, Long createTime, Long acceptTime, Long updateStaffId, String updateStaffName, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.userId = userId;
    this.companyId = companyId;
    this.userName = userName;
    this.phone = phone;
    this.fee = fee;
    this.account = account;
    this.status = status;
    this.createTime = createTime;
    this.acceptTime = acceptTime;
    this.updateStaffId = updateStaffId;
    this.updateStaffName = updateStaffName;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.userId = userId;
    builder.companyId = companyId;
    builder.userName = userName;
    builder.phone = phone;
    builder.fee = fee;
    builder.account = account;
    builder.status = status;
    builder.createTime = createTime;
    builder.acceptTime = acceptTime;
    builder.updateStaffId = updateStaffId;
    builder.updateStaffName = updateStaffName;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UserWithdrawRecord)) return false;
    UserWithdrawRecord o = (UserWithdrawRecord) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(userId, o.userId)
        && Internal.equals(companyId, o.companyId)
        && Internal.equals(userName, o.userName)
        && Internal.equals(phone, o.phone)
        && Internal.equals(fee, o.fee)
        && Internal.equals(account, o.account)
        && Internal.equals(status, o.status)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(acceptTime, o.acceptTime)
        && Internal.equals(updateStaffId, o.updateStaffId)
        && Internal.equals(updateStaffName, o.updateStaffName);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (companyId != null ? companyId.hashCode() : 0);
      result = result * 37 + (userName != null ? userName.hashCode() : 0);
      result = result * 37 + (phone != null ? phone.hashCode() : 0);
      result = result * 37 + (fee != null ? fee.hashCode() : 0);
      result = result * 37 + (account != null ? account.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (acceptTime != null ? acceptTime.hashCode() : 0);
      result = result * 37 + (updateStaffId != null ? updateStaffId.hashCode() : 0);
      result = result * 37 + (updateStaffName != null ? updateStaffName.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (userId != null) builder.append(", userId=").append(userId);
    if (companyId != null) builder.append(", companyId=").append(companyId);
    if (userName != null) builder.append(", userName=").append(userName);
    if (phone != null) builder.append(", phone=").append(phone);
    if (fee != null) builder.append(", fee=").append(fee);
    if (account != null) builder.append(", account=").append(account);
    if (status != null) builder.append(", status=").append(status);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (acceptTime != null) builder.append(", acceptTime=").append(acceptTime);
    if (updateStaffId != null) builder.append(", updateStaffId=").append(updateStaffId);
    if (updateStaffName != null) builder.append(", updateStaffName=").append(updateStaffName);
    return builder.replace(0, 2, "UserWithdrawRecord{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<UserWithdrawRecord, Builder> {
    public Long id;

    public Long userId;

    public Long companyId;

    public String userName;

    public String phone;

    public Long fee;

    public Long account;

    public Integer status;

    public Long createTime;

    public Long acceptTime;

    public Long updateStaffId;

    public String updateStaffName;

    public Builder() {
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 公司id
     */
    public Builder companyId(Long companyId) {
      this.companyId = companyId;
      return this;
    }

    /**
     * 用户名
     */
    public Builder userName(String userName) {
      this.userName = userName;
      return this;
    }

    /**
     * 手机号
     */
    public Builder phone(String phone) {
      this.phone = phone;
      return this;
    }

    /**
     * 提现金额
     */
    public Builder fee(Long fee) {
      this.fee = fee;
      return this;
    }

    /**
     * 剩余账户金额
     */
    public Builder account(Long account) {
      this.account = account;
      return this;
    }

    /**
     * 提现状态 0-未受理 1-已受理 2-待财务处理
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 受理时间
     */
    public Builder acceptTime(Long acceptTime) {
      this.acceptTime = acceptTime;
      return this;
    }

    /**
     * 操作处理人id
     */
    public Builder updateStaffId(Long updateStaffId) {
      this.updateStaffId = updateStaffId;
      return this;
    }

    /**
     * 操作处理人
     */
    public Builder updateStaffName(String updateStaffName) {
      this.updateStaffName = updateStaffName;
      return this;
    }

    @Override
    public UserWithdrawRecord build() {
      return new UserWithdrawRecord(id, userId, companyId, userName, phone, fee, account, status, createTime, acceptTime, updateStaffId, updateStaffName, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UserWithdrawRecord extends ProtoAdapter<UserWithdrawRecord> {
    ProtoAdapter_UserWithdrawRecord() {
      super(FieldEncoding.LENGTH_DELIMITED, UserWithdrawRecord.class);
    }

    @Override
    public int encodedSize(UserWithdrawRecord value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.userId) : 0)
          + (value.companyId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.companyId) : 0)
          + (value.userName != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.userName) : 0)
          + (value.phone != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.phone) : 0)
          + (value.fee != null ? ProtoAdapter.UINT64.encodedSizeWithTag(6, value.fee) : 0)
          + (value.account != null ? ProtoAdapter.UINT64.encodedSizeWithTag(7, value.account) : 0)
          + (value.status != null ? ProtoAdapter.UINT32.encodedSizeWithTag(8, value.status) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.createTime) : 0)
          + (value.acceptTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(10, value.acceptTime) : 0)
          + (value.updateStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(11, value.updateStaffId) : 0)
          + (value.updateStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.updateStaffName) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UserWithdrawRecord value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.userId);
      if (value.companyId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.companyId);
      if (value.userName != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.userName);
      if (value.phone != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.phone);
      if (value.fee != null) ProtoAdapter.UINT64.encodeWithTag(writer, 6, value.fee);
      if (value.account != null) ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.account);
      if (value.status != null) ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.status);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.createTime);
      if (value.acceptTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 10, value.acceptTime);
      if (value.updateStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.updateStaffId);
      if (value.updateStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.updateStaffName);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UserWithdrawRecord decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.companyId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.userName(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.phone(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.fee(ProtoAdapter.UINT64.decode(reader)); break;
          case 7: builder.account(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.status(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.acceptTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 11: builder.updateStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 12: builder.updateStaffName(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UserWithdrawRecord redact(UserWithdrawRecord value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
