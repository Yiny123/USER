// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 470:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 订单评估结果
 */
public final class OrderAssessResult extends Message<OrderAssessResult, OrderAssessResult.Builder> {
  public static final ProtoAdapter<OrderAssessResult> ADAPTER = new ProtoAdapter_OrderAssessResult();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Integer DEFAULT_MBNUM = 0;

  public static final Double DEFAULT_TWNUM = 0.0d;

  public static final Integer DEFAULT_XYNUM = 0;

  public static final Integer DEFAULT_HXNUM = 0;

  public static final String DEFAULT_ILLDESC = "";

  public static final String DEFAULT_CJID = "";

  public static final Long DEFAULT_CJTIME = 0L;

  public static final Integer DEFAULT_CJTYPE = 0;

  public static final Integer DEFAULT_CJLEVEL = 0;

  public static final String DEFAULT_CJDESC = "";

  public static final Integer DEFAULT_COMMLEVEL = 0;

  public static final Integer DEFAULT_MINDLEVEL = 0;

  public static final Integer DEFAULT_JUJIALEVEL = 0;

  public static final Integer DEFAULT_ADLLEVEL = 0;

  public static final Integer DEFAULT_NURSELEVEL = 0;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final Long DEFAULT_HSID = 0L;

  public static final String DEFAULT_HSNAME = "";

  public static final String DEFAULT_KINSNAME = "";

  public static final Long DEFAULT_KINSID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 订单id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 病史记录
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> medicalList;

  /**
   * 脉搏次数
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer mbNum;

  /**
   * 体温
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double twNum;

  /**
   * 血压
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer xyNum;

  /**
   * 呼吸次数/每分钟
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer hxNum;

  /**
   * 并发症
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String illDesc;

  /**
   * 治疗情况
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> treatDesc;

  /**
   * 嗜好
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> hobby;

  /**
   * 残疾证号
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cjID;

  /**
   * 残疾时间
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long cjTime;

  /**
   * 残疾类别 1-视力 2-听力 3-语言 4-肢体 5-智力 6-精神 7-多重
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer cjType;

  /**
   * 残疾等级
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer cjLevel;

  /**
   * 残疾原因
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cjDesc;

  /**
   * 感知觉沟通等级
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer commLevel;

  /**
   * 精神状态等级
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer mindLevel;

  /**
   * 居家环境安全等级
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer jujiaLevel;

  /**
   * 日常生活等级
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer adlLevel;

  /**
   * 护理等级
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer nurseLevel;

  /**
   * 创建时间
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 创建员工ID
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 创建员工名称
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 评估护士id
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long hsId;

  /**
   * 评估护士名
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String hsName;

  /**
   * 被服务人名
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kinsName;

  /**
   * 被服务人id
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kinsId;

  public OrderAssessResult(Long id, String orderId, List<String> medicalList, Integer mbNum, Double twNum, Integer xyNum, Integer hxNum, String illDesc, List<String> treatDesc, List<String> hobby, String cjID, Long cjTime, Integer cjType, Integer cjLevel, String cjDesc, Integer commLevel, Integer mindLevel, Integer jujiaLevel, Integer adlLevel, Integer nurseLevel, Long createTime, Long createStaffId, String createStaffName, Long hsId, String hsName, String kinsName, Long kinsId) {
    this(id, orderId, medicalList, mbNum, twNum, xyNum, hxNum, illDesc, treatDesc, hobby, cjID, cjTime, cjType, cjLevel, cjDesc, commLevel, mindLevel, jujiaLevel, adlLevel, nurseLevel, createTime, createStaffId, createStaffName, hsId, hsName, kinsName, kinsId, ByteString.EMPTY);
  }

  public OrderAssessResult(Long id, String orderId, List<String> medicalList, Integer mbNum, Double twNum, Integer xyNum, Integer hxNum, String illDesc, List<String> treatDesc, List<String> hobby, String cjID, Long cjTime, Integer cjType, Integer cjLevel, String cjDesc, Integer commLevel, Integer mindLevel, Integer jujiaLevel, Integer adlLevel, Integer nurseLevel, Long createTime, Long createStaffId, String createStaffName, Long hsId, String hsName, String kinsName, Long kinsId, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.orderId = orderId;
    this.medicalList = Internal.immutableCopyOf("medicalList", medicalList);
    this.mbNum = mbNum;
    this.twNum = twNum;
    this.xyNum = xyNum;
    this.hxNum = hxNum;
    this.illDesc = illDesc;
    this.treatDesc = Internal.immutableCopyOf("treatDesc", treatDesc);
    this.hobby = Internal.immutableCopyOf("hobby", hobby);
    this.cjID = cjID;
    this.cjTime = cjTime;
    this.cjType = cjType;
    this.cjLevel = cjLevel;
    this.cjDesc = cjDesc;
    this.commLevel = commLevel;
    this.mindLevel = mindLevel;
    this.jujiaLevel = jujiaLevel;
    this.adlLevel = adlLevel;
    this.nurseLevel = nurseLevel;
    this.createTime = createTime;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.hsId = hsId;
    this.hsName = hsName;
    this.kinsName = kinsName;
    this.kinsId = kinsId;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.orderId = orderId;
    builder.medicalList = Internal.copyOf("medicalList", medicalList);
    builder.mbNum = mbNum;
    builder.twNum = twNum;
    builder.xyNum = xyNum;
    builder.hxNum = hxNum;
    builder.illDesc = illDesc;
    builder.treatDesc = Internal.copyOf("treatDesc", treatDesc);
    builder.hobby = Internal.copyOf("hobby", hobby);
    builder.cjID = cjID;
    builder.cjTime = cjTime;
    builder.cjType = cjType;
    builder.cjLevel = cjLevel;
    builder.cjDesc = cjDesc;
    builder.commLevel = commLevel;
    builder.mindLevel = mindLevel;
    builder.jujiaLevel = jujiaLevel;
    builder.adlLevel = adlLevel;
    builder.nurseLevel = nurseLevel;
    builder.createTime = createTime;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.hsId = hsId;
    builder.hsName = hsName;
    builder.kinsName = kinsName;
    builder.kinsId = kinsId;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof OrderAssessResult)) return false;
    OrderAssessResult o = (OrderAssessResult) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(orderId, o.orderId)
        && medicalList.equals(o.medicalList)
        && Internal.equals(mbNum, o.mbNum)
        && Internal.equals(twNum, o.twNum)
        && Internal.equals(xyNum, o.xyNum)
        && Internal.equals(hxNum, o.hxNum)
        && Internal.equals(illDesc, o.illDesc)
        && treatDesc.equals(o.treatDesc)
        && hobby.equals(o.hobby)
        && Internal.equals(cjID, o.cjID)
        && Internal.equals(cjTime, o.cjTime)
        && Internal.equals(cjType, o.cjType)
        && Internal.equals(cjLevel, o.cjLevel)
        && Internal.equals(cjDesc, o.cjDesc)
        && Internal.equals(commLevel, o.commLevel)
        && Internal.equals(mindLevel, o.mindLevel)
        && Internal.equals(jujiaLevel, o.jujiaLevel)
        && Internal.equals(adlLevel, o.adlLevel)
        && Internal.equals(nurseLevel, o.nurseLevel)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(hsId, o.hsId)
        && Internal.equals(hsName, o.hsName)
        && Internal.equals(kinsName, o.kinsName)
        && Internal.equals(kinsId, o.kinsId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + medicalList.hashCode();
      result = result * 37 + (mbNum != null ? mbNum.hashCode() : 0);
      result = result * 37 + (twNum != null ? twNum.hashCode() : 0);
      result = result * 37 + (xyNum != null ? xyNum.hashCode() : 0);
      result = result * 37 + (hxNum != null ? hxNum.hashCode() : 0);
      result = result * 37 + (illDesc != null ? illDesc.hashCode() : 0);
      result = result * 37 + treatDesc.hashCode();
      result = result * 37 + hobby.hashCode();
      result = result * 37 + (cjID != null ? cjID.hashCode() : 0);
      result = result * 37 + (cjTime != null ? cjTime.hashCode() : 0);
      result = result * 37 + (cjType != null ? cjType.hashCode() : 0);
      result = result * 37 + (cjLevel != null ? cjLevel.hashCode() : 0);
      result = result * 37 + (cjDesc != null ? cjDesc.hashCode() : 0);
      result = result * 37 + (commLevel != null ? commLevel.hashCode() : 0);
      result = result * 37 + (mindLevel != null ? mindLevel.hashCode() : 0);
      result = result * 37 + (jujiaLevel != null ? jujiaLevel.hashCode() : 0);
      result = result * 37 + (adlLevel != null ? adlLevel.hashCode() : 0);
      result = result * 37 + (nurseLevel != null ? nurseLevel.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (hsId != null ? hsId.hashCode() : 0);
      result = result * 37 + (hsName != null ? hsName.hashCode() : 0);
      result = result * 37 + (kinsName != null ? kinsName.hashCode() : 0);
      result = result * 37 + (kinsId != null ? kinsId.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (!medicalList.isEmpty()) builder.append(", medicalList=").append(medicalList);
    if (mbNum != null) builder.append(", mbNum=").append(mbNum);
    if (twNum != null) builder.append(", twNum=").append(twNum);
    if (xyNum != null) builder.append(", xyNum=").append(xyNum);
    if (hxNum != null) builder.append(", hxNum=").append(hxNum);
    if (illDesc != null) builder.append(", illDesc=").append(illDesc);
    if (!treatDesc.isEmpty()) builder.append(", treatDesc=").append(treatDesc);
    if (!hobby.isEmpty()) builder.append(", hobby=").append(hobby);
    if (cjID != null) builder.append(", cjID=").append(cjID);
    if (cjTime != null) builder.append(", cjTime=").append(cjTime);
    if (cjType != null) builder.append(", cjType=").append(cjType);
    if (cjLevel != null) builder.append(", cjLevel=").append(cjLevel);
    if (cjDesc != null) builder.append(", cjDesc=").append(cjDesc);
    if (commLevel != null) builder.append(", commLevel=").append(commLevel);
    if (mindLevel != null) builder.append(", mindLevel=").append(mindLevel);
    if (jujiaLevel != null) builder.append(", jujiaLevel=").append(jujiaLevel);
    if (adlLevel != null) builder.append(", adlLevel=").append(adlLevel);
    if (nurseLevel != null) builder.append(", nurseLevel=").append(nurseLevel);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (hsId != null) builder.append(", hsId=").append(hsId);
    if (hsName != null) builder.append(", hsName=").append(hsName);
    if (kinsName != null) builder.append(", kinsName=").append(kinsName);
    if (kinsId != null) builder.append(", kinsId=").append(kinsId);
    return builder.replace(0, 2, "OrderAssessResult{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<OrderAssessResult, Builder> {
    public Long id;

    public String orderId;

    public List<String> medicalList;

    public Integer mbNum;

    public Double twNum;

    public Integer xyNum;

    public Integer hxNum;

    public String illDesc;

    public List<String> treatDesc;

    public List<String> hobby;

    public String cjID;

    public Long cjTime;

    public Integer cjType;

    public Integer cjLevel;

    public String cjDesc;

    public Integer commLevel;

    public Integer mindLevel;

    public Integer jujiaLevel;

    public Integer adlLevel;

    public Integer nurseLevel;

    public Long createTime;

    public Long createStaffId;

    public String createStaffName;

    public Long hsId;

    public String hsName;

    public String kinsName;

    public Long kinsId;

    public Builder() {
      medicalList = Internal.newMutableList();
      treatDesc = Internal.newMutableList();
      hobby = Internal.newMutableList();
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 订单id
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 病史记录
     */
    public Builder medicalList(List<String> medicalList) {
      Internal.checkElementsNotNull(medicalList);
      this.medicalList = medicalList;
      return this;
    }

    /**
     * 脉搏次数
     */
    public Builder mbNum(Integer mbNum) {
      this.mbNum = mbNum;
      return this;
    }

    /**
     * 体温
     */
    public Builder twNum(Double twNum) {
      this.twNum = twNum;
      return this;
    }

    /**
     * 血压
     */
    public Builder xyNum(Integer xyNum) {
      this.xyNum = xyNum;
      return this;
    }

    /**
     * 呼吸次数/每分钟
     */
    public Builder hxNum(Integer hxNum) {
      this.hxNum = hxNum;
      return this;
    }

    /**
     * 并发症
     */
    public Builder illDesc(String illDesc) {
      this.illDesc = illDesc;
      return this;
    }

    /**
     * 治疗情况
     */
    public Builder treatDesc(List<String> treatDesc) {
      Internal.checkElementsNotNull(treatDesc);
      this.treatDesc = treatDesc;
      return this;
    }

    /**
     * 嗜好
     */
    public Builder hobby(List<String> hobby) {
      Internal.checkElementsNotNull(hobby);
      this.hobby = hobby;
      return this;
    }

    /**
     * 残疾证号
     */
    public Builder cjID(String cjID) {
      this.cjID = cjID;
      return this;
    }

    /**
     * 残疾时间
     */
    public Builder cjTime(Long cjTime) {
      this.cjTime = cjTime;
      return this;
    }

    /**
     * 残疾类别 1-视力 2-听力 3-语言 4-肢体 5-智力 6-精神 7-多重
     */
    public Builder cjType(Integer cjType) {
      this.cjType = cjType;
      return this;
    }

    /**
     * 残疾等级
     */
    public Builder cjLevel(Integer cjLevel) {
      this.cjLevel = cjLevel;
      return this;
    }

    /**
     * 残疾原因
     */
    public Builder cjDesc(String cjDesc) {
      this.cjDesc = cjDesc;
      return this;
    }

    /**
     * 感知觉沟通等级
     */
    public Builder commLevel(Integer commLevel) {
      this.commLevel = commLevel;
      return this;
    }

    /**
     * 精神状态等级
     */
    public Builder mindLevel(Integer mindLevel) {
      this.mindLevel = mindLevel;
      return this;
    }

    /**
     * 居家环境安全等级
     */
    public Builder jujiaLevel(Integer jujiaLevel) {
      this.jujiaLevel = jujiaLevel;
      return this;
    }

    /**
     * 日常生活等级
     */
    public Builder adlLevel(Integer adlLevel) {
      this.adlLevel = adlLevel;
      return this;
    }

    /**
     * 护理等级
     */
    public Builder nurseLevel(Integer nurseLevel) {
      this.nurseLevel = nurseLevel;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 创建员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 创建员工名称
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 评估护士id
     */
    public Builder hsId(Long hsId) {
      this.hsId = hsId;
      return this;
    }

    /**
     * 评估护士名
     */
    public Builder hsName(String hsName) {
      this.hsName = hsName;
      return this;
    }

    /**
     * 被服务人名
     */
    public Builder kinsName(String kinsName) {
      this.kinsName = kinsName;
      return this;
    }

    /**
     * 被服务人id
     */
    public Builder kinsId(Long kinsId) {
      this.kinsId = kinsId;
      return this;
    }

    @Override
    public OrderAssessResult build() {
      return new OrderAssessResult(id, orderId, medicalList, mbNum, twNum, xyNum, hxNum, illDesc, treatDesc, hobby, cjID, cjTime, cjType, cjLevel, cjDesc, commLevel, mindLevel, jujiaLevel, adlLevel, nurseLevel, createTime, createStaffId, createStaffName, hsId, hsName, kinsName, kinsId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_OrderAssessResult extends ProtoAdapter<OrderAssessResult> {
    ProtoAdapter_OrderAssessResult() {
      super(FieldEncoding.LENGTH_DELIMITED, OrderAssessResult.class);
    }

    @Override
    public int encodedSize(OrderAssessResult value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.orderId) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.medicalList)
          + (value.mbNum != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.mbNum) : 0)
          + (value.twNum != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(5, value.twNum) : 0)
          + (value.xyNum != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.xyNum) : 0)
          + (value.hxNum != null ? ProtoAdapter.UINT32.encodedSizeWithTag(7, value.hxNum) : 0)
          + (value.illDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.illDesc) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(9, value.treatDesc)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(10, value.hobby)
          + (value.cjID != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.cjID) : 0)
          + (value.cjTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(12, value.cjTime) : 0)
          + (value.cjType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(13, value.cjType) : 0)
          + (value.cjLevel != null ? ProtoAdapter.UINT32.encodedSizeWithTag(14, value.cjLevel) : 0)
          + (value.cjDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(15, value.cjDesc) : 0)
          + (value.commLevel != null ? ProtoAdapter.UINT32.encodedSizeWithTag(16, value.commLevel) : 0)
          + (value.mindLevel != null ? ProtoAdapter.UINT32.encodedSizeWithTag(17, value.mindLevel) : 0)
          + (value.jujiaLevel != null ? ProtoAdapter.UINT32.encodedSizeWithTag(18, value.jujiaLevel) : 0)
          + (value.adlLevel != null ? ProtoAdapter.UINT32.encodedSizeWithTag(19, value.adlLevel) : 0)
          + (value.nurseLevel != null ? ProtoAdapter.UINT32.encodedSizeWithTag(20, value.nurseLevel) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(21, value.createTime) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(22, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.createStaffName) : 0)
          + (value.hsId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(24, value.hsId) : 0)
          + (value.hsName != null ? ProtoAdapter.STRING.encodedSizeWithTag(25, value.hsName) : 0)
          + (value.kinsName != null ? ProtoAdapter.STRING.encodedSizeWithTag(26, value.kinsName) : 0)
          + (value.kinsId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(27, value.kinsId) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, OrderAssessResult value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.orderId);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.medicalList);
      if (value.mbNum != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.mbNum);
      if (value.twNum != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 5, value.twNum);
      if (value.xyNum != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.xyNum);
      if (value.hxNum != null) ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.hxNum);
      if (value.illDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.illDesc);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 9, value.treatDesc);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 10, value.hobby);
      if (value.cjID != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.cjID);
      if (value.cjTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 12, value.cjTime);
      if (value.cjType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.cjType);
      if (value.cjLevel != null) ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.cjLevel);
      if (value.cjDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 15, value.cjDesc);
      if (value.commLevel != null) ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.commLevel);
      if (value.mindLevel != null) ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.mindLevel);
      if (value.jujiaLevel != null) ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.jujiaLevel);
      if (value.adlLevel != null) ProtoAdapter.UINT32.encodeWithTag(writer, 19, value.adlLevel);
      if (value.nurseLevel != null) ProtoAdapter.UINT32.encodeWithTag(writer, 20, value.nurseLevel);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 21, value.createTime);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 22, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.createStaffName);
      if (value.hsId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 24, value.hsId);
      if (value.hsName != null) ProtoAdapter.STRING.encodeWithTag(writer, 25, value.hsName);
      if (value.kinsName != null) ProtoAdapter.STRING.encodeWithTag(writer, 26, value.kinsName);
      if (value.kinsId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 27, value.kinsId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public OrderAssessResult decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.medicalList.add(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.mbNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.twNum(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 6: builder.xyNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.hxNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.illDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.treatDesc.add(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.hobby.add(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.cjID(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.cjTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 13: builder.cjType(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.cjLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.cjDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.commLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 17: builder.mindLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 18: builder.jujiaLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.adlLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 20: builder.nurseLevel(ProtoAdapter.UINT32.decode(reader)); break;
          case 21: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 22: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 23: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.hsId(ProtoAdapter.UINT64.decode(reader)); break;
          case 25: builder.hsName(ProtoAdapter.STRING.decode(reader)); break;
          case 26: builder.kinsName(ProtoAdapter.STRING.decode(reader)); break;
          case 27: builder.kinsId(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public OrderAssessResult redact(OrderAssessResult value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
