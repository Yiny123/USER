// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 1204:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 财务记录
 */
public final class FinanceRecord extends Message<FinanceRecord, FinanceRecord.Builder> {
  public static final ProtoAdapter<FinanceRecord> ADAPTER = new ProtoAdapter_FinanceRecord();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Long DEFAULT_COMPANYID = 0L;

  public static final Long DEFAULT_WITHDRAWID = 0L;

  public static final Long DEFAULT_USERID = 0L;

  public static final String DEFAULT_USERNAME = "";

  public static final String DEFAULT_PHONE = "";

  public static final Integer DEFAULT_PAYTYPE = 0;

  public static final String DEFAULT_NOTENO = "";

  public static final Long DEFAULT_FEE = 0L;

  public static final String DEFAULT_FEESTR = "";

  public static final String DEFAULT_REALNAME = "";

  public static final String DEFAULT_CARDNO = "";

  public static final String DEFAULT_BANKBRANCH = "";

  public static final Integer DEFAULT_STATUS = 0;

  public static final Integer DEFAULT_WITHDRAWSTATUS = 0;

  public static final String DEFAULT_FAILUREREMARK = "";

  public static final Long DEFAULT_ACCEPTTIME = 0L;

  public static final Long DEFAULT_WITHDRAWTIME = 0L;

  public static final Long DEFAULT_PAYTIME = 0L;

  public static final Long DEFAULT_UPDATESTAFFID = 0L;

  public static final String DEFAULT_UPDATESTAFFNAME = "";

  public static final Long DEFAULT_CREATETIME = 0L;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 公司id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long companyId;

  /**
   * 提现记录id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long withdrawId;

  /**
   * 用户id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 用户名
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String userName;

  /**
   * 手机号
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String phone;

  /**
   * 支付方式
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payType;

  /**
   * 小票单号
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String noteNO;

  /**
   * 提现金额
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long fee;

  /**
   * 提现金额（元）
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String feeStr;

  /**
   * 实名
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String realName;

  /**
   * 银行卡号
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cardNO;

  /**
   * 银行支行
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bankBranch;

  /**
   * 处理状态  0-待处理  1-已处理
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer status;

  /**
   * 提现状态 0-未知 1-成功 2-失败
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer withdrawStatus;

  /**
   * 失败原因
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String failureRemark;

  /**
   * 处理时间
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long acceptTime;

  /**
   * 提现时间
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long withdrawTime;

  /**
   * 支付时间
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long payTime;

  /**
   * 操作员工ID
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long updateStaffId;

  /**
   * 操作员工名称
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String updateStaffName;

  /**
   * 创建时间
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  public FinanceRecord(Long id, Long companyId, Long withdrawId, Long userId, String userName, String phone, Integer payType, String noteNO, Long fee, String feeStr, String realName, String cardNO, String bankBranch, Integer status, Integer withdrawStatus, String failureRemark, Long acceptTime, Long withdrawTime, Long payTime, Long updateStaffId, String updateStaffName, Long createTime) {
    this(id, companyId, withdrawId, userId, userName, phone, payType, noteNO, fee, feeStr, realName, cardNO, bankBranch, status, withdrawStatus, failureRemark, acceptTime, withdrawTime, payTime, updateStaffId, updateStaffName, createTime, ByteString.EMPTY);
  }

  public FinanceRecord(Long id, Long companyId, Long withdrawId, Long userId, String userName, String phone, Integer payType, String noteNO, Long fee, String feeStr, String realName, String cardNO, String bankBranch, Integer status, Integer withdrawStatus, String failureRemark, Long acceptTime, Long withdrawTime, Long payTime, Long updateStaffId, String updateStaffName, Long createTime, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.companyId = companyId;
    this.withdrawId = withdrawId;
    this.userId = userId;
    this.userName = userName;
    this.phone = phone;
    this.payType = payType;
    this.noteNO = noteNO;
    this.fee = fee;
    this.feeStr = feeStr;
    this.realName = realName;
    this.cardNO = cardNO;
    this.bankBranch = bankBranch;
    this.status = status;
    this.withdrawStatus = withdrawStatus;
    this.failureRemark = failureRemark;
    this.acceptTime = acceptTime;
    this.withdrawTime = withdrawTime;
    this.payTime = payTime;
    this.updateStaffId = updateStaffId;
    this.updateStaffName = updateStaffName;
    this.createTime = createTime;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.companyId = companyId;
    builder.withdrawId = withdrawId;
    builder.userId = userId;
    builder.userName = userName;
    builder.phone = phone;
    builder.payType = payType;
    builder.noteNO = noteNO;
    builder.fee = fee;
    builder.feeStr = feeStr;
    builder.realName = realName;
    builder.cardNO = cardNO;
    builder.bankBranch = bankBranch;
    builder.status = status;
    builder.withdrawStatus = withdrawStatus;
    builder.failureRemark = failureRemark;
    builder.acceptTime = acceptTime;
    builder.withdrawTime = withdrawTime;
    builder.payTime = payTime;
    builder.updateStaffId = updateStaffId;
    builder.updateStaffName = updateStaffName;
    builder.createTime = createTime;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof FinanceRecord)) return false;
    FinanceRecord o = (FinanceRecord) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(companyId, o.companyId)
        && Internal.equals(withdrawId, o.withdrawId)
        && Internal.equals(userId, o.userId)
        && Internal.equals(userName, o.userName)
        && Internal.equals(phone, o.phone)
        && Internal.equals(payType, o.payType)
        && Internal.equals(noteNO, o.noteNO)
        && Internal.equals(fee, o.fee)
        && Internal.equals(feeStr, o.feeStr)
        && Internal.equals(realName, o.realName)
        && Internal.equals(cardNO, o.cardNO)
        && Internal.equals(bankBranch, o.bankBranch)
        && Internal.equals(status, o.status)
        && Internal.equals(withdrawStatus, o.withdrawStatus)
        && Internal.equals(failureRemark, o.failureRemark)
        && Internal.equals(acceptTime, o.acceptTime)
        && Internal.equals(withdrawTime, o.withdrawTime)
        && Internal.equals(payTime, o.payTime)
        && Internal.equals(updateStaffId, o.updateStaffId)
        && Internal.equals(updateStaffName, o.updateStaffName)
        && Internal.equals(createTime, o.createTime);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (companyId != null ? companyId.hashCode() : 0);
      result = result * 37 + (withdrawId != null ? withdrawId.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (userName != null ? userName.hashCode() : 0);
      result = result * 37 + (phone != null ? phone.hashCode() : 0);
      result = result * 37 + (payType != null ? payType.hashCode() : 0);
      result = result * 37 + (noteNO != null ? noteNO.hashCode() : 0);
      result = result * 37 + (fee != null ? fee.hashCode() : 0);
      result = result * 37 + (feeStr != null ? feeStr.hashCode() : 0);
      result = result * 37 + (realName != null ? realName.hashCode() : 0);
      result = result * 37 + (cardNO != null ? cardNO.hashCode() : 0);
      result = result * 37 + (bankBranch != null ? bankBranch.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (withdrawStatus != null ? withdrawStatus.hashCode() : 0);
      result = result * 37 + (failureRemark != null ? failureRemark.hashCode() : 0);
      result = result * 37 + (acceptTime != null ? acceptTime.hashCode() : 0);
      result = result * 37 + (withdrawTime != null ? withdrawTime.hashCode() : 0);
      result = result * 37 + (payTime != null ? payTime.hashCode() : 0);
      result = result * 37 + (updateStaffId != null ? updateStaffId.hashCode() : 0);
      result = result * 37 + (updateStaffName != null ? updateStaffName.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (companyId != null) builder.append(", companyId=").append(companyId);
    if (withdrawId != null) builder.append(", withdrawId=").append(withdrawId);
    if (userId != null) builder.append(", userId=").append(userId);
    if (userName != null) builder.append(", userName=").append(userName);
    if (phone != null) builder.append(", phone=").append(phone);
    if (payType != null) builder.append(", payType=").append(payType);
    if (noteNO != null) builder.append(", noteNO=").append(noteNO);
    if (fee != null) builder.append(", fee=").append(fee);
    if (feeStr != null) builder.append(", feeStr=").append(feeStr);
    if (realName != null) builder.append(", realName=").append(realName);
    if (cardNO != null) builder.append(", cardNO=").append(cardNO);
    if (bankBranch != null) builder.append(", bankBranch=").append(bankBranch);
    if (status != null) builder.append(", status=").append(status);
    if (withdrawStatus != null) builder.append(", withdrawStatus=").append(withdrawStatus);
    if (failureRemark != null) builder.append(", failureRemark=").append(failureRemark);
    if (acceptTime != null) builder.append(", acceptTime=").append(acceptTime);
    if (withdrawTime != null) builder.append(", withdrawTime=").append(withdrawTime);
    if (payTime != null) builder.append(", payTime=").append(payTime);
    if (updateStaffId != null) builder.append(", updateStaffId=").append(updateStaffId);
    if (updateStaffName != null) builder.append(", updateStaffName=").append(updateStaffName);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    return builder.replace(0, 2, "FinanceRecord{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<FinanceRecord, Builder> {
    public Long id;

    public Long companyId;

    public Long withdrawId;

    public Long userId;

    public String userName;

    public String phone;

    public Integer payType;

    public String noteNO;

    public Long fee;

    public String feeStr;

    public String realName;

    public String cardNO;

    public String bankBranch;

    public Integer status;

    public Integer withdrawStatus;

    public String failureRemark;

    public Long acceptTime;

    public Long withdrawTime;

    public Long payTime;

    public Long updateStaffId;

    public String updateStaffName;

    public Long createTime;

    public Builder() {
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 公司id
     */
    public Builder companyId(Long companyId) {
      this.companyId = companyId;
      return this;
    }

    /**
     * 提现记录id
     */
    public Builder withdrawId(Long withdrawId) {
      this.withdrawId = withdrawId;
      return this;
    }

    /**
     * 用户id
     */
    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 用户名
     */
    public Builder userName(String userName) {
      this.userName = userName;
      return this;
    }

    /**
     * 手机号
     */
    public Builder phone(String phone) {
      this.phone = phone;
      return this;
    }

    /**
     * 支付方式
     */
    public Builder payType(Integer payType) {
      this.payType = payType;
      return this;
    }

    /**
     * 小票单号
     */
    public Builder noteNO(String noteNO) {
      this.noteNO = noteNO;
      return this;
    }

    /**
     * 提现金额
     */
    public Builder fee(Long fee) {
      this.fee = fee;
      return this;
    }

    /**
     * 提现金额（元）
     */
    public Builder feeStr(String feeStr) {
      this.feeStr = feeStr;
      return this;
    }

    /**
     * 实名
     */
    public Builder realName(String realName) {
      this.realName = realName;
      return this;
    }

    /**
     * 银行卡号
     */
    public Builder cardNO(String cardNO) {
      this.cardNO = cardNO;
      return this;
    }

    /**
     * 银行支行
     */
    public Builder bankBranch(String bankBranch) {
      this.bankBranch = bankBranch;
      return this;
    }

    /**
     * 处理状态  0-待处理  1-已处理
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 提现状态 0-未知 1-成功 2-失败
     */
    public Builder withdrawStatus(Integer withdrawStatus) {
      this.withdrawStatus = withdrawStatus;
      return this;
    }

    /**
     * 失败原因
     */
    public Builder failureRemark(String failureRemark) {
      this.failureRemark = failureRemark;
      return this;
    }

    /**
     * 处理时间
     */
    public Builder acceptTime(Long acceptTime) {
      this.acceptTime = acceptTime;
      return this;
    }

    /**
     * 提现时间
     */
    public Builder withdrawTime(Long withdrawTime) {
      this.withdrawTime = withdrawTime;
      return this;
    }

    /**
     * 支付时间
     */
    public Builder payTime(Long payTime) {
      this.payTime = payTime;
      return this;
    }

    /**
     * 操作员工ID
     */
    public Builder updateStaffId(Long updateStaffId) {
      this.updateStaffId = updateStaffId;
      return this;
    }

    /**
     * 操作员工名称
     */
    public Builder updateStaffName(String updateStaffName) {
      this.updateStaffName = updateStaffName;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    @Override
    public FinanceRecord build() {
      return new FinanceRecord(id, companyId, withdrawId, userId, userName, phone, payType, noteNO, fee, feeStr, realName, cardNO, bankBranch, status, withdrawStatus, failureRemark, acceptTime, withdrawTime, payTime, updateStaffId, updateStaffName, createTime, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_FinanceRecord extends ProtoAdapter<FinanceRecord> {
    ProtoAdapter_FinanceRecord() {
      super(FieldEncoding.LENGTH_DELIMITED, FinanceRecord.class);
    }

    @Override
    public int encodedSize(FinanceRecord value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.companyId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.companyId) : 0)
          + (value.withdrawId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.withdrawId) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.userId) : 0)
          + (value.userName != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.userName) : 0)
          + (value.phone != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.phone) : 0)
          + (value.payType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(7, value.payType) : 0)
          + (value.noteNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.noteNO) : 0)
          + (value.fee != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.fee) : 0)
          + (value.feeStr != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.feeStr) : 0)
          + (value.realName != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.realName) : 0)
          + (value.cardNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.cardNO) : 0)
          + (value.bankBranch != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.bankBranch) : 0)
          + (value.status != null ? ProtoAdapter.UINT32.encodedSizeWithTag(14, value.status) : 0)
          + (value.withdrawStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(15, value.withdrawStatus) : 0)
          + (value.failureRemark != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.failureRemark) : 0)
          + (value.acceptTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(17, value.acceptTime) : 0)
          + (value.withdrawTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(18, value.withdrawTime) : 0)
          + (value.payTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(19, value.payTime) : 0)
          + (value.updateStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(20, value.updateStaffId) : 0)
          + (value.updateStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.updateStaffName) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(22, value.createTime) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, FinanceRecord value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.companyId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.companyId);
      if (value.withdrawId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.withdrawId);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.userId);
      if (value.userName != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.userName);
      if (value.phone != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.phone);
      if (value.payType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.payType);
      if (value.noteNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.noteNO);
      if (value.fee != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.fee);
      if (value.feeStr != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.feeStr);
      if (value.realName != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.realName);
      if (value.cardNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.cardNO);
      if (value.bankBranch != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.bankBranch);
      if (value.status != null) ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.status);
      if (value.withdrawStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.withdrawStatus);
      if (value.failureRemark != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.failureRemark);
      if (value.acceptTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 17, value.acceptTime);
      if (value.withdrawTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 18, value.withdrawTime);
      if (value.payTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 19, value.payTime);
      if (value.updateStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 20, value.updateStaffId);
      if (value.updateStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.updateStaffName);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 22, value.createTime);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public FinanceRecord decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.companyId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.withdrawId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.userName(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.phone(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.payType(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.noteNO(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.fee(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.feeStr(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.realName(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.cardNO(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.bankBranch(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.status(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.withdrawStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.failureRemark(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.acceptTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 18: builder.withdrawTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 19: builder.payTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 20: builder.updateStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 21: builder.updateStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public FinanceRecord redact(FinanceRecord value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
