// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 7:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class HGBaseInfo extends Message<HGBaseInfo, HGBaseInfo.Builder> {
  public static final ProtoAdapter<HGBaseInfo> ADAPTER = new ProtoAdapter_HGBaseInfo();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_PHONE = "";

  public static final String DEFAULT_PWD = "";

  public static final Integer DEFAULT_STATE = 0;

  public static final String DEFAULT_FULLNAME = "";

  public static final Integer DEFAULT_SEX = 0;

  public static final String DEFAULT_BIRTHDAY = "";

  public static final String DEFAULT_PIC = "";

  public static final String DEFAULT_NATIVEPLACE = "";

  public static final String DEFAULT_PROVINCE = "";

  public static final String DEFAULT_CITY = "";

  public static final String DEFAULT_DISTRICT = "";

  public static final String DEFAULT_ADDRESS = "";

  public static final String DEFAULT_LANGUAGE = "";

  public static final String DEFAULT_RELIGION = "";

  public static final String DEFAULT_NATION = "";

  public static final String DEFAULT_HEIGHT = "";

  public static final String DEFAULT_WEIGHT = "";

  public static final Integer DEFAULT_MARRIAGE = 0;

  public static final Integer DEFAULT_EDUCATION = 0;

  public static final String DEFAULT_IDCARD = "";

  public static final String DEFAULT_IDCARDPIC = "";

  public static final String DEFAULT_IDCARDPIC2 = "";

  public static final String DEFAULT_IDCARDPIC3 = "";

  public static final Long DEFAULT_IDCARDEXPIREDDATE = 0L;

  public static final String DEFAULT_HEALTHCERTIFICATE = "";

  public static final String DEFAULT_NURSINGCERTIFICATE = "";

  public static final Long DEFAULT_CREATECOMPANY = 0L;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Integer DEFAULT_CREATETYPE = 0;

  public static final String DEFAULT_CREATECHANNEL = "";

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final String DEFAULT_RONGTOKEN = "";

  public static final String DEFAULT_JPUSHREGISTID = "";

  public static final Integer DEFAULT_ACTIVESTATE = 0;

  public static final Long DEFAULT_CAREERSTARTTIME = 0L;

  public static final String DEFAULT_EMERGENCYCONTACT = "";

  public static final String DEFAULT_EMERGENCYCONTACTPHONE = "";

  public static final String DEFAULT_BUILDING = "";

  public static final Integer DEFAULT_ONSERVICE = 0;

  public static final String DEFAULT_MPQRCODE = "";

  public static final String DEFAULT_SIGNPIC = "";

  public static final String DEFAULT_GOODATPROJECT = "";

  public static final Integer DEFAULT_SERVICENUM = 0;

  public static final String DEFAULT_BANKNAME = "";

  public static final String DEFAULT_BANKNO = "";

  public static final Integer DEFAULT_JOBTITLE = 0;

  public static final String DEFAULT_SERVICEORG = "";

  public static final String DEFAULT_MEDICALREPORT = "";

  public static final String DEFAULT_CERTIFICATION = "";

  /**
   * 护工id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 手机号
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String phone;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String pwd;

  /**
   * 护工的状态  1- 在职 2-离职
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer state;

  /**
   * 全名
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String fullName;

  /**
   * 0未设置 1男 2 女
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sex;

  /**
   * 生日
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String birthday;

  /**
   * 个人照片
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String pic;

  /**
   * 籍贯
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nativeplace;

  /**
   * 省份
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String province;

  /**
   * 城市
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String city;

  /**
   * 区
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String district;

  /**
   * 详细居住地址
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String address;

  /**
   * 多种语言用,分割
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String language;

  /**
   * 宗教
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String religion;

  /**
   * 民族
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nation;

  /**
   * 身高cm
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String height;

  /**
   * 体重kg
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String weight;

  /**
   * 婚姻状态 0-未知 1-未婚 2-已婚 3-离异
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer marriage;

  /**
   * 教育程度 0-未知 1-不识字  2-小学  3-初中 4-高中 5-中专 6-大专 7-本科 8-研究生 9-博士
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer education;

  /**
   * 身份证号码
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcard;

  /**
   * 身份证正面照
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcardpic;

  /**
   * 身份证反面照片
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcardpic2;

  /**
   * 身份证手持照片
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcardpic3;

  /**
   * 身份证有效期
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long idcardExpiredDate;

  /**
   * 健康证
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String healthCertificate;

  /**
   * 护理证
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nursingCertificate;

  /**
   * 创建公司 10000-易简医
   */
  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createCompany;

  /**
   * 创建时间
   */
  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 1.自己注册 2.公司添加
   */
  @WireField(
      tag = 30,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer createType;

  /**
   * 创建渠道
   */
  @WireField(
      tag = 31,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createChannel;

  /**
   * 创建员工的id
   */
  @WireField(
      tag = 32,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 创建员工的姓名
   */
  @WireField(
      tag = 33,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 融云Token
   */
  @WireField(
      tag = 34,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String rongToken;

  /**
   * 极光推送设备ID
   */
  @WireField(
      tag = 35,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String jpushRegistid;

  /**
   * 用户活跃状态 1 - 未登录 2 - 登录
   */
  @WireField(
      tag = 36,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer activeState;

  /**
   * 护工工作开始时间, 用于计算工龄
   */
  @WireField(
      tag = 37,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long careerStartTime;

  /**
   * 紧急联系人
   */
  @WireField(
      tag = 38,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String emergencyContact;

  /**
   * 紧急联系人手机号
   */
  @WireField(
      tag = 39,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String emergencyContactPhone;

  /**
   * 居住地
   */
  @WireField(
      tag = 40,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String building;

  /**
   * 0-空闲 1-专陪服务中 2-多陪服务中
   */
  @WireField(
      tag = 41,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer onService;

  /**
   * 公众号二维码地址
   */
  @WireField(
      tag = 42,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String mpQRCode;

  /**
   * 签名图片
   */
  @WireField(
      tag = 43,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String signPic;

  /**
   * 其他证件
   */
  @WireField(
      tag = 44,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> otherCertificate;

  /**
   * 擅长项目
   */
  @WireField(
      tag = 45,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String goodAtProject;

  /**
   * 已服务人数
   */
  @WireField(
      tag = 46,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer serviceNum;

  /**
   * 开户支行
   */
  @WireField(
      tag = 47,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bankName;

  /**
   * 银行卡号
   */
  @WireField(
      tag = 48,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bankNO;

  /**
   * 职称 0-无 1-护士主任 2-护士 3-护师 4-护士副主任
   */
  @WireField(
      tag = 49,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer jobTitle;

  /**
   * 服务机构
   */
  @WireField(
      tag = 50,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceOrg;

  /**
   * 体检报告
   */
  @WireField(
      tag = 51,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String medicalReport;

  /**
   * 资格证
   */
  @WireField(
      tag = 52,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String certification;

  public HGBaseInfo(Long id, String phone, String pwd, Integer state, String fullName, Integer sex, String birthday, String pic, String nativeplace, String province, String city, String district, String address, String language, String religion, String nation, String height, String weight, Integer marriage, Integer education, String idcard, String idcardpic, String idcardpic2, String idcardpic3, Long idcardExpiredDate, String healthCertificate, String nursingCertificate, Long createCompany, Long createTime, Integer createType, String createChannel, Long createStaffId, String createStaffName, String rongToken, String jpushRegistid, Integer activeState, Long careerStartTime, String emergencyContact, String emergencyContactPhone, String building, Integer onService, String mpQRCode, String signPic, List<String> otherCertificate, String goodAtProject, Integer serviceNum, String bankName, String bankNO, Integer jobTitle, String serviceOrg, String medicalReport, String certification) {
    this(id, phone, pwd, state, fullName, sex, birthday, pic, nativeplace, province, city, district, address, language, religion, nation, height, weight, marriage, education, idcard, idcardpic, idcardpic2, idcardpic3, idcardExpiredDate, healthCertificate, nursingCertificate, createCompany, createTime, createType, createChannel, createStaffId, createStaffName, rongToken, jpushRegistid, activeState, careerStartTime, emergencyContact, emergencyContactPhone, building, onService, mpQRCode, signPic, otherCertificate, goodAtProject, serviceNum, bankName, bankNO, jobTitle, serviceOrg, medicalReport, certification, ByteString.EMPTY);
  }

  public HGBaseInfo(Long id, String phone, String pwd, Integer state, String fullName, Integer sex, String birthday, String pic, String nativeplace, String province, String city, String district, String address, String language, String religion, String nation, String height, String weight, Integer marriage, Integer education, String idcard, String idcardpic, String idcardpic2, String idcardpic3, Long idcardExpiredDate, String healthCertificate, String nursingCertificate, Long createCompany, Long createTime, Integer createType, String createChannel, Long createStaffId, String createStaffName, String rongToken, String jpushRegistid, Integer activeState, Long careerStartTime, String emergencyContact, String emergencyContactPhone, String building, Integer onService, String mpQRCode, String signPic, List<String> otherCertificate, String goodAtProject, Integer serviceNum, String bankName, String bankNO, Integer jobTitle, String serviceOrg, String medicalReport, String certification, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.phone = phone;
    this.pwd = pwd;
    this.state = state;
    this.fullName = fullName;
    this.sex = sex;
    this.birthday = birthday;
    this.pic = pic;
    this.nativeplace = nativeplace;
    this.province = province;
    this.city = city;
    this.district = district;
    this.address = address;
    this.language = language;
    this.religion = religion;
    this.nation = nation;
    this.height = height;
    this.weight = weight;
    this.marriage = marriage;
    this.education = education;
    this.idcard = idcard;
    this.idcardpic = idcardpic;
    this.idcardpic2 = idcardpic2;
    this.idcardpic3 = idcardpic3;
    this.idcardExpiredDate = idcardExpiredDate;
    this.healthCertificate = healthCertificate;
    this.nursingCertificate = nursingCertificate;
    this.createCompany = createCompany;
    this.createTime = createTime;
    this.createType = createType;
    this.createChannel = createChannel;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.rongToken = rongToken;
    this.jpushRegistid = jpushRegistid;
    this.activeState = activeState;
    this.careerStartTime = careerStartTime;
    this.emergencyContact = emergencyContact;
    this.emergencyContactPhone = emergencyContactPhone;
    this.building = building;
    this.onService = onService;
    this.mpQRCode = mpQRCode;
    this.signPic = signPic;
    this.otherCertificate = Internal.immutableCopyOf("otherCertificate", otherCertificate);
    this.goodAtProject = goodAtProject;
    this.serviceNum = serviceNum;
    this.bankName = bankName;
    this.bankNO = bankNO;
    this.jobTitle = jobTitle;
    this.serviceOrg = serviceOrg;
    this.medicalReport = medicalReport;
    this.certification = certification;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.phone = phone;
    builder.pwd = pwd;
    builder.state = state;
    builder.fullName = fullName;
    builder.sex = sex;
    builder.birthday = birthday;
    builder.pic = pic;
    builder.nativeplace = nativeplace;
    builder.province = province;
    builder.city = city;
    builder.district = district;
    builder.address = address;
    builder.language = language;
    builder.religion = religion;
    builder.nation = nation;
    builder.height = height;
    builder.weight = weight;
    builder.marriage = marriage;
    builder.education = education;
    builder.idcard = idcard;
    builder.idcardpic = idcardpic;
    builder.idcardpic2 = idcardpic2;
    builder.idcardpic3 = idcardpic3;
    builder.idcardExpiredDate = idcardExpiredDate;
    builder.healthCertificate = healthCertificate;
    builder.nursingCertificate = nursingCertificate;
    builder.createCompany = createCompany;
    builder.createTime = createTime;
    builder.createType = createType;
    builder.createChannel = createChannel;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.rongToken = rongToken;
    builder.jpushRegistid = jpushRegistid;
    builder.activeState = activeState;
    builder.careerStartTime = careerStartTime;
    builder.emergencyContact = emergencyContact;
    builder.emergencyContactPhone = emergencyContactPhone;
    builder.building = building;
    builder.onService = onService;
    builder.mpQRCode = mpQRCode;
    builder.signPic = signPic;
    builder.otherCertificate = Internal.copyOf("otherCertificate", otherCertificate);
    builder.goodAtProject = goodAtProject;
    builder.serviceNum = serviceNum;
    builder.bankName = bankName;
    builder.bankNO = bankNO;
    builder.jobTitle = jobTitle;
    builder.serviceOrg = serviceOrg;
    builder.medicalReport = medicalReport;
    builder.certification = certification;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof HGBaseInfo)) return false;
    HGBaseInfo o = (HGBaseInfo) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(phone, o.phone)
        && Internal.equals(pwd, o.pwd)
        && Internal.equals(state, o.state)
        && Internal.equals(fullName, o.fullName)
        && Internal.equals(sex, o.sex)
        && Internal.equals(birthday, o.birthday)
        && Internal.equals(pic, o.pic)
        && Internal.equals(nativeplace, o.nativeplace)
        && Internal.equals(province, o.province)
        && Internal.equals(city, o.city)
        && Internal.equals(district, o.district)
        && Internal.equals(address, o.address)
        && Internal.equals(language, o.language)
        && Internal.equals(religion, o.religion)
        && Internal.equals(nation, o.nation)
        && Internal.equals(height, o.height)
        && Internal.equals(weight, o.weight)
        && Internal.equals(marriage, o.marriage)
        && Internal.equals(education, o.education)
        && Internal.equals(idcard, o.idcard)
        && Internal.equals(idcardpic, o.idcardpic)
        && Internal.equals(idcardpic2, o.idcardpic2)
        && Internal.equals(idcardpic3, o.idcardpic3)
        && Internal.equals(idcardExpiredDate, o.idcardExpiredDate)
        && Internal.equals(healthCertificate, o.healthCertificate)
        && Internal.equals(nursingCertificate, o.nursingCertificate)
        && Internal.equals(createCompany, o.createCompany)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createType, o.createType)
        && Internal.equals(createChannel, o.createChannel)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(rongToken, o.rongToken)
        && Internal.equals(jpushRegistid, o.jpushRegistid)
        && Internal.equals(activeState, o.activeState)
        && Internal.equals(careerStartTime, o.careerStartTime)
        && Internal.equals(emergencyContact, o.emergencyContact)
        && Internal.equals(emergencyContactPhone, o.emergencyContactPhone)
        && Internal.equals(building, o.building)
        && Internal.equals(onService, o.onService)
        && Internal.equals(mpQRCode, o.mpQRCode)
        && Internal.equals(signPic, o.signPic)
        && otherCertificate.equals(o.otherCertificate)
        && Internal.equals(goodAtProject, o.goodAtProject)
        && Internal.equals(serviceNum, o.serviceNum)
        && Internal.equals(bankName, o.bankName)
        && Internal.equals(bankNO, o.bankNO)
        && Internal.equals(jobTitle, o.jobTitle)
        && Internal.equals(serviceOrg, o.serviceOrg)
        && Internal.equals(medicalReport, o.medicalReport)
        && Internal.equals(certification, o.certification);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (phone != null ? phone.hashCode() : 0);
      result = result * 37 + (pwd != null ? pwd.hashCode() : 0);
      result = result * 37 + (state != null ? state.hashCode() : 0);
      result = result * 37 + (fullName != null ? fullName.hashCode() : 0);
      result = result * 37 + (sex != null ? sex.hashCode() : 0);
      result = result * 37 + (birthday != null ? birthday.hashCode() : 0);
      result = result * 37 + (pic != null ? pic.hashCode() : 0);
      result = result * 37 + (nativeplace != null ? nativeplace.hashCode() : 0);
      result = result * 37 + (province != null ? province.hashCode() : 0);
      result = result * 37 + (city != null ? city.hashCode() : 0);
      result = result * 37 + (district != null ? district.hashCode() : 0);
      result = result * 37 + (address != null ? address.hashCode() : 0);
      result = result * 37 + (language != null ? language.hashCode() : 0);
      result = result * 37 + (religion != null ? religion.hashCode() : 0);
      result = result * 37 + (nation != null ? nation.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      result = result * 37 + (weight != null ? weight.hashCode() : 0);
      result = result * 37 + (marriage != null ? marriage.hashCode() : 0);
      result = result * 37 + (education != null ? education.hashCode() : 0);
      result = result * 37 + (idcard != null ? idcard.hashCode() : 0);
      result = result * 37 + (idcardpic != null ? idcardpic.hashCode() : 0);
      result = result * 37 + (idcardpic2 != null ? idcardpic2.hashCode() : 0);
      result = result * 37 + (idcardpic3 != null ? idcardpic3.hashCode() : 0);
      result = result * 37 + (idcardExpiredDate != null ? idcardExpiredDate.hashCode() : 0);
      result = result * 37 + (healthCertificate != null ? healthCertificate.hashCode() : 0);
      result = result * 37 + (nursingCertificate != null ? nursingCertificate.hashCode() : 0);
      result = result * 37 + (createCompany != null ? createCompany.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createType != null ? createType.hashCode() : 0);
      result = result * 37 + (createChannel != null ? createChannel.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (rongToken != null ? rongToken.hashCode() : 0);
      result = result * 37 + (jpushRegistid != null ? jpushRegistid.hashCode() : 0);
      result = result * 37 + (activeState != null ? activeState.hashCode() : 0);
      result = result * 37 + (careerStartTime != null ? careerStartTime.hashCode() : 0);
      result = result * 37 + (emergencyContact != null ? emergencyContact.hashCode() : 0);
      result = result * 37 + (emergencyContactPhone != null ? emergencyContactPhone.hashCode() : 0);
      result = result * 37 + (building != null ? building.hashCode() : 0);
      result = result * 37 + (onService != null ? onService.hashCode() : 0);
      result = result * 37 + (mpQRCode != null ? mpQRCode.hashCode() : 0);
      result = result * 37 + (signPic != null ? signPic.hashCode() : 0);
      result = result * 37 + otherCertificate.hashCode();
      result = result * 37 + (goodAtProject != null ? goodAtProject.hashCode() : 0);
      result = result * 37 + (serviceNum != null ? serviceNum.hashCode() : 0);
      result = result * 37 + (bankName != null ? bankName.hashCode() : 0);
      result = result * 37 + (bankNO != null ? bankNO.hashCode() : 0);
      result = result * 37 + (jobTitle != null ? jobTitle.hashCode() : 0);
      result = result * 37 + (serviceOrg != null ? serviceOrg.hashCode() : 0);
      result = result * 37 + (medicalReport != null ? medicalReport.hashCode() : 0);
      result = result * 37 + (certification != null ? certification.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (phone != null) builder.append(", phone=").append(phone);
    if (pwd != null) builder.append(", pwd=").append(pwd);
    if (state != null) builder.append(", state=").append(state);
    if (fullName != null) builder.append(", fullName=").append(fullName);
    if (sex != null) builder.append(", sex=").append(sex);
    if (birthday != null) builder.append(", birthday=").append(birthday);
    if (pic != null) builder.append(", pic=").append(pic);
    if (nativeplace != null) builder.append(", nativeplace=").append(nativeplace);
    if (province != null) builder.append(", province=").append(province);
    if (city != null) builder.append(", city=").append(city);
    if (district != null) builder.append(", district=").append(district);
    if (address != null) builder.append(", address=").append(address);
    if (language != null) builder.append(", language=").append(language);
    if (religion != null) builder.append(", religion=").append(religion);
    if (nation != null) builder.append(", nation=").append(nation);
    if (height != null) builder.append(", height=").append(height);
    if (weight != null) builder.append(", weight=").append(weight);
    if (marriage != null) builder.append(", marriage=").append(marriage);
    if (education != null) builder.append(", education=").append(education);
    if (idcard != null) builder.append(", idcard=").append(idcard);
    if (idcardpic != null) builder.append(", idcardpic=").append(idcardpic);
    if (idcardpic2 != null) builder.append(", idcardpic2=").append(idcardpic2);
    if (idcardpic3 != null) builder.append(", idcardpic3=").append(idcardpic3);
    if (idcardExpiredDate != null) builder.append(", idcardExpiredDate=").append(idcardExpiredDate);
    if (healthCertificate != null) builder.append(", healthCertificate=").append(healthCertificate);
    if (nursingCertificate != null) builder.append(", nursingCertificate=").append(nursingCertificate);
    if (createCompany != null) builder.append(", createCompany=").append(createCompany);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createType != null) builder.append(", createType=").append(createType);
    if (createChannel != null) builder.append(", createChannel=").append(createChannel);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (rongToken != null) builder.append(", rongToken=").append(rongToken);
    if (jpushRegistid != null) builder.append(", jpushRegistid=").append(jpushRegistid);
    if (activeState != null) builder.append(", activeState=").append(activeState);
    if (careerStartTime != null) builder.append(", careerStartTime=").append(careerStartTime);
    if (emergencyContact != null) builder.append(", emergencyContact=").append(emergencyContact);
    if (emergencyContactPhone != null) builder.append(", emergencyContactPhone=").append(emergencyContactPhone);
    if (building != null) builder.append(", building=").append(building);
    if (onService != null) builder.append(", onService=").append(onService);
    if (mpQRCode != null) builder.append(", mpQRCode=").append(mpQRCode);
    if (signPic != null) builder.append(", signPic=").append(signPic);
    if (!otherCertificate.isEmpty()) builder.append(", otherCertificate=").append(otherCertificate);
    if (goodAtProject != null) builder.append(", goodAtProject=").append(goodAtProject);
    if (serviceNum != null) builder.append(", serviceNum=").append(serviceNum);
    if (bankName != null) builder.append(", bankName=").append(bankName);
    if (bankNO != null) builder.append(", bankNO=").append(bankNO);
    if (jobTitle != null) builder.append(", jobTitle=").append(jobTitle);
    if (serviceOrg != null) builder.append(", serviceOrg=").append(serviceOrg);
    if (medicalReport != null) builder.append(", medicalReport=").append(medicalReport);
    if (certification != null) builder.append(", certification=").append(certification);
    return builder.replace(0, 2, "HGBaseInfo{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<HGBaseInfo, Builder> {
    public Long id;

    public String phone;

    public String pwd;

    public Integer state;

    public String fullName;

    public Integer sex;

    public String birthday;

    public String pic;

    public String nativeplace;

    public String province;

    public String city;

    public String district;

    public String address;

    public String language;

    public String religion;

    public String nation;

    public String height;

    public String weight;

    public Integer marriage;

    public Integer education;

    public String idcard;

    public String idcardpic;

    public String idcardpic2;

    public String idcardpic3;

    public Long idcardExpiredDate;

    public String healthCertificate;

    public String nursingCertificate;

    public Long createCompany;

    public Long createTime;

    public Integer createType;

    public String createChannel;

    public Long createStaffId;

    public String createStaffName;

    public String rongToken;

    public String jpushRegistid;

    public Integer activeState;

    public Long careerStartTime;

    public String emergencyContact;

    public String emergencyContactPhone;

    public String building;

    public Integer onService;

    public String mpQRCode;

    public String signPic;

    public List<String> otherCertificate;

    public String goodAtProject;

    public Integer serviceNum;

    public String bankName;

    public String bankNO;

    public Integer jobTitle;

    public String serviceOrg;

    public String medicalReport;

    public String certification;

    public Builder() {
      otherCertificate = Internal.newMutableList();
    }

    /**
     * 护工id
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 手机号
     */
    public Builder phone(String phone) {
      this.phone = phone;
      return this;
    }

    public Builder pwd(String pwd) {
      this.pwd = pwd;
      return this;
    }

    /**
     * 护工的状态  1- 在职 2-离职
     */
    public Builder state(Integer state) {
      this.state = state;
      return this;
    }

    /**
     * 全名
     */
    public Builder fullName(String fullName) {
      this.fullName = fullName;
      return this;
    }

    /**
     * 0未设置 1男 2 女
     */
    public Builder sex(Integer sex) {
      this.sex = sex;
      return this;
    }

    /**
     * 生日
     */
    public Builder birthday(String birthday) {
      this.birthday = birthday;
      return this;
    }

    /**
     * 个人照片
     */
    public Builder pic(String pic) {
      this.pic = pic;
      return this;
    }

    /**
     * 籍贯
     */
    public Builder nativeplace(String nativeplace) {
      this.nativeplace = nativeplace;
      return this;
    }

    /**
     * 省份
     */
    public Builder province(String province) {
      this.province = province;
      return this;
    }

    /**
     * 城市
     */
    public Builder city(String city) {
      this.city = city;
      return this;
    }

    /**
     * 区
     */
    public Builder district(String district) {
      this.district = district;
      return this;
    }

    /**
     * 详细居住地址
     */
    public Builder address(String address) {
      this.address = address;
      return this;
    }

    /**
     * 多种语言用,分割
     */
    public Builder language(String language) {
      this.language = language;
      return this;
    }

    /**
     * 宗教
     */
    public Builder religion(String religion) {
      this.religion = religion;
      return this;
    }

    /**
     * 民族
     */
    public Builder nation(String nation) {
      this.nation = nation;
      return this;
    }

    /**
     * 身高cm
     */
    public Builder height(String height) {
      this.height = height;
      return this;
    }

    /**
     * 体重kg
     */
    public Builder weight(String weight) {
      this.weight = weight;
      return this;
    }

    /**
     * 婚姻状态 0-未知 1-未婚 2-已婚 3-离异
     */
    public Builder marriage(Integer marriage) {
      this.marriage = marriage;
      return this;
    }

    /**
     * 教育程度 0-未知 1-不识字  2-小学  3-初中 4-高中 5-中专 6-大专 7-本科 8-研究生 9-博士
     */
    public Builder education(Integer education) {
      this.education = education;
      return this;
    }

    /**
     * 身份证号码
     */
    public Builder idcard(String idcard) {
      this.idcard = idcard;
      return this;
    }

    /**
     * 身份证正面照
     */
    public Builder idcardpic(String idcardpic) {
      this.idcardpic = idcardpic;
      return this;
    }

    /**
     * 身份证反面照片
     */
    public Builder idcardpic2(String idcardpic2) {
      this.idcardpic2 = idcardpic2;
      return this;
    }

    /**
     * 身份证手持照片
     */
    public Builder idcardpic3(String idcardpic3) {
      this.idcardpic3 = idcardpic3;
      return this;
    }

    /**
     * 身份证有效期
     */
    public Builder idcardExpiredDate(Long idcardExpiredDate) {
      this.idcardExpiredDate = idcardExpiredDate;
      return this;
    }

    /**
     * 健康证
     */
    public Builder healthCertificate(String healthCertificate) {
      this.healthCertificate = healthCertificate;
      return this;
    }

    /**
     * 护理证
     */
    public Builder nursingCertificate(String nursingCertificate) {
      this.nursingCertificate = nursingCertificate;
      return this;
    }

    /**
     * 创建公司 10000-易简医
     */
    public Builder createCompany(Long createCompany) {
      this.createCompany = createCompany;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 1.自己注册 2.公司添加
     */
    public Builder createType(Integer createType) {
      this.createType = createType;
      return this;
    }

    /**
     * 创建渠道
     */
    public Builder createChannel(String createChannel) {
      this.createChannel = createChannel;
      return this;
    }

    /**
     * 创建员工的id
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 创建员工的姓名
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 融云Token
     */
    public Builder rongToken(String rongToken) {
      this.rongToken = rongToken;
      return this;
    }

    /**
     * 极光推送设备ID
     */
    public Builder jpushRegistid(String jpushRegistid) {
      this.jpushRegistid = jpushRegistid;
      return this;
    }

    /**
     * 用户活跃状态 1 - 未登录 2 - 登录
     */
    public Builder activeState(Integer activeState) {
      this.activeState = activeState;
      return this;
    }

    /**
     * 护工工作开始时间, 用于计算工龄
     */
    public Builder careerStartTime(Long careerStartTime) {
      this.careerStartTime = careerStartTime;
      return this;
    }

    /**
     * 紧急联系人
     */
    public Builder emergencyContact(String emergencyContact) {
      this.emergencyContact = emergencyContact;
      return this;
    }

    /**
     * 紧急联系人手机号
     */
    public Builder emergencyContactPhone(String emergencyContactPhone) {
      this.emergencyContactPhone = emergencyContactPhone;
      return this;
    }

    /**
     * 居住地
     */
    public Builder building(String building) {
      this.building = building;
      return this;
    }

    /**
     * 0-空闲 1-专陪服务中 2-多陪服务中
     */
    public Builder onService(Integer onService) {
      this.onService = onService;
      return this;
    }

    /**
     * 公众号二维码地址
     */
    public Builder mpQRCode(String mpQRCode) {
      this.mpQRCode = mpQRCode;
      return this;
    }

    /**
     * 签名图片
     */
    public Builder signPic(String signPic) {
      this.signPic = signPic;
      return this;
    }

    /**
     * 其他证件
     */
    public Builder otherCertificate(List<String> otherCertificate) {
      Internal.checkElementsNotNull(otherCertificate);
      this.otherCertificate = otherCertificate;
      return this;
    }

    /**
     * 擅长项目
     */
    public Builder goodAtProject(String goodAtProject) {
      this.goodAtProject = goodAtProject;
      return this;
    }

    /**
     * 已服务人数
     */
    public Builder serviceNum(Integer serviceNum) {
      this.serviceNum = serviceNum;
      return this;
    }

    /**
     * 开户支行
     */
    public Builder bankName(String bankName) {
      this.bankName = bankName;
      return this;
    }

    /**
     * 银行卡号
     */
    public Builder bankNO(String bankNO) {
      this.bankNO = bankNO;
      return this;
    }

    /**
     * 职称 0-无 1-护士主任 2-护士 3-护师 4-护士副主任
     */
    public Builder jobTitle(Integer jobTitle) {
      this.jobTitle = jobTitle;
      return this;
    }

    /**
     * 服务机构
     */
    public Builder serviceOrg(String serviceOrg) {
      this.serviceOrg = serviceOrg;
      return this;
    }

    /**
     * 体检报告
     */
    public Builder medicalReport(String medicalReport) {
      this.medicalReport = medicalReport;
      return this;
    }

    /**
     * 资格证
     */
    public Builder certification(String certification) {
      this.certification = certification;
      return this;
    }

    @Override
    public HGBaseInfo build() {
      return new HGBaseInfo(id, phone, pwd, state, fullName, sex, birthday, pic, nativeplace, province, city, district, address, language, religion, nation, height, weight, marriage, education, idcard, idcardpic, idcardpic2, idcardpic3, idcardExpiredDate, healthCertificate, nursingCertificate, createCompany, createTime, createType, createChannel, createStaffId, createStaffName, rongToken, jpushRegistid, activeState, careerStartTime, emergencyContact, emergencyContactPhone, building, onService, mpQRCode, signPic, otherCertificate, goodAtProject, serviceNum, bankName, bankNO, jobTitle, serviceOrg, medicalReport, certification, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_HGBaseInfo extends ProtoAdapter<HGBaseInfo> {
    ProtoAdapter_HGBaseInfo() {
      super(FieldEncoding.LENGTH_DELIMITED, HGBaseInfo.class);
    }

    @Override
    public int encodedSize(HGBaseInfo value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.phone != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.phone) : 0)
          + (value.pwd != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.pwd) : 0)
          + (value.state != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.state) : 0)
          + (value.fullName != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.fullName) : 0)
          + (value.sex != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.sex) : 0)
          + (value.birthday != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.birthday) : 0)
          + (value.pic != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.pic) : 0)
          + (value.nativeplace != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.nativeplace) : 0)
          + (value.province != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.province) : 0)
          + (value.city != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.city) : 0)
          + (value.district != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.district) : 0)
          + (value.address != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.address) : 0)
          + (value.language != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.language) : 0)
          + (value.religion != null ? ProtoAdapter.STRING.encodedSizeWithTag(15, value.religion) : 0)
          + (value.nation != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.nation) : 0)
          + (value.height != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.height) : 0)
          + (value.weight != null ? ProtoAdapter.STRING.encodedSizeWithTag(18, value.weight) : 0)
          + (value.marriage != null ? ProtoAdapter.UINT32.encodedSizeWithTag(19, value.marriage) : 0)
          + (value.education != null ? ProtoAdapter.UINT32.encodedSizeWithTag(20, value.education) : 0)
          + (value.idcard != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.idcard) : 0)
          + (value.idcardpic != null ? ProtoAdapter.STRING.encodedSizeWithTag(22, value.idcardpic) : 0)
          + (value.idcardpic2 != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.idcardpic2) : 0)
          + (value.idcardpic3 != null ? ProtoAdapter.STRING.encodedSizeWithTag(24, value.idcardpic3) : 0)
          + (value.idcardExpiredDate != null ? ProtoAdapter.UINT64.encodedSizeWithTag(25, value.idcardExpiredDate) : 0)
          + (value.healthCertificate != null ? ProtoAdapter.STRING.encodedSizeWithTag(26, value.healthCertificate) : 0)
          + (value.nursingCertificate != null ? ProtoAdapter.STRING.encodedSizeWithTag(27, value.nursingCertificate) : 0)
          + (value.createCompany != null ? ProtoAdapter.UINT64.encodedSizeWithTag(28, value.createCompany) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(29, value.createTime) : 0)
          + (value.createType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(30, value.createType) : 0)
          + (value.createChannel != null ? ProtoAdapter.STRING.encodedSizeWithTag(31, value.createChannel) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(32, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(33, value.createStaffName) : 0)
          + (value.rongToken != null ? ProtoAdapter.STRING.encodedSizeWithTag(34, value.rongToken) : 0)
          + (value.jpushRegistid != null ? ProtoAdapter.STRING.encodedSizeWithTag(35, value.jpushRegistid) : 0)
          + (value.activeState != null ? ProtoAdapter.UINT32.encodedSizeWithTag(36, value.activeState) : 0)
          + (value.careerStartTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(37, value.careerStartTime) : 0)
          + (value.emergencyContact != null ? ProtoAdapter.STRING.encodedSizeWithTag(38, value.emergencyContact) : 0)
          + (value.emergencyContactPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(39, value.emergencyContactPhone) : 0)
          + (value.building != null ? ProtoAdapter.STRING.encodedSizeWithTag(40, value.building) : 0)
          + (value.onService != null ? ProtoAdapter.UINT32.encodedSizeWithTag(41, value.onService) : 0)
          + (value.mpQRCode != null ? ProtoAdapter.STRING.encodedSizeWithTag(42, value.mpQRCode) : 0)
          + (value.signPic != null ? ProtoAdapter.STRING.encodedSizeWithTag(43, value.signPic) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(44, value.otherCertificate)
          + (value.goodAtProject != null ? ProtoAdapter.STRING.encodedSizeWithTag(45, value.goodAtProject) : 0)
          + (value.serviceNum != null ? ProtoAdapter.UINT32.encodedSizeWithTag(46, value.serviceNum) : 0)
          + (value.bankName != null ? ProtoAdapter.STRING.encodedSizeWithTag(47, value.bankName) : 0)
          + (value.bankNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(48, value.bankNO) : 0)
          + (value.jobTitle != null ? ProtoAdapter.UINT32.encodedSizeWithTag(49, value.jobTitle) : 0)
          + (value.serviceOrg != null ? ProtoAdapter.STRING.encodedSizeWithTag(50, value.serviceOrg) : 0)
          + (value.medicalReport != null ? ProtoAdapter.STRING.encodedSizeWithTag(51, value.medicalReport) : 0)
          + (value.certification != null ? ProtoAdapter.STRING.encodedSizeWithTag(52, value.certification) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, HGBaseInfo value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.phone != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.phone);
      if (value.pwd != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.pwd);
      if (value.state != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.state);
      if (value.fullName != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.fullName);
      if (value.sex != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.sex);
      if (value.birthday != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.birthday);
      if (value.pic != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.pic);
      if (value.nativeplace != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.nativeplace);
      if (value.province != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.province);
      if (value.city != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.city);
      if (value.district != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.district);
      if (value.address != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.address);
      if (value.language != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.language);
      if (value.religion != null) ProtoAdapter.STRING.encodeWithTag(writer, 15, value.religion);
      if (value.nation != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.nation);
      if (value.height != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.height);
      if (value.weight != null) ProtoAdapter.STRING.encodeWithTag(writer, 18, value.weight);
      if (value.marriage != null) ProtoAdapter.UINT32.encodeWithTag(writer, 19, value.marriage);
      if (value.education != null) ProtoAdapter.UINT32.encodeWithTag(writer, 20, value.education);
      if (value.idcard != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.idcard);
      if (value.idcardpic != null) ProtoAdapter.STRING.encodeWithTag(writer, 22, value.idcardpic);
      if (value.idcardpic2 != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.idcardpic2);
      if (value.idcardpic3 != null) ProtoAdapter.STRING.encodeWithTag(writer, 24, value.idcardpic3);
      if (value.idcardExpiredDate != null) ProtoAdapter.UINT64.encodeWithTag(writer, 25, value.idcardExpiredDate);
      if (value.healthCertificate != null) ProtoAdapter.STRING.encodeWithTag(writer, 26, value.healthCertificate);
      if (value.nursingCertificate != null) ProtoAdapter.STRING.encodeWithTag(writer, 27, value.nursingCertificate);
      if (value.createCompany != null) ProtoAdapter.UINT64.encodeWithTag(writer, 28, value.createCompany);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 29, value.createTime);
      if (value.createType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 30, value.createType);
      if (value.createChannel != null) ProtoAdapter.STRING.encodeWithTag(writer, 31, value.createChannel);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 32, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 33, value.createStaffName);
      if (value.rongToken != null) ProtoAdapter.STRING.encodeWithTag(writer, 34, value.rongToken);
      if (value.jpushRegistid != null) ProtoAdapter.STRING.encodeWithTag(writer, 35, value.jpushRegistid);
      if (value.activeState != null) ProtoAdapter.UINT32.encodeWithTag(writer, 36, value.activeState);
      if (value.careerStartTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 37, value.careerStartTime);
      if (value.emergencyContact != null) ProtoAdapter.STRING.encodeWithTag(writer, 38, value.emergencyContact);
      if (value.emergencyContactPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 39, value.emergencyContactPhone);
      if (value.building != null) ProtoAdapter.STRING.encodeWithTag(writer, 40, value.building);
      if (value.onService != null) ProtoAdapter.UINT32.encodeWithTag(writer, 41, value.onService);
      if (value.mpQRCode != null) ProtoAdapter.STRING.encodeWithTag(writer, 42, value.mpQRCode);
      if (value.signPic != null) ProtoAdapter.STRING.encodeWithTag(writer, 43, value.signPic);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 44, value.otherCertificate);
      if (value.goodAtProject != null) ProtoAdapter.STRING.encodeWithTag(writer, 45, value.goodAtProject);
      if (value.serviceNum != null) ProtoAdapter.UINT32.encodeWithTag(writer, 46, value.serviceNum);
      if (value.bankName != null) ProtoAdapter.STRING.encodeWithTag(writer, 47, value.bankName);
      if (value.bankNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 48, value.bankNO);
      if (value.jobTitle != null) ProtoAdapter.UINT32.encodeWithTag(writer, 49, value.jobTitle);
      if (value.serviceOrg != null) ProtoAdapter.STRING.encodeWithTag(writer, 50, value.serviceOrg);
      if (value.medicalReport != null) ProtoAdapter.STRING.encodeWithTag(writer, 51, value.medicalReport);
      if (value.certification != null) ProtoAdapter.STRING.encodeWithTag(writer, 52, value.certification);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public HGBaseInfo decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.phone(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.pwd(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.state(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.fullName(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.sex(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.birthday(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.pic(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.nativeplace(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.province(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.city(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.district(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.address(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.language(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.religion(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.nation(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.height(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.weight(ProtoAdapter.STRING.decode(reader)); break;
          case 19: builder.marriage(ProtoAdapter.UINT32.decode(reader)); break;
          case 20: builder.education(ProtoAdapter.UINT32.decode(reader)); break;
          case 21: builder.idcard(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.idcardpic(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.idcardpic2(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.idcardpic3(ProtoAdapter.STRING.decode(reader)); break;
          case 25: builder.idcardExpiredDate(ProtoAdapter.UINT64.decode(reader)); break;
          case 26: builder.healthCertificate(ProtoAdapter.STRING.decode(reader)); break;
          case 27: builder.nursingCertificate(ProtoAdapter.STRING.decode(reader)); break;
          case 28: builder.createCompany(ProtoAdapter.UINT64.decode(reader)); break;
          case 29: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 30: builder.createType(ProtoAdapter.UINT32.decode(reader)); break;
          case 31: builder.createChannel(ProtoAdapter.STRING.decode(reader)); break;
          case 32: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 33: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 34: builder.rongToken(ProtoAdapter.STRING.decode(reader)); break;
          case 35: builder.jpushRegistid(ProtoAdapter.STRING.decode(reader)); break;
          case 36: builder.activeState(ProtoAdapter.UINT32.decode(reader)); break;
          case 37: builder.careerStartTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 38: builder.emergencyContact(ProtoAdapter.STRING.decode(reader)); break;
          case 39: builder.emergencyContactPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 40: builder.building(ProtoAdapter.STRING.decode(reader)); break;
          case 41: builder.onService(ProtoAdapter.UINT32.decode(reader)); break;
          case 42: builder.mpQRCode(ProtoAdapter.STRING.decode(reader)); break;
          case 43: builder.signPic(ProtoAdapter.STRING.decode(reader)); break;
          case 44: builder.otherCertificate.add(ProtoAdapter.STRING.decode(reader)); break;
          case 45: builder.goodAtProject(ProtoAdapter.STRING.decode(reader)); break;
          case 46: builder.serviceNum(ProtoAdapter.UINT32.decode(reader)); break;
          case 47: builder.bankName(ProtoAdapter.STRING.decode(reader)); break;
          case 48: builder.bankNO(ProtoAdapter.STRING.decode(reader)); break;
          case 49: builder.jobTitle(ProtoAdapter.UINT32.decode(reader)); break;
          case 50: builder.serviceOrg(ProtoAdapter.STRING.decode(reader)); break;
          case 51: builder.medicalReport(ProtoAdapter.STRING.decode(reader)); break;
          case 52: builder.certification(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public HGBaseInfo redact(HGBaseInfo value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
