// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: Interface.proto at 22:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 请求包头
 */
public final class ReqHead extends Message<ReqHead, ReqHead.Builder> {
  public static final ProtoAdapter<ReqHead> ADAPTER = new ProtoAdapter_ReqHead();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_YUA = "";

  public static final String DEFAULT_GUID = "";

  public static final String DEFAULT_SID = "";

  public static final NET_TYPE DEFAULT_NETTYPE = NET_TYPE.UN_DETECT;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String YUA;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String GUID;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String SID;

  @WireField(
      tag = 4,
      adapter = "com.yijianyi.protocol.Terminal#ADAPTER"
  )
  public final Terminal terminal;

  @WireField(
      tag = 5,
      adapter = "com.yijianyi.protocol.NET_TYPE#ADAPTER"
  )
  public final NET_TYPE netType;

  @WireField(
      tag = 6,
      adapter = "com.yijianyi.protocol.PkgInfo#ADAPTER"
  )
  public final PkgInfo pkginfo;

  public ReqHead(String YUA, String GUID, String SID, Terminal terminal, NET_TYPE netType, PkgInfo pkginfo) {
    this(YUA, GUID, SID, terminal, netType, pkginfo, ByteString.EMPTY);
  }

  public ReqHead(String YUA, String GUID, String SID, Terminal terminal, NET_TYPE netType, PkgInfo pkginfo, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.YUA = YUA;
    this.GUID = GUID;
    this.SID = SID;
    this.terminal = terminal;
    this.netType = netType;
    this.pkginfo = pkginfo;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.YUA = YUA;
    builder.GUID = GUID;
    builder.SID = SID;
    builder.terminal = terminal;
    builder.netType = netType;
    builder.pkginfo = pkginfo;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof ReqHead)) return false;
    ReqHead o = (ReqHead) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(YUA, o.YUA)
        && Internal.equals(GUID, o.GUID)
        && Internal.equals(SID, o.SID)
        && Internal.equals(terminal, o.terminal)
        && Internal.equals(netType, o.netType)
        && Internal.equals(pkginfo, o.pkginfo);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (YUA != null ? YUA.hashCode() : 0);
      result = result * 37 + (GUID != null ? GUID.hashCode() : 0);
      result = result * 37 + (SID != null ? SID.hashCode() : 0);
      result = result * 37 + (terminal != null ? terminal.hashCode() : 0);
      result = result * 37 + (netType != null ? netType.hashCode() : 0);
      result = result * 37 + (pkginfo != null ? pkginfo.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (YUA != null) builder.append(", YUA=").append(YUA);
    if (GUID != null) builder.append(", GUID=").append(GUID);
    if (SID != null) builder.append(", SID=").append(SID);
    if (terminal != null) builder.append(", terminal=").append(terminal);
    if (netType != null) builder.append(", netType=").append(netType);
    if (pkginfo != null) builder.append(", pkginfo=").append(pkginfo);
    return builder.replace(0, 2, "ReqHead{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<ReqHead, Builder> {
    public String YUA;

    public String GUID;

    public String SID;

    public Terminal terminal;

    public NET_TYPE netType;

    public PkgInfo pkginfo;

    public Builder() {
    }

    public Builder YUA(String YUA) {
      this.YUA = YUA;
      return this;
    }

    public Builder GUID(String GUID) {
      this.GUID = GUID;
      return this;
    }

    public Builder SID(String SID) {
      this.SID = SID;
      return this;
    }

    public Builder terminal(Terminal terminal) {
      this.terminal = terminal;
      return this;
    }

    public Builder netType(NET_TYPE netType) {
      this.netType = netType;
      return this;
    }

    public Builder pkginfo(PkgInfo pkginfo) {
      this.pkginfo = pkginfo;
      return this;
    }

    @Override
    public ReqHead build() {
      return new ReqHead(YUA, GUID, SID, terminal, netType, pkginfo, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_ReqHead extends ProtoAdapter<ReqHead> {
    ProtoAdapter_ReqHead() {
      super(FieldEncoding.LENGTH_DELIMITED, ReqHead.class);
    }

    @Override
    public int encodedSize(ReqHead value) {
      return (value.YUA != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.YUA) : 0)
          + (value.GUID != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.GUID) : 0)
          + (value.SID != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.SID) : 0)
          + (value.terminal != null ? Terminal.ADAPTER.encodedSizeWithTag(4, value.terminal) : 0)
          + (value.netType != null ? NET_TYPE.ADAPTER.encodedSizeWithTag(5, value.netType) : 0)
          + (value.pkginfo != null ? PkgInfo.ADAPTER.encodedSizeWithTag(6, value.pkginfo) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, ReqHead value) throws IOException {
      if (value.YUA != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.YUA);
      if (value.GUID != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.GUID);
      if (value.SID != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.SID);
      if (value.terminal != null) Terminal.ADAPTER.encodeWithTag(writer, 4, value.terminal);
      if (value.netType != null) NET_TYPE.ADAPTER.encodeWithTag(writer, 5, value.netType);
      if (value.pkginfo != null) PkgInfo.ADAPTER.encodeWithTag(writer, 6, value.pkginfo);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public ReqHead decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.YUA(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.GUID(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.SID(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.terminal(Terminal.ADAPTER.decode(reader)); break;
          case 5: {
            try {
              builder.netType(NET_TYPE.ADAPTER.decode(reader));
            } catch (ProtoAdapter.EnumConstantNotFoundException e) {
              builder.addUnknownField(tag, FieldEncoding.VARINT, (long) e.value);
            }
            break;
          }
          case 6: builder.pkginfo(PkgInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public ReqHead redact(ReqHead value) {
      Builder builder = value.newBuilder();
      if (builder.terminal != null) builder.terminal = Terminal.ADAPTER.redact(builder.terminal);
      if (builder.pkginfo != null) builder.pkginfo = PkgInfo.ADAPTER.redact(builder.pkginfo);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
