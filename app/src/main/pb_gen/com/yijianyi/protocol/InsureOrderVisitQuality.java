// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 781:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 长护险订单回访质控内容
 */
public final class InsureOrderVisitQuality extends Message<InsureOrderVisitQuality, InsureOrderVisitQuality.Builder> {
  public static final ProtoAdapter<InsureOrderVisitQuality> ADAPTER = new ProtoAdapter_InsureOrderVisitQuality();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Long DEFAULT_VISITID = 0L;

  public static final Integer DEFAULT_FLOOR = 0;

  public static final Integer DEFAULT_KITCHEN = 0;

  public static final Integer DEFAULT_TOILET = 0;

  public static final Integer DEFAULT_BED = 0;

  public static final Integer DEFAULT_TABLES = 0;

  public static final Integer DEFAULT_HAIR = 0;

  public static final Integer DEFAULT_ORALCAVITY = 0;

  public static final Integer DEFAULT_SKIN = 0;

  public static final Integer DEFAULT_PERINEUM = 0;

  public static final Integer DEFAULT_CLOTHING = 0;

  public static final Integer DEFAULT_DIET = 0;

  public static final Integer DEFAULT_SLEEP = 0;

  public static final Integer DEFAULT_FECES = 0;

  public static final Integer DEFAULT_SKINFULL = 0;

  public static final Integer DEFAULT_MENTALITY = 0;

  public static final Integer DEFAULT_DISCOMFORT = 0;

  public static final String DEFAULT_DISCOMFORTDETIAL = "";

  public static final Integer DEFAULT_RESULT = 0;

  public static final String DEFAULT_RESULTDETIAL = "";

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final Long DEFAULT_CREATETIME = 0L;

  /**
   * id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 回访id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long visitId;

  /**
   * 地板,1-干净 2-不干净
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer floor;

  /**
   * 厨房,1-干净 2-不干净
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer kitchen;

  /**
   * 卫生间,1-干净 2-不干净
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer toilet;

  /**
   * 床单位,1-整洁 2-不整洁
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer bed;

  /**
   * 桌椅台面,1-整洁 2-脏乱
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer tables;

  /**
   * 头发,1-清洁 2-异味 3-不清洁
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer hair;

  /**
   * 口腔,1-清洁 2-异味 3-不清洁
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer oralCavity;

  /**
   * 全身皮肤,1-清洁 2-异味 3-不清洁
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer skin;

  /**
   * 会阴部,1-清洁 2-异味 3-不清洁
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer perineum;

  /**
   * 身上衣物,1-清洁 2-异味 3-不清洁
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer clothing;

  /**
   * 饮食,1-正常 2-胃口差 3-导管灌注
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer diet;

  /**
   * 睡眠,1-好 2-易醒 3-差
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sleep;

  /**
   * 大便,1-造痿 2-正常 3-失禁 4-便秘
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer feces;

  /**
   * 皮肤完整性,1-完好 2-压疮 3-伤口
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer skinFull;

  /**
   * 心理状态,1-平稳 2-焦虑 3-暴躁 4-抑郁
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer mentality;

  /**
   * 近期有无不适,1-无 2-有
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer discomfort;

  /**
   * 不适状况
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String discomfortDetial;

  /**
   * 上传回访的护理问题效果评价,1-有效 2-无效
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer result;

  /**
   * 无效原因
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String resultDetial;

  /**
   * 创建员工ID
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 创建员工名称
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 创建时间
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  public InsureOrderVisitQuality(Long id, Long visitId, Integer floor, Integer kitchen, Integer toilet, Integer bed, Integer tables, Integer hair, Integer oralCavity, Integer skin, Integer perineum, Integer clothing, Integer diet, Integer sleep, Integer feces, Integer skinFull, Integer mentality, Integer discomfort, String discomfortDetial, Integer result, String resultDetial, Long createStaffId, String createStaffName, Long createTime) {
    this(id, visitId, floor, kitchen, toilet, bed, tables, hair, oralCavity, skin, perineum, clothing, diet, sleep, feces, skinFull, mentality, discomfort, discomfortDetial, result, resultDetial, createStaffId, createStaffName, createTime, ByteString.EMPTY);
  }

  public InsureOrderVisitQuality(Long id, Long visitId, Integer floor, Integer kitchen, Integer toilet, Integer bed, Integer tables, Integer hair, Integer oralCavity, Integer skin, Integer perineum, Integer clothing, Integer diet, Integer sleep, Integer feces, Integer skinFull, Integer mentality, Integer discomfort, String discomfortDetial, Integer result, String resultDetial, Long createStaffId, String createStaffName, Long createTime, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.visitId = visitId;
    this.floor = floor;
    this.kitchen = kitchen;
    this.toilet = toilet;
    this.bed = bed;
    this.tables = tables;
    this.hair = hair;
    this.oralCavity = oralCavity;
    this.skin = skin;
    this.perineum = perineum;
    this.clothing = clothing;
    this.diet = diet;
    this.sleep = sleep;
    this.feces = feces;
    this.skinFull = skinFull;
    this.mentality = mentality;
    this.discomfort = discomfort;
    this.discomfortDetial = discomfortDetial;
    this.result = result;
    this.resultDetial = resultDetial;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.createTime = createTime;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.visitId = visitId;
    builder.floor = floor;
    builder.kitchen = kitchen;
    builder.toilet = toilet;
    builder.bed = bed;
    builder.tables = tables;
    builder.hair = hair;
    builder.oralCavity = oralCavity;
    builder.skin = skin;
    builder.perineum = perineum;
    builder.clothing = clothing;
    builder.diet = diet;
    builder.sleep = sleep;
    builder.feces = feces;
    builder.skinFull = skinFull;
    builder.mentality = mentality;
    builder.discomfort = discomfort;
    builder.discomfortDetial = discomfortDetial;
    builder.result = result;
    builder.resultDetial = resultDetial;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.createTime = createTime;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof InsureOrderVisitQuality)) return false;
    InsureOrderVisitQuality o = (InsureOrderVisitQuality) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(visitId, o.visitId)
        && Internal.equals(floor, o.floor)
        && Internal.equals(kitchen, o.kitchen)
        && Internal.equals(toilet, o.toilet)
        && Internal.equals(bed, o.bed)
        && Internal.equals(tables, o.tables)
        && Internal.equals(hair, o.hair)
        && Internal.equals(oralCavity, o.oralCavity)
        && Internal.equals(skin, o.skin)
        && Internal.equals(perineum, o.perineum)
        && Internal.equals(clothing, o.clothing)
        && Internal.equals(diet, o.diet)
        && Internal.equals(sleep, o.sleep)
        && Internal.equals(feces, o.feces)
        && Internal.equals(skinFull, o.skinFull)
        && Internal.equals(mentality, o.mentality)
        && Internal.equals(discomfort, o.discomfort)
        && Internal.equals(discomfortDetial, o.discomfortDetial)
        && Internal.equals(result, o.result)
        && Internal.equals(resultDetial, o.resultDetial)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(createTime, o.createTime);
  }

  @Override
  public int hashCode() {
    int result_ = super.hashCode;
    if (result_ == 0) {
      result_ = unknownFields().hashCode();
      result_ = result_ * 37 + (id != null ? id.hashCode() : 0);
      result_ = result_ * 37 + (visitId != null ? visitId.hashCode() : 0);
      result_ = result_ * 37 + (floor != null ? floor.hashCode() : 0);
      result_ = result_ * 37 + (kitchen != null ? kitchen.hashCode() : 0);
      result_ = result_ * 37 + (toilet != null ? toilet.hashCode() : 0);
      result_ = result_ * 37 + (bed != null ? bed.hashCode() : 0);
      result_ = result_ * 37 + (tables != null ? tables.hashCode() : 0);
      result_ = result_ * 37 + (hair != null ? hair.hashCode() : 0);
      result_ = result_ * 37 + (oralCavity != null ? oralCavity.hashCode() : 0);
      result_ = result_ * 37 + (skin != null ? skin.hashCode() : 0);
      result_ = result_ * 37 + (perineum != null ? perineum.hashCode() : 0);
      result_ = result_ * 37 + (clothing != null ? clothing.hashCode() : 0);
      result_ = result_ * 37 + (diet != null ? diet.hashCode() : 0);
      result_ = result_ * 37 + (sleep != null ? sleep.hashCode() : 0);
      result_ = result_ * 37 + (feces != null ? feces.hashCode() : 0);
      result_ = result_ * 37 + (skinFull != null ? skinFull.hashCode() : 0);
      result_ = result_ * 37 + (mentality != null ? mentality.hashCode() : 0);
      result_ = result_ * 37 + (discomfort != null ? discomfort.hashCode() : 0);
      result_ = result_ * 37 + (discomfortDetial != null ? discomfortDetial.hashCode() : 0);
      result_ = result_ * 37 + (result != null ? result.hashCode() : 0);
      result_ = result_ * 37 + (resultDetial != null ? resultDetial.hashCode() : 0);
      result_ = result_ * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result_ = result_ * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result_ = result_ * 37 + (createTime != null ? createTime.hashCode() : 0);
      super.hashCode = result_;
    }
    return result_;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (visitId != null) builder.append(", visitId=").append(visitId);
    if (floor != null) builder.append(", floor=").append(floor);
    if (kitchen != null) builder.append(", kitchen=").append(kitchen);
    if (toilet != null) builder.append(", toilet=").append(toilet);
    if (bed != null) builder.append(", bed=").append(bed);
    if (tables != null) builder.append(", tables=").append(tables);
    if (hair != null) builder.append(", hair=").append(hair);
    if (oralCavity != null) builder.append(", oralCavity=").append(oralCavity);
    if (skin != null) builder.append(", skin=").append(skin);
    if (perineum != null) builder.append(", perineum=").append(perineum);
    if (clothing != null) builder.append(", clothing=").append(clothing);
    if (diet != null) builder.append(", diet=").append(diet);
    if (sleep != null) builder.append(", sleep=").append(sleep);
    if (feces != null) builder.append(", feces=").append(feces);
    if (skinFull != null) builder.append(", skinFull=").append(skinFull);
    if (mentality != null) builder.append(", mentality=").append(mentality);
    if (discomfort != null) builder.append(", discomfort=").append(discomfort);
    if (discomfortDetial != null) builder.append(", discomfortDetial=").append(discomfortDetial);
    if (result != null) builder.append(", result=").append(result);
    if (resultDetial != null) builder.append(", resultDetial=").append(resultDetial);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    return builder.replace(0, 2, "InsureOrderVisitQuality{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<InsureOrderVisitQuality, Builder> {
    public Long id;

    public Long visitId;

    public Integer floor;

    public Integer kitchen;

    public Integer toilet;

    public Integer bed;

    public Integer tables;

    public Integer hair;

    public Integer oralCavity;

    public Integer skin;

    public Integer perineum;

    public Integer clothing;

    public Integer diet;

    public Integer sleep;

    public Integer feces;

    public Integer skinFull;

    public Integer mentality;

    public Integer discomfort;

    public String discomfortDetial;

    public Integer result;

    public String resultDetial;

    public Long createStaffId;

    public String createStaffName;

    public Long createTime;

    public Builder() {
    }

    /**
     * id
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 回访id
     */
    public Builder visitId(Long visitId) {
      this.visitId = visitId;
      return this;
    }

    /**
     * 地板,1-干净 2-不干净
     */
    public Builder floor(Integer floor) {
      this.floor = floor;
      return this;
    }

    /**
     * 厨房,1-干净 2-不干净
     */
    public Builder kitchen(Integer kitchen) {
      this.kitchen = kitchen;
      return this;
    }

    /**
     * 卫生间,1-干净 2-不干净
     */
    public Builder toilet(Integer toilet) {
      this.toilet = toilet;
      return this;
    }

    /**
     * 床单位,1-整洁 2-不整洁
     */
    public Builder bed(Integer bed) {
      this.bed = bed;
      return this;
    }

    /**
     * 桌椅台面,1-整洁 2-脏乱
     */
    public Builder tables(Integer tables) {
      this.tables = tables;
      return this;
    }

    /**
     * 头发,1-清洁 2-异味 3-不清洁
     */
    public Builder hair(Integer hair) {
      this.hair = hair;
      return this;
    }

    /**
     * 口腔,1-清洁 2-异味 3-不清洁
     */
    public Builder oralCavity(Integer oralCavity) {
      this.oralCavity = oralCavity;
      return this;
    }

    /**
     * 全身皮肤,1-清洁 2-异味 3-不清洁
     */
    public Builder skin(Integer skin) {
      this.skin = skin;
      return this;
    }

    /**
     * 会阴部,1-清洁 2-异味 3-不清洁
     */
    public Builder perineum(Integer perineum) {
      this.perineum = perineum;
      return this;
    }

    /**
     * 身上衣物,1-清洁 2-异味 3-不清洁
     */
    public Builder clothing(Integer clothing) {
      this.clothing = clothing;
      return this;
    }

    /**
     * 饮食,1-正常 2-胃口差 3-导管灌注
     */
    public Builder diet(Integer diet) {
      this.diet = diet;
      return this;
    }

    /**
     * 睡眠,1-好 2-易醒 3-差
     */
    public Builder sleep(Integer sleep) {
      this.sleep = sleep;
      return this;
    }

    /**
     * 大便,1-造痿 2-正常 3-失禁 4-便秘
     */
    public Builder feces(Integer feces) {
      this.feces = feces;
      return this;
    }

    /**
     * 皮肤完整性,1-完好 2-压疮 3-伤口
     */
    public Builder skinFull(Integer skinFull) {
      this.skinFull = skinFull;
      return this;
    }

    /**
     * 心理状态,1-平稳 2-焦虑 3-暴躁 4-抑郁
     */
    public Builder mentality(Integer mentality) {
      this.mentality = mentality;
      return this;
    }

    /**
     * 近期有无不适,1-无 2-有
     */
    public Builder discomfort(Integer discomfort) {
      this.discomfort = discomfort;
      return this;
    }

    /**
     * 不适状况
     */
    public Builder discomfortDetial(String discomfortDetial) {
      this.discomfortDetial = discomfortDetial;
      return this;
    }

    /**
     * 上传回访的护理问题效果评价,1-有效 2-无效
     */
    public Builder result(Integer result) {
      this.result = result;
      return this;
    }

    /**
     * 无效原因
     */
    public Builder resultDetial(String resultDetial) {
      this.resultDetial = resultDetial;
      return this;
    }

    /**
     * 创建员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 创建员工名称
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    @Override
    public InsureOrderVisitQuality build() {
      return new InsureOrderVisitQuality(id, visitId, floor, kitchen, toilet, bed, tables, hair, oralCavity, skin, perineum, clothing, diet, sleep, feces, skinFull, mentality, discomfort, discomfortDetial, result, resultDetial, createStaffId, createStaffName, createTime, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_InsureOrderVisitQuality extends ProtoAdapter<InsureOrderVisitQuality> {
    ProtoAdapter_InsureOrderVisitQuality() {
      super(FieldEncoding.LENGTH_DELIMITED, InsureOrderVisitQuality.class);
    }

    @Override
    public int encodedSize(InsureOrderVisitQuality value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.visitId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.visitId) : 0)
          + (value.floor != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.floor) : 0)
          + (value.kitchen != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.kitchen) : 0)
          + (value.toilet != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.toilet) : 0)
          + (value.bed != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.bed) : 0)
          + (value.tables != null ? ProtoAdapter.UINT32.encodedSizeWithTag(7, value.tables) : 0)
          + (value.hair != null ? ProtoAdapter.UINT32.encodedSizeWithTag(8, value.hair) : 0)
          + (value.oralCavity != null ? ProtoAdapter.UINT32.encodedSizeWithTag(9, value.oralCavity) : 0)
          + (value.skin != null ? ProtoAdapter.UINT32.encodedSizeWithTag(10, value.skin) : 0)
          + (value.perineum != null ? ProtoAdapter.UINT32.encodedSizeWithTag(11, value.perineum) : 0)
          + (value.clothing != null ? ProtoAdapter.UINT32.encodedSizeWithTag(12, value.clothing) : 0)
          + (value.diet != null ? ProtoAdapter.UINT32.encodedSizeWithTag(13, value.diet) : 0)
          + (value.sleep != null ? ProtoAdapter.UINT32.encodedSizeWithTag(14, value.sleep) : 0)
          + (value.feces != null ? ProtoAdapter.UINT32.encodedSizeWithTag(15, value.feces) : 0)
          + (value.skinFull != null ? ProtoAdapter.UINT32.encodedSizeWithTag(16, value.skinFull) : 0)
          + (value.mentality != null ? ProtoAdapter.UINT32.encodedSizeWithTag(17, value.mentality) : 0)
          + (value.discomfort != null ? ProtoAdapter.UINT32.encodedSizeWithTag(18, value.discomfort) : 0)
          + (value.discomfortDetial != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.discomfortDetial) : 0)
          + (value.result != null ? ProtoAdapter.UINT32.encodedSizeWithTag(20, value.result) : 0)
          + (value.resultDetial != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.resultDetial) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(22, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.createStaffName) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(24, value.createTime) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, InsureOrderVisitQuality value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.visitId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.visitId);
      if (value.floor != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.floor);
      if (value.kitchen != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.kitchen);
      if (value.toilet != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.toilet);
      if (value.bed != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.bed);
      if (value.tables != null) ProtoAdapter.UINT32.encodeWithTag(writer, 7, value.tables);
      if (value.hair != null) ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.hair);
      if (value.oralCavity != null) ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.oralCavity);
      if (value.skin != null) ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.skin);
      if (value.perineum != null) ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.perineum);
      if (value.clothing != null) ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.clothing);
      if (value.diet != null) ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.diet);
      if (value.sleep != null) ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.sleep);
      if (value.feces != null) ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.feces);
      if (value.skinFull != null) ProtoAdapter.UINT32.encodeWithTag(writer, 16, value.skinFull);
      if (value.mentality != null) ProtoAdapter.UINT32.encodeWithTag(writer, 17, value.mentality);
      if (value.discomfort != null) ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.discomfort);
      if (value.discomfortDetial != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.discomfortDetial);
      if (value.result != null) ProtoAdapter.UINT32.encodeWithTag(writer, 20, value.result);
      if (value.resultDetial != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.resultDetial);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 22, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.createStaffName);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 24, value.createTime);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public InsureOrderVisitQuality decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.visitId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.floor(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.kitchen(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.toilet(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.bed(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.tables(ProtoAdapter.UINT32.decode(reader)); break;
          case 8: builder.hair(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.oralCavity(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.skin(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.perineum(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.clothing(ProtoAdapter.UINT32.decode(reader)); break;
          case 13: builder.diet(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.sleep(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.feces(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.skinFull(ProtoAdapter.UINT32.decode(reader)); break;
          case 17: builder.mentality(ProtoAdapter.UINT32.decode(reader)); break;
          case 18: builder.discomfort(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.discomfortDetial(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.result(ProtoAdapter.UINT32.decode(reader)); break;
          case 21: builder.resultDetial(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 23: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public InsureOrderVisitQuality redact(InsureOrderVisitQuality value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
