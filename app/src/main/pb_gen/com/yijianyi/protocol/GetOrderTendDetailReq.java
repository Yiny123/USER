// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 1686:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 照护计划详情
 */
public final class GetOrderTendDetailReq extends Message<GetOrderTendDetailReq, GetOrderTendDetailReq.Builder> {
  public static final ProtoAdapter<GetOrderTendDetailReq> ADAPTER = new ProtoAdapter_GetOrderTendDetailReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_TENDID = 0L;

  public static final Boolean DEFAULT_ISALL = false;

  /**
   * 订单id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 自照计划id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long tendId;

  /**
   * 是否获取所有明细类型
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean isAll;

  public GetOrderTendDetailReq(String orderId, Long tendId, Boolean isAll) {
    this(orderId, tendId, isAll, ByteString.EMPTY);
  }

  public GetOrderTendDetailReq(String orderId, Long tendId, Boolean isAll, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.orderId = orderId;
    this.tendId = tendId;
    this.isAll = isAll;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.orderId = orderId;
    builder.tendId = tendId;
    builder.isAll = isAll;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof GetOrderTendDetailReq)) return false;
    GetOrderTendDetailReq o = (GetOrderTendDetailReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(tendId, o.tendId)
        && Internal.equals(isAll, o.isAll);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (tendId != null ? tendId.hashCode() : 0);
      result = result * 37 + (isAll != null ? isAll.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (tendId != null) builder.append(", tendId=").append(tendId);
    if (isAll != null) builder.append(", isAll=").append(isAll);
    return builder.replace(0, 2, "GetOrderTendDetailReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<GetOrderTendDetailReq, Builder> {
    public String orderId;

    public Long tendId;

    public Boolean isAll;

    public Builder() {
    }

    /**
     * 订单id
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 自照计划id
     */
    public Builder tendId(Long tendId) {
      this.tendId = tendId;
      return this;
    }

    /**
     * 是否获取所有明细类型
     */
    public Builder isAll(Boolean isAll) {
      this.isAll = isAll;
      return this;
    }

    @Override
    public GetOrderTendDetailReq build() {
      return new GetOrderTendDetailReq(orderId, tendId, isAll, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_GetOrderTendDetailReq extends ProtoAdapter<GetOrderTendDetailReq> {
    ProtoAdapter_GetOrderTendDetailReq() {
      super(FieldEncoding.LENGTH_DELIMITED, GetOrderTendDetailReq.class);
    }

    @Override
    public int encodedSize(GetOrderTendDetailReq value) {
      return (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.orderId) : 0)
          + (value.tendId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.tendId) : 0)
          + (value.isAll != null ? ProtoAdapter.BOOL.encodedSizeWithTag(3, value.isAll) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, GetOrderTendDetailReq value) throws IOException {
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.orderId);
      if (value.tendId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.tendId);
      if (value.isAll != null) ProtoAdapter.BOOL.encodeWithTag(writer, 3, value.isAll);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public GetOrderTendDetailReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.tendId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.isAll(ProtoAdapter.BOOL.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public GetOrderTendDetailReq redact(GetOrderTendDetailReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
