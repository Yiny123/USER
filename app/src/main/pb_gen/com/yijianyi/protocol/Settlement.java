// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 306:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 结算清单
 */
public final class Settlement extends Message<Settlement, Settlement.Builder> {
  public static final ProtoAdapter<Settlement> ADAPTER = new ProtoAdapter_Settlement();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_USERID = 0L;

  public static final Long DEFAULT_NEEDPAY = 0L;

  public static final Long DEFAULT_TOTALFEE = 0L;

  public static final Integer DEFAULT_MONTH = 0;

  public static final String DEFAULT_STARTSERVICETIME = "";

  public static final String DEFAULT_SETTLETIME = "";

  public static final Integer DEFAULT_PAYSTATE = 0;

  public static final Integer DEFAULT_PAYWAY = 0;

  public static final String DEFAULT_CREATETIME = "";

  public static final Integer DEFAULT_ORDERTYPE = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 订单ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 用户ID
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 需要支付的费用
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long needPay;

  /**
   * 结算费用
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long totalFee;

  /**
   * 结算月份
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer month;

  /**
   * 服务开始时间
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String startServiceTime;

  /**
   * 结算时间
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String settleTime;

  /**
   * 支付状态
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payState;

  /**
   * 支付方式 1 - 微信 2 - 支付宝
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payWay;

  /**
   * 创建时间
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createTime;

  /**
   * 订单类型
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer orderType;

  public Settlement(Long id, String orderId, Long userId, Long needPay, Long totalFee, Integer month, String startServiceTime, String settleTime, Integer payState, Integer payWay, String createTime, Integer orderType) {
    this(id, orderId, userId, needPay, totalFee, month, startServiceTime, settleTime, payState, payWay, createTime, orderType, ByteString.EMPTY);
  }

  public Settlement(Long id, String orderId, Long userId, Long needPay, Long totalFee, Integer month, String startServiceTime, String settleTime, Integer payState, Integer payWay, String createTime, Integer orderType, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.orderId = orderId;
    this.userId = userId;
    this.needPay = needPay;
    this.totalFee = totalFee;
    this.month = month;
    this.startServiceTime = startServiceTime;
    this.settleTime = settleTime;
    this.payState = payState;
    this.payWay = payWay;
    this.createTime = createTime;
    this.orderType = orderType;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.orderId = orderId;
    builder.userId = userId;
    builder.needPay = needPay;
    builder.totalFee = totalFee;
    builder.month = month;
    builder.startServiceTime = startServiceTime;
    builder.settleTime = settleTime;
    builder.payState = payState;
    builder.payWay = payWay;
    builder.createTime = createTime;
    builder.orderType = orderType;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Settlement)) return false;
    Settlement o = (Settlement) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(userId, o.userId)
        && Internal.equals(needPay, o.needPay)
        && Internal.equals(totalFee, o.totalFee)
        && Internal.equals(month, o.month)
        && Internal.equals(startServiceTime, o.startServiceTime)
        && Internal.equals(settleTime, o.settleTime)
        && Internal.equals(payState, o.payState)
        && Internal.equals(payWay, o.payWay)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(orderType, o.orderType);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (needPay != null ? needPay.hashCode() : 0);
      result = result * 37 + (totalFee != null ? totalFee.hashCode() : 0);
      result = result * 37 + (month != null ? month.hashCode() : 0);
      result = result * 37 + (startServiceTime != null ? startServiceTime.hashCode() : 0);
      result = result * 37 + (settleTime != null ? settleTime.hashCode() : 0);
      result = result * 37 + (payState != null ? payState.hashCode() : 0);
      result = result * 37 + (payWay != null ? payWay.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (orderType != null ? orderType.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (userId != null) builder.append(", userId=").append(userId);
    if (needPay != null) builder.append(", needPay=").append(needPay);
    if (totalFee != null) builder.append(", totalFee=").append(totalFee);
    if (month != null) builder.append(", month=").append(month);
    if (startServiceTime != null) builder.append(", startServiceTime=").append(startServiceTime);
    if (settleTime != null) builder.append(", settleTime=").append(settleTime);
    if (payState != null) builder.append(", payState=").append(payState);
    if (payWay != null) builder.append(", payWay=").append(payWay);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (orderType != null) builder.append(", orderType=").append(orderType);
    return builder.replace(0, 2, "Settlement{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Settlement, Builder> {
    public Long id;

    public String orderId;

    public Long userId;

    public Long needPay;

    public Long totalFee;

    public Integer month;

    public String startServiceTime;

    public String settleTime;

    public Integer payState;

    public Integer payWay;

    public String createTime;

    public Integer orderType;

    public Builder() {
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 订单ID
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 用户ID
     */
    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 需要支付的费用
     */
    public Builder needPay(Long needPay) {
      this.needPay = needPay;
      return this;
    }

    /**
     * 结算费用
     */
    public Builder totalFee(Long totalFee) {
      this.totalFee = totalFee;
      return this;
    }

    /**
     * 结算月份
     */
    public Builder month(Integer month) {
      this.month = month;
      return this;
    }

    /**
     * 服务开始时间
     */
    public Builder startServiceTime(String startServiceTime) {
      this.startServiceTime = startServiceTime;
      return this;
    }

    /**
     * 结算时间
     */
    public Builder settleTime(String settleTime) {
      this.settleTime = settleTime;
      return this;
    }

    /**
     * 支付状态
     */
    public Builder payState(Integer payState) {
      this.payState = payState;
      return this;
    }

    /**
     * 支付方式 1 - 微信 2 - 支付宝
     */
    public Builder payWay(Integer payWay) {
      this.payWay = payWay;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(String createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 订单类型
     */
    public Builder orderType(Integer orderType) {
      this.orderType = orderType;
      return this;
    }

    @Override
    public Settlement build() {
      return new Settlement(id, orderId, userId, needPay, totalFee, month, startServiceTime, settleTime, payState, payWay, createTime, orderType, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Settlement extends ProtoAdapter<Settlement> {
    ProtoAdapter_Settlement() {
      super(FieldEncoding.LENGTH_DELIMITED, Settlement.class);
    }

    @Override
    public int encodedSize(Settlement value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.orderId) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.userId) : 0)
          + (value.needPay != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.needPay) : 0)
          + (value.totalFee != null ? ProtoAdapter.UINT64.encodedSizeWithTag(5, value.totalFee) : 0)
          + (value.month != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.month) : 0)
          + (value.startServiceTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.startServiceTime) : 0)
          + (value.settleTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.settleTime) : 0)
          + (value.payState != null ? ProtoAdapter.UINT32.encodedSizeWithTag(9, value.payState) : 0)
          + (value.payWay != null ? ProtoAdapter.UINT32.encodedSizeWithTag(10, value.payWay) : 0)
          + (value.createTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.createTime) : 0)
          + (value.orderType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(12, value.orderType) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Settlement value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.orderId);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.userId);
      if (value.needPay != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.needPay);
      if (value.totalFee != null) ProtoAdapter.UINT64.encodeWithTag(writer, 5, value.totalFee);
      if (value.month != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.month);
      if (value.startServiceTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.startServiceTime);
      if (value.settleTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.settleTime);
      if (value.payState != null) ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.payState);
      if (value.payWay != null) ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.payWay);
      if (value.createTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.createTime);
      if (value.orderType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.orderType);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Settlement decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.needPay(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.totalFee(ProtoAdapter.UINT64.decode(reader)); break;
          case 6: builder.month(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.startServiceTime(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.settleTime(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.payState(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.payWay(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.createTime(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.orderType(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Settlement redact(Settlement value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
