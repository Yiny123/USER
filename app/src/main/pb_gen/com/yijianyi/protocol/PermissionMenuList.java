// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 703:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class PermissionMenuList extends Message<PermissionMenuList, PermissionMenuList.Builder> {
  public static final ProtoAdapter<PermissionMenuList> ADAPTER = new ProtoAdapter_PermissionMenuList();

  private static final long serialVersionUID = 0L;

  @WireField(
      tag = 1,
      adapter = "com.yijianyi.protocol.PermissionMenu#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<PermissionMenu> list;

  public PermissionMenuList(List<PermissionMenu> list) {
    this(list, ByteString.EMPTY);
  }

  public PermissionMenuList(List<PermissionMenu> list, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.list = Internal.immutableCopyOf("list", list);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.list = Internal.copyOf("list", list);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PermissionMenuList)) return false;
    PermissionMenuList o = (PermissionMenuList) other;
    return unknownFields().equals(o.unknownFields())
        && list.equals(o.list);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + list.hashCode();
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (!list.isEmpty()) builder.append(", list=").append(list);
    return builder.replace(0, 2, "PermissionMenuList{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<PermissionMenuList, Builder> {
    public List<PermissionMenu> list;

    public Builder() {
      list = Internal.newMutableList();
    }

    public Builder list(List<PermissionMenu> list) {
      Internal.checkElementsNotNull(list);
      this.list = list;
      return this;
    }

    @Override
    public PermissionMenuList build() {
      return new PermissionMenuList(list, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_PermissionMenuList extends ProtoAdapter<PermissionMenuList> {
    ProtoAdapter_PermissionMenuList() {
      super(FieldEncoding.LENGTH_DELIMITED, PermissionMenuList.class);
    }

    @Override
    public int encodedSize(PermissionMenuList value) {
      return PermissionMenu.ADAPTER.asRepeated().encodedSizeWithTag(1, value.list)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, PermissionMenuList value) throws IOException {
      PermissionMenu.ADAPTER.asRepeated().encodeWithTag(writer, 1, value.list);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public PermissionMenuList decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.list.add(PermissionMenu.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public PermissionMenuList redact(PermissionMenuList value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.list, PermissionMenu.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
