// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AssessModel.proto at 152:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 医疗照护评估
 */
public final class InsureAssessNurse extends Message<InsureAssessNurse, InsureAssessNurse.Builder> {
  public static final ProtoAdapter<InsureAssessNurse> ADAPTER = new ProtoAdapter_InsureAssessNurse();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Long DEFAULT_RESULTID = 0L;

  public static final Integer DEFAULT_LEVEL = 0;

  public static final Integer DEFAULT_BASENURSE = 0;

  public static final Integer DEFAULT_COMMONNURSE = 0;

  public static final Integer DEFAULT_REHANURSE = 0;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 报告id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long resultId;

  /**
   * 医疗照护分级0（基础正常或轻度，常规和康复正常）-1（基础中度，常规和康复轻度）-2（基础重度，常规和康复重度）-3（常规或康复重度）-4（需接受特殊治疗/护理）
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer level;

  /**
   * 基础护理 1-正常 2-轻度依赖 3-中度依赖 4-重度依赖
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer baseNurse;

  /**
   * 常规治疗护理 1-正常 2-轻度依赖 3-中度依赖 4-重度依赖
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer commonNurse;

  /**
   * 康复护理 1-正常 2-轻度依赖 3-中度依赖 4-重度依赖
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer rehaNurse;

  /**
   * 特殊治疗/护理（多选） 放射治疗、化学治疗、持续吸氧/吸痰、处于造口适应期、使用监护仪、人工呼吸机、压疮Ⅲ级、频繁伤口换药（大换药/特大换药）、静脉营养、气管切开处理、严重皮肤溃疡
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> specialNurse;

  /**
   * 本次评估时间
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 操作员工ID
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 评估人员
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  public InsureAssessNurse(Long id, Long resultId, Integer level, Integer baseNurse, Integer commonNurse, Integer rehaNurse, List<String> specialNurse, Long createTime, Long createStaffId, String createStaffName) {
    this(id, resultId, level, baseNurse, commonNurse, rehaNurse, specialNurse, createTime, createStaffId, createStaffName, ByteString.EMPTY);
  }

  public InsureAssessNurse(Long id, Long resultId, Integer level, Integer baseNurse, Integer commonNurse, Integer rehaNurse, List<String> specialNurse, Long createTime, Long createStaffId, String createStaffName, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.resultId = resultId;
    this.level = level;
    this.baseNurse = baseNurse;
    this.commonNurse = commonNurse;
    this.rehaNurse = rehaNurse;
    this.specialNurse = Internal.immutableCopyOf("specialNurse", specialNurse);
    this.createTime = createTime;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.resultId = resultId;
    builder.level = level;
    builder.baseNurse = baseNurse;
    builder.commonNurse = commonNurse;
    builder.rehaNurse = rehaNurse;
    builder.specialNurse = Internal.copyOf("specialNurse", specialNurse);
    builder.createTime = createTime;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof InsureAssessNurse)) return false;
    InsureAssessNurse o = (InsureAssessNurse) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(resultId, o.resultId)
        && Internal.equals(level, o.level)
        && Internal.equals(baseNurse, o.baseNurse)
        && Internal.equals(commonNurse, o.commonNurse)
        && Internal.equals(rehaNurse, o.rehaNurse)
        && specialNurse.equals(o.specialNurse)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (resultId != null ? resultId.hashCode() : 0);
      result = result * 37 + (level != null ? level.hashCode() : 0);
      result = result * 37 + (baseNurse != null ? baseNurse.hashCode() : 0);
      result = result * 37 + (commonNurse != null ? commonNurse.hashCode() : 0);
      result = result * 37 + (rehaNurse != null ? rehaNurse.hashCode() : 0);
      result = result * 37 + specialNurse.hashCode();
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (resultId != null) builder.append(", resultId=").append(resultId);
    if (level != null) builder.append(", level=").append(level);
    if (baseNurse != null) builder.append(", baseNurse=").append(baseNurse);
    if (commonNurse != null) builder.append(", commonNurse=").append(commonNurse);
    if (rehaNurse != null) builder.append(", rehaNurse=").append(rehaNurse);
    if (!specialNurse.isEmpty()) builder.append(", specialNurse=").append(specialNurse);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    return builder.replace(0, 2, "InsureAssessNurse{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<InsureAssessNurse, Builder> {
    public Long id;

    public Long resultId;

    public Integer level;

    public Integer baseNurse;

    public Integer commonNurse;

    public Integer rehaNurse;

    public List<String> specialNurse;

    public Long createTime;

    public Long createStaffId;

    public String createStaffName;

    public Builder() {
      specialNurse = Internal.newMutableList();
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 报告id
     */
    public Builder resultId(Long resultId) {
      this.resultId = resultId;
      return this;
    }

    /**
     * 医疗照护分级0（基础正常或轻度，常规和康复正常）-1（基础中度，常规和康复轻度）-2（基础重度，常规和康复重度）-3（常规或康复重度）-4（需接受特殊治疗/护理）
     */
    public Builder level(Integer level) {
      this.level = level;
      return this;
    }

    /**
     * 基础护理 1-正常 2-轻度依赖 3-中度依赖 4-重度依赖
     */
    public Builder baseNurse(Integer baseNurse) {
      this.baseNurse = baseNurse;
      return this;
    }

    /**
     * 常规治疗护理 1-正常 2-轻度依赖 3-中度依赖 4-重度依赖
     */
    public Builder commonNurse(Integer commonNurse) {
      this.commonNurse = commonNurse;
      return this;
    }

    /**
     * 康复护理 1-正常 2-轻度依赖 3-中度依赖 4-重度依赖
     */
    public Builder rehaNurse(Integer rehaNurse) {
      this.rehaNurse = rehaNurse;
      return this;
    }

    /**
     * 特殊治疗/护理（多选） 放射治疗、化学治疗、持续吸氧/吸痰、处于造口适应期、使用监护仪、人工呼吸机、压疮Ⅲ级、频繁伤口换药（大换药/特大换药）、静脉营养、气管切开处理、严重皮肤溃疡
     */
    public Builder specialNurse(List<String> specialNurse) {
      Internal.checkElementsNotNull(specialNurse);
      this.specialNurse = specialNurse;
      return this;
    }

    /**
     * 本次评估时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 操作员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 评估人员
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    @Override
    public InsureAssessNurse build() {
      return new InsureAssessNurse(id, resultId, level, baseNurse, commonNurse, rehaNurse, specialNurse, createTime, createStaffId, createStaffName, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_InsureAssessNurse extends ProtoAdapter<InsureAssessNurse> {
    ProtoAdapter_InsureAssessNurse() {
      super(FieldEncoding.LENGTH_DELIMITED, InsureAssessNurse.class);
    }

    @Override
    public int encodedSize(InsureAssessNurse value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.resultId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.resultId) : 0)
          + (value.level != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.level) : 0)
          + (value.baseNurse != null ? ProtoAdapter.UINT32.encodedSizeWithTag(4, value.baseNurse) : 0)
          + (value.commonNurse != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.commonNurse) : 0)
          + (value.rehaNurse != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.rehaNurse) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(7, value.specialNurse)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.createTime) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.createStaffName) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, InsureAssessNurse value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.resultId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.resultId);
      if (value.level != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.level);
      if (value.baseNurse != null) ProtoAdapter.UINT32.encodeWithTag(writer, 4, value.baseNurse);
      if (value.commonNurse != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.commonNurse);
      if (value.rehaNurse != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.rehaNurse);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 7, value.specialNurse);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.createTime);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.createStaffName);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public InsureAssessNurse decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.resultId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.level(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.baseNurse(ProtoAdapter.UINT32.decode(reader)); break;
          case 5: builder.commonNurse(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.rehaNurse(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.specialNurse.add(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public InsureAssessNurse redact(InsureAssessNurse value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
