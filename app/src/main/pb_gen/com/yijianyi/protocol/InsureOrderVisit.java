// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: OrderModel.proto at 740:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 长护险订单回访
 */
public final class InsureOrderVisit extends Message<InsureOrderVisit, InsureOrderVisit.Builder> {
  public static final ProtoAdapter<InsureOrderVisit> ADAPTER = new ProtoAdapter_InsureOrderVisit();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Long DEFAULT_COMPANYID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Long DEFAULT_VISITTIME = 0L;

  public static final String DEFAULT_VISITDETIAL = "";

  public static final Integer DEFAULT_VISITSTATUS = 0;

  public static final Long DEFAULT_VISITSTARTTIME = 0L;

  public static final Long DEFAULT_VISITENDTIME = 0L;

  public static final String DEFAULT_VISITPROBLEM = "";

  public static final String DEFAULT_VISITMEASURES = "";

  public static final Long DEFAULT_VISITVITAID = 0L;

  public static final Long DEFAULT_VISITQUALITYID = 0L;

  public static final String DEFAULT_VISITTRAININGTYPE = "";

  public static final Integer DEFAULT_VISITSKILLSTATUS = 0;

  public static final String DEFAULT_RELATIONIMGID = "";

  public static final String DEFAULT_HGIMGID = "";

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_FINISHTIME = 0L;

  public static final Long DEFAULT_NURSELEADERID = 0L;

  public static final String DEFAULT_NURSELEADERNAME = "";

  /**
   * id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long id;

  /**
   * 公司ID
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long companyId;

  /**
   * 订单号
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 回访时间
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long visitTime;

  /**
   * 回访内容，不允许修改
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String visitDetial;

  /**
   * 回访状态  0-未执行 1-执行中 2-已完成 -1-删除
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer visitStatus;

  /**
   * 回访开始时间
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long visitStartTime;

  /**
   * 回访结束时间
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long visitEndTime;

  /**
   * 现存护理问题
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String visitProblem;

  /**
   * 护理措施
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String visitMeasures;

  /**
   * 生命体征id
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long visitVitaId;

  /**
   * 质控内容id
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long visitQualityId;

  /**
   * 技能培训
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> visitSkillTraining;

  /**
   * 技能培训，1-指导 2-视频 ，多个以,逗号隔开
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String visitTrainingType;

  /**
   * 护理员技能掌握程度 0-掌握 1-未掌握
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer visitSkillStatus;

  /**
   * 家属签名图片id
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String relationImgId;

  /**
   * 护工图片id
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String hgImgId;

  /**
   * 创建员工ID
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  /**
   * 创建员工名称
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 创建时间
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  /**
   * 完成时间
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long finishTime;

  /**
   * 护士长ID
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long nurseLeaderId;

  /**
   * 护士长名称
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nurseLeaderName;

  public InsureOrderVisit(Long id, Long companyId, String orderId, Long visitTime, String visitDetial, Integer visitStatus, Long visitStartTime, Long visitEndTime, String visitProblem, String visitMeasures, Long visitVitaId, Long visitQualityId, List<String> visitSkillTraining, String visitTrainingType, Integer visitSkillStatus, String relationImgId, String hgImgId, Long createStaffId, String createStaffName, Long createTime, Long finishTime, Long nurseLeaderId, String nurseLeaderName) {
    this(id, companyId, orderId, visitTime, visitDetial, visitStatus, visitStartTime, visitEndTime, visitProblem, visitMeasures, visitVitaId, visitQualityId, visitSkillTraining, visitTrainingType, visitSkillStatus, relationImgId, hgImgId, createStaffId, createStaffName, createTime, finishTime, nurseLeaderId, nurseLeaderName, ByteString.EMPTY);
  }

  public InsureOrderVisit(Long id, Long companyId, String orderId, Long visitTime, String visitDetial, Integer visitStatus, Long visitStartTime, Long visitEndTime, String visitProblem, String visitMeasures, Long visitVitaId, Long visitQualityId, List<String> visitSkillTraining, String visitTrainingType, Integer visitSkillStatus, String relationImgId, String hgImgId, Long createStaffId, String createStaffName, Long createTime, Long finishTime, Long nurseLeaderId, String nurseLeaderName, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.companyId = companyId;
    this.orderId = orderId;
    this.visitTime = visitTime;
    this.visitDetial = visitDetial;
    this.visitStatus = visitStatus;
    this.visitStartTime = visitStartTime;
    this.visitEndTime = visitEndTime;
    this.visitProblem = visitProblem;
    this.visitMeasures = visitMeasures;
    this.visitVitaId = visitVitaId;
    this.visitQualityId = visitQualityId;
    this.visitSkillTraining = Internal.immutableCopyOf("visitSkillTraining", visitSkillTraining);
    this.visitTrainingType = visitTrainingType;
    this.visitSkillStatus = visitSkillStatus;
    this.relationImgId = relationImgId;
    this.hgImgId = hgImgId;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.createTime = createTime;
    this.finishTime = finishTime;
    this.nurseLeaderId = nurseLeaderId;
    this.nurseLeaderName = nurseLeaderName;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.companyId = companyId;
    builder.orderId = orderId;
    builder.visitTime = visitTime;
    builder.visitDetial = visitDetial;
    builder.visitStatus = visitStatus;
    builder.visitStartTime = visitStartTime;
    builder.visitEndTime = visitEndTime;
    builder.visitProblem = visitProblem;
    builder.visitMeasures = visitMeasures;
    builder.visitVitaId = visitVitaId;
    builder.visitQualityId = visitQualityId;
    builder.visitSkillTraining = Internal.copyOf("visitSkillTraining", visitSkillTraining);
    builder.visitTrainingType = visitTrainingType;
    builder.visitSkillStatus = visitSkillStatus;
    builder.relationImgId = relationImgId;
    builder.hgImgId = hgImgId;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.createTime = createTime;
    builder.finishTime = finishTime;
    builder.nurseLeaderId = nurseLeaderId;
    builder.nurseLeaderName = nurseLeaderName;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof InsureOrderVisit)) return false;
    InsureOrderVisit o = (InsureOrderVisit) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(companyId, o.companyId)
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(visitTime, o.visitTime)
        && Internal.equals(visitDetial, o.visitDetial)
        && Internal.equals(visitStatus, o.visitStatus)
        && Internal.equals(visitStartTime, o.visitStartTime)
        && Internal.equals(visitEndTime, o.visitEndTime)
        && Internal.equals(visitProblem, o.visitProblem)
        && Internal.equals(visitMeasures, o.visitMeasures)
        && Internal.equals(visitVitaId, o.visitVitaId)
        && Internal.equals(visitQualityId, o.visitQualityId)
        && visitSkillTraining.equals(o.visitSkillTraining)
        && Internal.equals(visitTrainingType, o.visitTrainingType)
        && Internal.equals(visitSkillStatus, o.visitSkillStatus)
        && Internal.equals(relationImgId, o.relationImgId)
        && Internal.equals(hgImgId, o.hgImgId)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(finishTime, o.finishTime)
        && Internal.equals(nurseLeaderId, o.nurseLeaderId)
        && Internal.equals(nurseLeaderName, o.nurseLeaderName);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (companyId != null ? companyId.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (visitTime != null ? visitTime.hashCode() : 0);
      result = result * 37 + (visitDetial != null ? visitDetial.hashCode() : 0);
      result = result * 37 + (visitStatus != null ? visitStatus.hashCode() : 0);
      result = result * 37 + (visitStartTime != null ? visitStartTime.hashCode() : 0);
      result = result * 37 + (visitEndTime != null ? visitEndTime.hashCode() : 0);
      result = result * 37 + (visitProblem != null ? visitProblem.hashCode() : 0);
      result = result * 37 + (visitMeasures != null ? visitMeasures.hashCode() : 0);
      result = result * 37 + (visitVitaId != null ? visitVitaId.hashCode() : 0);
      result = result * 37 + (visitQualityId != null ? visitQualityId.hashCode() : 0);
      result = result * 37 + visitSkillTraining.hashCode();
      result = result * 37 + (visitTrainingType != null ? visitTrainingType.hashCode() : 0);
      result = result * 37 + (visitSkillStatus != null ? visitSkillStatus.hashCode() : 0);
      result = result * 37 + (relationImgId != null ? relationImgId.hashCode() : 0);
      result = result * 37 + (hgImgId != null ? hgImgId.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (finishTime != null ? finishTime.hashCode() : 0);
      result = result * 37 + (nurseLeaderId != null ? nurseLeaderId.hashCode() : 0);
      result = result * 37 + (nurseLeaderName != null ? nurseLeaderName.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (companyId != null) builder.append(", companyId=").append(companyId);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (visitTime != null) builder.append(", visitTime=").append(visitTime);
    if (visitDetial != null) builder.append(", visitDetial=").append(visitDetial);
    if (visitStatus != null) builder.append(", visitStatus=").append(visitStatus);
    if (visitStartTime != null) builder.append(", visitStartTime=").append(visitStartTime);
    if (visitEndTime != null) builder.append(", visitEndTime=").append(visitEndTime);
    if (visitProblem != null) builder.append(", visitProblem=").append(visitProblem);
    if (visitMeasures != null) builder.append(", visitMeasures=").append(visitMeasures);
    if (visitVitaId != null) builder.append(", visitVitaId=").append(visitVitaId);
    if (visitQualityId != null) builder.append(", visitQualityId=").append(visitQualityId);
    if (!visitSkillTraining.isEmpty()) builder.append(", visitSkillTraining=").append(visitSkillTraining);
    if (visitTrainingType != null) builder.append(", visitTrainingType=").append(visitTrainingType);
    if (visitSkillStatus != null) builder.append(", visitSkillStatus=").append(visitSkillStatus);
    if (relationImgId != null) builder.append(", relationImgId=").append(relationImgId);
    if (hgImgId != null) builder.append(", hgImgId=").append(hgImgId);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (finishTime != null) builder.append(", finishTime=").append(finishTime);
    if (nurseLeaderId != null) builder.append(", nurseLeaderId=").append(nurseLeaderId);
    if (nurseLeaderName != null) builder.append(", nurseLeaderName=").append(nurseLeaderName);
    return builder.replace(0, 2, "InsureOrderVisit{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<InsureOrderVisit, Builder> {
    public Long id;

    public Long companyId;

    public String orderId;

    public Long visitTime;

    public String visitDetial;

    public Integer visitStatus;

    public Long visitStartTime;

    public Long visitEndTime;

    public String visitProblem;

    public String visitMeasures;

    public Long visitVitaId;

    public Long visitQualityId;

    public List<String> visitSkillTraining;

    public String visitTrainingType;

    public Integer visitSkillStatus;

    public String relationImgId;

    public String hgImgId;

    public Long createStaffId;

    public String createStaffName;

    public Long createTime;

    public Long finishTime;

    public Long nurseLeaderId;

    public String nurseLeaderName;

    public Builder() {
      visitSkillTraining = Internal.newMutableList();
    }

    /**
     * id
     */
    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    /**
     * 公司ID
     */
    public Builder companyId(Long companyId) {
      this.companyId = companyId;
      return this;
    }

    /**
     * 订单号
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 回访时间
     */
    public Builder visitTime(Long visitTime) {
      this.visitTime = visitTime;
      return this;
    }

    /**
     * 回访内容，不允许修改
     */
    public Builder visitDetial(String visitDetial) {
      this.visitDetial = visitDetial;
      return this;
    }

    /**
     * 回访状态  0-未执行 1-执行中 2-已完成 -1-删除
     */
    public Builder visitStatus(Integer visitStatus) {
      this.visitStatus = visitStatus;
      return this;
    }

    /**
     * 回访开始时间
     */
    public Builder visitStartTime(Long visitStartTime) {
      this.visitStartTime = visitStartTime;
      return this;
    }

    /**
     * 回访结束时间
     */
    public Builder visitEndTime(Long visitEndTime) {
      this.visitEndTime = visitEndTime;
      return this;
    }

    /**
     * 现存护理问题
     */
    public Builder visitProblem(String visitProblem) {
      this.visitProblem = visitProblem;
      return this;
    }

    /**
     * 护理措施
     */
    public Builder visitMeasures(String visitMeasures) {
      this.visitMeasures = visitMeasures;
      return this;
    }

    /**
     * 生命体征id
     */
    public Builder visitVitaId(Long visitVitaId) {
      this.visitVitaId = visitVitaId;
      return this;
    }

    /**
     * 质控内容id
     */
    public Builder visitQualityId(Long visitQualityId) {
      this.visitQualityId = visitQualityId;
      return this;
    }

    /**
     * 技能培训
     */
    public Builder visitSkillTraining(List<String> visitSkillTraining) {
      Internal.checkElementsNotNull(visitSkillTraining);
      this.visitSkillTraining = visitSkillTraining;
      return this;
    }

    /**
     * 技能培训，1-指导 2-视频 ，多个以,逗号隔开
     */
    public Builder visitTrainingType(String visitTrainingType) {
      this.visitTrainingType = visitTrainingType;
      return this;
    }

    /**
     * 护理员技能掌握程度 0-掌握 1-未掌握
     */
    public Builder visitSkillStatus(Integer visitSkillStatus) {
      this.visitSkillStatus = visitSkillStatus;
      return this;
    }

    /**
     * 家属签名图片id
     */
    public Builder relationImgId(String relationImgId) {
      this.relationImgId = relationImgId;
      return this;
    }

    /**
     * 护工图片id
     */
    public Builder hgImgId(String hgImgId) {
      this.hgImgId = hgImgId;
      return this;
    }

    /**
     * 创建员工ID
     */
    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    /**
     * 创建员工名称
     */
    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    /**
     * 完成时间
     */
    public Builder finishTime(Long finishTime) {
      this.finishTime = finishTime;
      return this;
    }

    /**
     * 护士长ID
     */
    public Builder nurseLeaderId(Long nurseLeaderId) {
      this.nurseLeaderId = nurseLeaderId;
      return this;
    }

    /**
     * 护士长名称
     */
    public Builder nurseLeaderName(String nurseLeaderName) {
      this.nurseLeaderName = nurseLeaderName;
      return this;
    }

    @Override
    public InsureOrderVisit build() {
      return new InsureOrderVisit(id, companyId, orderId, visitTime, visitDetial, visitStatus, visitStartTime, visitEndTime, visitProblem, visitMeasures, visitVitaId, visitQualityId, visitSkillTraining, visitTrainingType, visitSkillStatus, relationImgId, hgImgId, createStaffId, createStaffName, createTime, finishTime, nurseLeaderId, nurseLeaderName, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_InsureOrderVisit extends ProtoAdapter<InsureOrderVisit> {
    ProtoAdapter_InsureOrderVisit() {
      super(FieldEncoding.LENGTH_DELIMITED, InsureOrderVisit.class);
    }

    @Override
    public int encodedSize(InsureOrderVisit value) {
      return (value.id != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.companyId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.companyId) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.orderId) : 0)
          + (value.visitTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.visitTime) : 0)
          + (value.visitDetial != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.visitDetial) : 0)
          + (value.visitStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(6, value.visitStatus) : 0)
          + (value.visitStartTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(7, value.visitStartTime) : 0)
          + (value.visitEndTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.visitEndTime) : 0)
          + (value.visitProblem != null ? ProtoAdapter.STRING.encodedSizeWithTag(9, value.visitProblem) : 0)
          + (value.visitMeasures != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.visitMeasures) : 0)
          + (value.visitVitaId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(11, value.visitVitaId) : 0)
          + (value.visitQualityId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(12, value.visitQualityId) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(13, value.visitSkillTraining)
          + (value.visitTrainingType != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.visitTrainingType) : 0)
          + (value.visitSkillStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(15, value.visitSkillStatus) : 0)
          + (value.relationImgId != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.relationImgId) : 0)
          + (value.hgImgId != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.hgImgId) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(18, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.createStaffName) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(20, value.createTime) : 0)
          + (value.finishTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(21, value.finishTime) : 0)
          + (value.nurseLeaderId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(22, value.nurseLeaderId) : 0)
          + (value.nurseLeaderName != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.nurseLeaderName) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, InsureOrderVisit value) throws IOException {
      if (value.id != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.id);
      if (value.companyId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.companyId);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.orderId);
      if (value.visitTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.visitTime);
      if (value.visitDetial != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.visitDetial);
      if (value.visitStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 6, value.visitStatus);
      if (value.visitStartTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.visitStartTime);
      if (value.visitEndTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.visitEndTime);
      if (value.visitProblem != null) ProtoAdapter.STRING.encodeWithTag(writer, 9, value.visitProblem);
      if (value.visitMeasures != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.visitMeasures);
      if (value.visitVitaId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.visitVitaId);
      if (value.visitQualityId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 12, value.visitQualityId);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 13, value.visitSkillTraining);
      if (value.visitTrainingType != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.visitTrainingType);
      if (value.visitSkillStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.visitSkillStatus);
      if (value.relationImgId != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.relationImgId);
      if (value.hgImgId != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.hgImgId);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 18, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.createStaffName);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 20, value.createTime);
      if (value.finishTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 21, value.finishTime);
      if (value.nurseLeaderId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 22, value.nurseLeaderId);
      if (value.nurseLeaderName != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.nurseLeaderName);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public InsureOrderVisit decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.companyId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.visitTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.visitDetial(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.visitStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 7: builder.visitStartTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.visitEndTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.visitProblem(ProtoAdapter.STRING.decode(reader)); break;
          case 10: builder.visitMeasures(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.visitVitaId(ProtoAdapter.UINT64.decode(reader)); break;
          case 12: builder.visitQualityId(ProtoAdapter.UINT64.decode(reader)); break;
          case 13: builder.visitSkillTraining.add(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.visitTrainingType(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.visitSkillStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.relationImgId(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.hgImgId(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 19: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 21: builder.finishTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 22: builder.nurseLeaderId(ProtoAdapter.UINT64.decode(reader)); break;
          case 23: builder.nurseLeaderName(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public InsureOrderVisit redact(InsureOrderVisit value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
