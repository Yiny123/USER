// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 1113:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Double;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 自照护理员申请记录
 */
public final class InsureStaffApply extends Message<InsureStaffApply, InsureStaffApply.Builder> {
  public static final ProtoAdapter<InsureStaffApply> ADAPTER = new ProtoAdapter_InsureStaffApply();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_APPLYID = "";

  public static final Long DEFAULT_USERID = 0L;

  public static final String DEFAULT_USERNAME = "";

  public static final String DEFAULT_USERPHONE = "";

  public static final String DEFAULT_APPLYNAME = "";

  public static final String DEFAULT_APPLYPHONE = "";

  public static final String DEFAULT_IDCARD = "";

  public static final Integer DEFAULT_ISHEALTH = 0;

  public static final Integer DEFAULT_ISNURSE = 0;

  public static final String DEFAULT_REFERRERPHONE = "";

  public static final Long DEFAULT_FEE = 0L;

  public static final Integer DEFAULT_PAYSTATUS = 0;

  public static final Integer DEFAULT_PAYTYPE = 0;

  public static final Integer DEFAULT_STATUS = 0;

  public static final String DEFAULT_REJECTDESC = "";

  public static final String DEFAULT_PROVINCE = "";

  public static final String DEFAULT_CITY = "";

  public static final String DEFAULT_CITYCODE = "";

  public static final String DEFAULT_DISTRICT = "";

  public static final String DEFAULT_ADCODE = "";

  public static final String DEFAULT_BUILDING = "";

  public static final String DEFAULT_ADDRDETAIL = "";

  public static final Integer DEFAULT_GPSTYPE = 0;

  public static final Double DEFAULT_LNG = 0.0d;

  public static final Double DEFAULT_LAT = 0.0d;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final String DEFAULT_IDCARDPIC = "";

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String applyId;

  /**
   * 用户id
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 用户名
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String userName;

  /**
   * 用户手机号
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String userPhone;

  /**
   * 申请人
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String applyName;

  /**
   * 申请人手机号
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String applyPhone;

  /**
   * 申请人身份证
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcard;

  /**
   * 是否有健康证 1-有 2-无
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer isHealth;

  /**
   * 是否有护理员资格证 1-有 2-无
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer isNurse;

  /**
   * 推荐人手机号
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String referrerPhone;

  /**
   * 需要支付的费用（单位分）
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long fee;

  /**
   * 是否已支付 0-未支付 1-已支付
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payStatus;

  /**
   * 支付方式
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payType;

  /**
   * 状态 1-待审核 2-审核通过待缴费 3-待发放账号 4-培训中 5-入职 50-审核不通过
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer status;

  /**
   * 驳回原因（审核不通过时使用）
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String rejectDesc;

  /**
   * 省
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String province;

  /**
   * 市
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String city;

  /**
   * 城市编码
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cityCode;

  /**
   * 区
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String district;

  /**
   * 区编码
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String adCode;

  /**
   * 小区
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String building;

  /**
   * 楼号、单元、门号
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String addrDetail;

  /**
   * 经纬度类型 1-百度  2-高德
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer gpsType;

  /**
   * 0.000000-维度
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double lng;

  /**
   * 0.000000-经度
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#DOUBLE"
  )
  public final Double lat;

  /**
   * 创建时间
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 身份证照片
   */
  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcardPic;

  public InsureStaffApply(String applyId, Long userId, String userName, String userPhone, String applyName, String applyPhone, String idcard, Integer isHealth, Integer isNurse, String referrerPhone, Long fee, Integer payStatus, Integer payType, Integer status, String rejectDesc, String province, String city, String cityCode, String district, String adCode, String building, String addrDetail, Integer gpsType, Double lng, Double lat, Long createTime, Long createStaffId, String createStaffName, String idcardPic) {
    this(applyId, userId, userName, userPhone, applyName, applyPhone, idcard, isHealth, isNurse, referrerPhone, fee, payStatus, payType, status, rejectDesc, province, city, cityCode, district, adCode, building, addrDetail, gpsType, lng, lat, createTime, createStaffId, createStaffName, idcardPic, ByteString.EMPTY);
  }

  public InsureStaffApply(String applyId, Long userId, String userName, String userPhone, String applyName, String applyPhone, String idcard, Integer isHealth, Integer isNurse, String referrerPhone, Long fee, Integer payStatus, Integer payType, Integer status, String rejectDesc, String province, String city, String cityCode, String district, String adCode, String building, String addrDetail, Integer gpsType, Double lng, Double lat, Long createTime, Long createStaffId, String createStaffName, String idcardPic, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.applyId = applyId;
    this.userId = userId;
    this.userName = userName;
    this.userPhone = userPhone;
    this.applyName = applyName;
    this.applyPhone = applyPhone;
    this.idcard = idcard;
    this.isHealth = isHealth;
    this.isNurse = isNurse;
    this.referrerPhone = referrerPhone;
    this.fee = fee;
    this.payStatus = payStatus;
    this.payType = payType;
    this.status = status;
    this.rejectDesc = rejectDesc;
    this.province = province;
    this.city = city;
    this.cityCode = cityCode;
    this.district = district;
    this.adCode = adCode;
    this.building = building;
    this.addrDetail = addrDetail;
    this.gpsType = gpsType;
    this.lng = lng;
    this.lat = lat;
    this.createTime = createTime;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.idcardPic = idcardPic;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.applyId = applyId;
    builder.userId = userId;
    builder.userName = userName;
    builder.userPhone = userPhone;
    builder.applyName = applyName;
    builder.applyPhone = applyPhone;
    builder.idcard = idcard;
    builder.isHealth = isHealth;
    builder.isNurse = isNurse;
    builder.referrerPhone = referrerPhone;
    builder.fee = fee;
    builder.payStatus = payStatus;
    builder.payType = payType;
    builder.status = status;
    builder.rejectDesc = rejectDesc;
    builder.province = province;
    builder.city = city;
    builder.cityCode = cityCode;
    builder.district = district;
    builder.adCode = adCode;
    builder.building = building;
    builder.addrDetail = addrDetail;
    builder.gpsType = gpsType;
    builder.lng = lng;
    builder.lat = lat;
    builder.createTime = createTime;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.idcardPic = idcardPic;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof InsureStaffApply)) return false;
    InsureStaffApply o = (InsureStaffApply) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(applyId, o.applyId)
        && Internal.equals(userId, o.userId)
        && Internal.equals(userName, o.userName)
        && Internal.equals(userPhone, o.userPhone)
        && Internal.equals(applyName, o.applyName)
        && Internal.equals(applyPhone, o.applyPhone)
        && Internal.equals(idcard, o.idcard)
        && Internal.equals(isHealth, o.isHealth)
        && Internal.equals(isNurse, o.isNurse)
        && Internal.equals(referrerPhone, o.referrerPhone)
        && Internal.equals(fee, o.fee)
        && Internal.equals(payStatus, o.payStatus)
        && Internal.equals(payType, o.payType)
        && Internal.equals(status, o.status)
        && Internal.equals(rejectDesc, o.rejectDesc)
        && Internal.equals(province, o.province)
        && Internal.equals(city, o.city)
        && Internal.equals(cityCode, o.cityCode)
        && Internal.equals(district, o.district)
        && Internal.equals(adCode, o.adCode)
        && Internal.equals(building, o.building)
        && Internal.equals(addrDetail, o.addrDetail)
        && Internal.equals(gpsType, o.gpsType)
        && Internal.equals(lng, o.lng)
        && Internal.equals(lat, o.lat)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(idcardPic, o.idcardPic);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (applyId != null ? applyId.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (userName != null ? userName.hashCode() : 0);
      result = result * 37 + (userPhone != null ? userPhone.hashCode() : 0);
      result = result * 37 + (applyName != null ? applyName.hashCode() : 0);
      result = result * 37 + (applyPhone != null ? applyPhone.hashCode() : 0);
      result = result * 37 + (idcard != null ? idcard.hashCode() : 0);
      result = result * 37 + (isHealth != null ? isHealth.hashCode() : 0);
      result = result * 37 + (isNurse != null ? isNurse.hashCode() : 0);
      result = result * 37 + (referrerPhone != null ? referrerPhone.hashCode() : 0);
      result = result * 37 + (fee != null ? fee.hashCode() : 0);
      result = result * 37 + (payStatus != null ? payStatus.hashCode() : 0);
      result = result * 37 + (payType != null ? payType.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + (rejectDesc != null ? rejectDesc.hashCode() : 0);
      result = result * 37 + (province != null ? province.hashCode() : 0);
      result = result * 37 + (city != null ? city.hashCode() : 0);
      result = result * 37 + (cityCode != null ? cityCode.hashCode() : 0);
      result = result * 37 + (district != null ? district.hashCode() : 0);
      result = result * 37 + (adCode != null ? adCode.hashCode() : 0);
      result = result * 37 + (building != null ? building.hashCode() : 0);
      result = result * 37 + (addrDetail != null ? addrDetail.hashCode() : 0);
      result = result * 37 + (gpsType != null ? gpsType.hashCode() : 0);
      result = result * 37 + (lng != null ? lng.hashCode() : 0);
      result = result * 37 + (lat != null ? lat.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (idcardPic != null ? idcardPic.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (applyId != null) builder.append(", applyId=").append(applyId);
    if (userId != null) builder.append(", userId=").append(userId);
    if (userName != null) builder.append(", userName=").append(userName);
    if (userPhone != null) builder.append(", userPhone=").append(userPhone);
    if (applyName != null) builder.append(", applyName=").append(applyName);
    if (applyPhone != null) builder.append(", applyPhone=").append(applyPhone);
    if (idcard != null) builder.append(", idcard=").append(idcard);
    if (isHealth != null) builder.append(", isHealth=").append(isHealth);
    if (isNurse != null) builder.append(", isNurse=").append(isNurse);
    if (referrerPhone != null) builder.append(", referrerPhone=").append(referrerPhone);
    if (fee != null) builder.append(", fee=").append(fee);
    if (payStatus != null) builder.append(", payStatus=").append(payStatus);
    if (payType != null) builder.append(", payType=").append(payType);
    if (status != null) builder.append(", status=").append(status);
    if (rejectDesc != null) builder.append(", rejectDesc=").append(rejectDesc);
    if (province != null) builder.append(", province=").append(province);
    if (city != null) builder.append(", city=").append(city);
    if (cityCode != null) builder.append(", cityCode=").append(cityCode);
    if (district != null) builder.append(", district=").append(district);
    if (adCode != null) builder.append(", adCode=").append(adCode);
    if (building != null) builder.append(", building=").append(building);
    if (addrDetail != null) builder.append(", addrDetail=").append(addrDetail);
    if (gpsType != null) builder.append(", gpsType=").append(gpsType);
    if (lng != null) builder.append(", lng=").append(lng);
    if (lat != null) builder.append(", lat=").append(lat);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (idcardPic != null) builder.append(", idcardPic=").append(idcardPic);
    return builder.replace(0, 2, "InsureStaffApply{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<InsureStaffApply, Builder> {
    public String applyId;

    public Long userId;

    public String userName;

    public String userPhone;

    public String applyName;

    public String applyPhone;

    public String idcard;

    public Integer isHealth;

    public Integer isNurse;

    public String referrerPhone;

    public Long fee;

    public Integer payStatus;

    public Integer payType;

    public Integer status;

    public String rejectDesc;

    public String province;

    public String city;

    public String cityCode;

    public String district;

    public String adCode;

    public String building;

    public String addrDetail;

    public Integer gpsType;

    public Double lng;

    public Double lat;

    public Long createTime;

    public Long createStaffId;

    public String createStaffName;

    public String idcardPic;

    public Builder() {
    }

    public Builder applyId(String applyId) {
      this.applyId = applyId;
      return this;
    }

    /**
     * 用户id
     */
    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 用户名
     */
    public Builder userName(String userName) {
      this.userName = userName;
      return this;
    }

    /**
     * 用户手机号
     */
    public Builder userPhone(String userPhone) {
      this.userPhone = userPhone;
      return this;
    }

    /**
     * 申请人
     */
    public Builder applyName(String applyName) {
      this.applyName = applyName;
      return this;
    }

    /**
     * 申请人手机号
     */
    public Builder applyPhone(String applyPhone) {
      this.applyPhone = applyPhone;
      return this;
    }

    /**
     * 申请人身份证
     */
    public Builder idcard(String idcard) {
      this.idcard = idcard;
      return this;
    }

    /**
     * 是否有健康证 1-有 2-无
     */
    public Builder isHealth(Integer isHealth) {
      this.isHealth = isHealth;
      return this;
    }

    /**
     * 是否有护理员资格证 1-有 2-无
     */
    public Builder isNurse(Integer isNurse) {
      this.isNurse = isNurse;
      return this;
    }

    /**
     * 推荐人手机号
     */
    public Builder referrerPhone(String referrerPhone) {
      this.referrerPhone = referrerPhone;
      return this;
    }

    /**
     * 需要支付的费用（单位分）
     */
    public Builder fee(Long fee) {
      this.fee = fee;
      return this;
    }

    /**
     * 是否已支付 0-未支付 1-已支付
     */
    public Builder payStatus(Integer payStatus) {
      this.payStatus = payStatus;
      return this;
    }

    /**
     * 支付方式
     */
    public Builder payType(Integer payType) {
      this.payType = payType;
      return this;
    }

    /**
     * 状态 1-待审核 2-审核通过待缴费 3-待发放账号 4-培训中 5-入职 50-审核不通过
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 驳回原因（审核不通过时使用）
     */
    public Builder rejectDesc(String rejectDesc) {
      this.rejectDesc = rejectDesc;
      return this;
    }

    /**
     * 省
     */
    public Builder province(String province) {
      this.province = province;
      return this;
    }

    /**
     * 市
     */
    public Builder city(String city) {
      this.city = city;
      return this;
    }

    /**
     * 城市编码
     */
    public Builder cityCode(String cityCode) {
      this.cityCode = cityCode;
      return this;
    }

    /**
     * 区
     */
    public Builder district(String district) {
      this.district = district;
      return this;
    }

    /**
     * 区编码
     */
    public Builder adCode(String adCode) {
      this.adCode = adCode;
      return this;
    }

    /**
     * 小区
     */
    public Builder building(String building) {
      this.building = building;
      return this;
    }

    /**
     * 楼号、单元、门号
     */
    public Builder addrDetail(String addrDetail) {
      this.addrDetail = addrDetail;
      return this;
    }

    /**
     * 经纬度类型 1-百度  2-高德
     */
    public Builder gpsType(Integer gpsType) {
      this.gpsType = gpsType;
      return this;
    }

    /**
     * 0.000000-维度
     */
    public Builder lng(Double lng) {
      this.lng = lng;
      return this;
    }

    /**
     * 0.000000-经度
     */
    public Builder lat(Double lat) {
      this.lat = lat;
      return this;
    }

    /**
     * 创建时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 身份证照片
     */
    public Builder idcardPic(String idcardPic) {
      this.idcardPic = idcardPic;
      return this;
    }

    @Override
    public InsureStaffApply build() {
      return new InsureStaffApply(applyId, userId, userName, userPhone, applyName, applyPhone, idcard, isHealth, isNurse, referrerPhone, fee, payStatus, payType, status, rejectDesc, province, city, cityCode, district, adCode, building, addrDetail, gpsType, lng, lat, createTime, createStaffId, createStaffName, idcardPic, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_InsureStaffApply extends ProtoAdapter<InsureStaffApply> {
    ProtoAdapter_InsureStaffApply() {
      super(FieldEncoding.LENGTH_DELIMITED, InsureStaffApply.class);
    }

    @Override
    public int encodedSize(InsureStaffApply value) {
      return (value.applyId != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.applyId) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(2, value.userId) : 0)
          + (value.userName != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.userName) : 0)
          + (value.userPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.userPhone) : 0)
          + (value.applyName != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.applyName) : 0)
          + (value.applyPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.applyPhone) : 0)
          + (value.idcard != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.idcard) : 0)
          + (value.isHealth != null ? ProtoAdapter.UINT32.encodedSizeWithTag(8, value.isHealth) : 0)
          + (value.isNurse != null ? ProtoAdapter.UINT32.encodedSizeWithTag(9, value.isNurse) : 0)
          + (value.referrerPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.referrerPhone) : 0)
          + (value.fee != null ? ProtoAdapter.UINT64.encodedSizeWithTag(11, value.fee) : 0)
          + (value.payStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(12, value.payStatus) : 0)
          + (value.payType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(13, value.payType) : 0)
          + (value.status != null ? ProtoAdapter.UINT32.encodedSizeWithTag(14, value.status) : 0)
          + (value.rejectDesc != null ? ProtoAdapter.STRING.encodedSizeWithTag(15, value.rejectDesc) : 0)
          + (value.province != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.province) : 0)
          + (value.city != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.city) : 0)
          + (value.cityCode != null ? ProtoAdapter.STRING.encodedSizeWithTag(18, value.cityCode) : 0)
          + (value.district != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.district) : 0)
          + (value.adCode != null ? ProtoAdapter.STRING.encodedSizeWithTag(20, value.adCode) : 0)
          + (value.building != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.building) : 0)
          + (value.addrDetail != null ? ProtoAdapter.STRING.encodedSizeWithTag(22, value.addrDetail) : 0)
          + (value.gpsType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(23, value.gpsType) : 0)
          + (value.lng != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(24, value.lng) : 0)
          + (value.lat != null ? ProtoAdapter.DOUBLE.encodedSizeWithTag(25, value.lat) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(26, value.createTime) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(27, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(28, value.createStaffName) : 0)
          + (value.idcardPic != null ? ProtoAdapter.STRING.encodedSizeWithTag(29, value.idcardPic) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, InsureStaffApply value) throws IOException {
      if (value.applyId != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.applyId);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 2, value.userId);
      if (value.userName != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.userName);
      if (value.userPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.userPhone);
      if (value.applyName != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.applyName);
      if (value.applyPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.applyPhone);
      if (value.idcard != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.idcard);
      if (value.isHealth != null) ProtoAdapter.UINT32.encodeWithTag(writer, 8, value.isHealth);
      if (value.isNurse != null) ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.isNurse);
      if (value.referrerPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.referrerPhone);
      if (value.fee != null) ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.fee);
      if (value.payStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.payStatus);
      if (value.payType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 13, value.payType);
      if (value.status != null) ProtoAdapter.UINT32.encodeWithTag(writer, 14, value.status);
      if (value.rejectDesc != null) ProtoAdapter.STRING.encodeWithTag(writer, 15, value.rejectDesc);
      if (value.province != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.province);
      if (value.city != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.city);
      if (value.cityCode != null) ProtoAdapter.STRING.encodeWithTag(writer, 18, value.cityCode);
      if (value.district != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.district);
      if (value.adCode != null) ProtoAdapter.STRING.encodeWithTag(writer, 20, value.adCode);
      if (value.building != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.building);
      if (value.addrDetail != null) ProtoAdapter.STRING.encodeWithTag(writer, 22, value.addrDetail);
      if (value.gpsType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 23, value.gpsType);
      if (value.lng != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 24, value.lng);
      if (value.lat != null) ProtoAdapter.DOUBLE.encodeWithTag(writer, 25, value.lat);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 26, value.createTime);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 27, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 28, value.createStaffName);
      if (value.idcardPic != null) ProtoAdapter.STRING.encodeWithTag(writer, 29, value.idcardPic);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public InsureStaffApply decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.applyId(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 3: builder.userName(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.userPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.applyName(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.applyPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.idcard(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.isHealth(ProtoAdapter.UINT32.decode(reader)); break;
          case 9: builder.isNurse(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.referrerPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.fee(ProtoAdapter.UINT64.decode(reader)); break;
          case 12: builder.payStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 13: builder.payType(ProtoAdapter.UINT32.decode(reader)); break;
          case 14: builder.status(ProtoAdapter.UINT32.decode(reader)); break;
          case 15: builder.rejectDesc(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.province(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.city(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.cityCode(ProtoAdapter.STRING.decode(reader)); break;
          case 19: builder.district(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.adCode(ProtoAdapter.STRING.decode(reader)); break;
          case 21: builder.building(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.addrDetail(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.gpsType(ProtoAdapter.UINT32.decode(reader)); break;
          case 24: builder.lng(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 25: builder.lat(ProtoAdapter.DOUBLE.decode(reader)); break;
          case 26: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 27: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 28: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 29: builder.idcardPic(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public InsureStaffApply redact(InsureStaffApply value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
