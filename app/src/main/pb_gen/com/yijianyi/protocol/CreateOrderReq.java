// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 343:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 创建订单Req
 */
public final class CreateOrderReq extends Message<CreateOrderReq, CreateOrderReq.Builder> {
  public static final ProtoAdapter<CreateOrderReq> ADAPTER = new ProtoAdapter_CreateOrderReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_SERVICESTARTTIME = "";

  public static final String DEFAULT_SERVICEENDTIME = "";

  public static final Long DEFAULT_KINSID = 0L;

  public static final Long DEFAULT_PRICEID = 0L;

  public static final Integer DEFAULT_ORDERTYPE = 0;

  public static final String DEFAULT_PHONE = "";

  public static final Long DEFAULT_ROOMID = 0L;

  public static final Long DEFAULT_BEDID = 0L;

  public static final Long DEFAULT_ADDRID = 0L;

  public static final Long DEFAULT_COMPANYID = 0L;

  public static final Long DEFAULT_ORGID = 0L;

  public static final Long DEFAULT_BRANCHID = 0L;

  public static final Long DEFAULT_USERID = 0L;

  public static final String DEFAULT_SECURITYASSESS = "";

  public static final String DEFAULT_ORGNO = "";

  public static final String DEFAULT_ADMISSIONDATE = "";

  public static final String DEFAULT_KINSNAME = "";

  public static final Integer DEFAULT_AGE = 0;

  public static final Integer DEFAULT_SEX = 0;

  public static final Boolean DEFAULT_NEEDEXTRA = false;

  public static final String DEFAULT_PIC1 = "";

  public static final String DEFAULT_BEDNO = "";

  public static final Integer DEFAULT_ISHIS = 0;

  public static final String DEFAULT_ORDERID = "";

  /**
   * 服务开始时间
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceStartTime;

  /**
   * 预约截止时间
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String serviceEndTime;

  /**
   * 被陪护人Id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kinsId;

  /**
   * 套餐ID
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long priceId;

  /**
   * 订单类型 1-机构订单 2-居家订单
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer orderType;

  /**
   * 联系电话
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String phone;

  /**
   * 机构订单
   * 房间ID
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long roomId;

  /**
   * 床
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long bedId;

  /**
   * 居家订单
   * 服务地址Id
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long addrId;

  /**
   * 公司ID
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long companyId;

  /**
   * 机构ID
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long orgId;

  /**
   * 科室ID
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long branchId;

  /**
   * 用户id（企业端下单使用）
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 安全风险评估（居家订单使用）
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String securityAssess;

  /**
   * 住院号
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orgNO;

  /**
   * 入院日期
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String admissionDate;

  /**
   * 以下三个字段是在当kinsId为0时才传值
   * 被陪护人姓名
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kinsName;

  /**
   * 年龄
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer age;

  /**
   * 1-男 2-女
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sex;

  /**
   * 是否需要办理门禁卡
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#BOOL"
  )
  public final Boolean needExtra;

  /**
   * 拍摄照片下单的图片id
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String pic1;

  /**
   * 床号
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String bedNO;

  /**
   * 是否对接了his 0-未对接 1-对接
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer isHis;

  /**
   * 原订单id（企业端转科室时使用）
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  public CreateOrderReq(String serviceStartTime, String serviceEndTime, Long kinsId, Long priceId, Integer orderType, String phone, Long roomId, Long bedId, Long addrId, Long companyId, Long orgId, Long branchId, Long userId, String securityAssess, String orgNO, String admissionDate, String kinsName, Integer age, Integer sex, Boolean needExtra, String pic1, String bedNO, Integer isHis, String orderId) {
    this(serviceStartTime, serviceEndTime, kinsId, priceId, orderType, phone, roomId, bedId, addrId, companyId, orgId, branchId, userId, securityAssess, orgNO, admissionDate, kinsName, age, sex, needExtra, pic1, bedNO, isHis, orderId, ByteString.EMPTY);
  }

  public CreateOrderReq(String serviceStartTime, String serviceEndTime, Long kinsId, Long priceId, Integer orderType, String phone, Long roomId, Long bedId, Long addrId, Long companyId, Long orgId, Long branchId, Long userId, String securityAssess, String orgNO, String admissionDate, String kinsName, Integer age, Integer sex, Boolean needExtra, String pic1, String bedNO, Integer isHis, String orderId, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.serviceStartTime = serviceStartTime;
    this.serviceEndTime = serviceEndTime;
    this.kinsId = kinsId;
    this.priceId = priceId;
    this.orderType = orderType;
    this.phone = phone;
    this.roomId = roomId;
    this.bedId = bedId;
    this.addrId = addrId;
    this.companyId = companyId;
    this.orgId = orgId;
    this.branchId = branchId;
    this.userId = userId;
    this.securityAssess = securityAssess;
    this.orgNO = orgNO;
    this.admissionDate = admissionDate;
    this.kinsName = kinsName;
    this.age = age;
    this.sex = sex;
    this.needExtra = needExtra;
    this.pic1 = pic1;
    this.bedNO = bedNO;
    this.isHis = isHis;
    this.orderId = orderId;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.serviceStartTime = serviceStartTime;
    builder.serviceEndTime = serviceEndTime;
    builder.kinsId = kinsId;
    builder.priceId = priceId;
    builder.orderType = orderType;
    builder.phone = phone;
    builder.roomId = roomId;
    builder.bedId = bedId;
    builder.addrId = addrId;
    builder.companyId = companyId;
    builder.orgId = orgId;
    builder.branchId = branchId;
    builder.userId = userId;
    builder.securityAssess = securityAssess;
    builder.orgNO = orgNO;
    builder.admissionDate = admissionDate;
    builder.kinsName = kinsName;
    builder.age = age;
    builder.sex = sex;
    builder.needExtra = needExtra;
    builder.pic1 = pic1;
    builder.bedNO = bedNO;
    builder.isHis = isHis;
    builder.orderId = orderId;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof CreateOrderReq)) return false;
    CreateOrderReq o = (CreateOrderReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(serviceStartTime, o.serviceStartTime)
        && Internal.equals(serviceEndTime, o.serviceEndTime)
        && Internal.equals(kinsId, o.kinsId)
        && Internal.equals(priceId, o.priceId)
        && Internal.equals(orderType, o.orderType)
        && Internal.equals(phone, o.phone)
        && Internal.equals(roomId, o.roomId)
        && Internal.equals(bedId, o.bedId)
        && Internal.equals(addrId, o.addrId)
        && Internal.equals(companyId, o.companyId)
        && Internal.equals(orgId, o.orgId)
        && Internal.equals(branchId, o.branchId)
        && Internal.equals(userId, o.userId)
        && Internal.equals(securityAssess, o.securityAssess)
        && Internal.equals(orgNO, o.orgNO)
        && Internal.equals(admissionDate, o.admissionDate)
        && Internal.equals(kinsName, o.kinsName)
        && Internal.equals(age, o.age)
        && Internal.equals(sex, o.sex)
        && Internal.equals(needExtra, o.needExtra)
        && Internal.equals(pic1, o.pic1)
        && Internal.equals(bedNO, o.bedNO)
        && Internal.equals(isHis, o.isHis)
        && Internal.equals(orderId, o.orderId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (serviceStartTime != null ? serviceStartTime.hashCode() : 0);
      result = result * 37 + (serviceEndTime != null ? serviceEndTime.hashCode() : 0);
      result = result * 37 + (kinsId != null ? kinsId.hashCode() : 0);
      result = result * 37 + (priceId != null ? priceId.hashCode() : 0);
      result = result * 37 + (orderType != null ? orderType.hashCode() : 0);
      result = result * 37 + (phone != null ? phone.hashCode() : 0);
      result = result * 37 + (roomId != null ? roomId.hashCode() : 0);
      result = result * 37 + (bedId != null ? bedId.hashCode() : 0);
      result = result * 37 + (addrId != null ? addrId.hashCode() : 0);
      result = result * 37 + (companyId != null ? companyId.hashCode() : 0);
      result = result * 37 + (orgId != null ? orgId.hashCode() : 0);
      result = result * 37 + (branchId != null ? branchId.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (securityAssess != null ? securityAssess.hashCode() : 0);
      result = result * 37 + (orgNO != null ? orgNO.hashCode() : 0);
      result = result * 37 + (admissionDate != null ? admissionDate.hashCode() : 0);
      result = result * 37 + (kinsName != null ? kinsName.hashCode() : 0);
      result = result * 37 + (age != null ? age.hashCode() : 0);
      result = result * 37 + (sex != null ? sex.hashCode() : 0);
      result = result * 37 + (needExtra != null ? needExtra.hashCode() : 0);
      result = result * 37 + (pic1 != null ? pic1.hashCode() : 0);
      result = result * 37 + (bedNO != null ? bedNO.hashCode() : 0);
      result = result * 37 + (isHis != null ? isHis.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (serviceStartTime != null) builder.append(", serviceStartTime=").append(serviceStartTime);
    if (serviceEndTime != null) builder.append(", serviceEndTime=").append(serviceEndTime);
    if (kinsId != null) builder.append(", kinsId=").append(kinsId);
    if (priceId != null) builder.append(", priceId=").append(priceId);
    if (orderType != null) builder.append(", orderType=").append(orderType);
    if (phone != null) builder.append(", phone=").append(phone);
    if (roomId != null) builder.append(", roomId=").append(roomId);
    if (bedId != null) builder.append(", bedId=").append(bedId);
    if (addrId != null) builder.append(", addrId=").append(addrId);
    if (companyId != null) builder.append(", companyId=").append(companyId);
    if (orgId != null) builder.append(", orgId=").append(orgId);
    if (branchId != null) builder.append(", branchId=").append(branchId);
    if (userId != null) builder.append(", userId=").append(userId);
    if (securityAssess != null) builder.append(", securityAssess=").append(securityAssess);
    if (orgNO != null) builder.append(", orgNO=").append(orgNO);
    if (admissionDate != null) builder.append(", admissionDate=").append(admissionDate);
    if (kinsName != null) builder.append(", kinsName=").append(kinsName);
    if (age != null) builder.append(", age=").append(age);
    if (sex != null) builder.append(", sex=").append(sex);
    if (needExtra != null) builder.append(", needExtra=").append(needExtra);
    if (pic1 != null) builder.append(", pic1=").append(pic1);
    if (bedNO != null) builder.append(", bedNO=").append(bedNO);
    if (isHis != null) builder.append(", isHis=").append(isHis);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    return builder.replace(0, 2, "CreateOrderReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<CreateOrderReq, Builder> {
    public String serviceStartTime;

    public String serviceEndTime;

    public Long kinsId;

    public Long priceId;

    public Integer orderType;

    public String phone;

    public Long roomId;

    public Long bedId;

    public Long addrId;

    public Long companyId;

    public Long orgId;

    public Long branchId;

    public Long userId;

    public String securityAssess;

    public String orgNO;

    public String admissionDate;

    public String kinsName;

    public Integer age;

    public Integer sex;

    public Boolean needExtra;

    public String pic1;

    public String bedNO;

    public Integer isHis;

    public String orderId;

    public Builder() {
    }

    /**
     * 服务开始时间
     */
    public Builder serviceStartTime(String serviceStartTime) {
      this.serviceStartTime = serviceStartTime;
      return this;
    }

    /**
     * 预约截止时间
     */
    public Builder serviceEndTime(String serviceEndTime) {
      this.serviceEndTime = serviceEndTime;
      return this;
    }

    /**
     * 被陪护人Id
     */
    public Builder kinsId(Long kinsId) {
      this.kinsId = kinsId;
      return this;
    }

    /**
     * 套餐ID
     */
    public Builder priceId(Long priceId) {
      this.priceId = priceId;
      return this;
    }

    /**
     * 订单类型 1-机构订单 2-居家订单
     */
    public Builder orderType(Integer orderType) {
      this.orderType = orderType;
      return this;
    }

    /**
     * 联系电话
     */
    public Builder phone(String phone) {
      this.phone = phone;
      return this;
    }

    /**
     * 机构订单
     * 房间ID
     */
    public Builder roomId(Long roomId) {
      this.roomId = roomId;
      return this;
    }

    /**
     * 床
     */
    public Builder bedId(Long bedId) {
      this.bedId = bedId;
      return this;
    }

    /**
     * 居家订单
     * 服务地址Id
     */
    public Builder addrId(Long addrId) {
      this.addrId = addrId;
      return this;
    }

    /**
     * 公司ID
     */
    public Builder companyId(Long companyId) {
      this.companyId = companyId;
      return this;
    }

    /**
     * 机构ID
     */
    public Builder orgId(Long orgId) {
      this.orgId = orgId;
      return this;
    }

    /**
     * 科室ID
     */
    public Builder branchId(Long branchId) {
      this.branchId = branchId;
      return this;
    }

    /**
     * 用户id（企业端下单使用）
     */
    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 安全风险评估（居家订单使用）
     */
    public Builder securityAssess(String securityAssess) {
      this.securityAssess = securityAssess;
      return this;
    }

    /**
     * 住院号
     */
    public Builder orgNO(String orgNO) {
      this.orgNO = orgNO;
      return this;
    }

    /**
     * 入院日期
     */
    public Builder admissionDate(String admissionDate) {
      this.admissionDate = admissionDate;
      return this;
    }

    /**
     * 以下三个字段是在当kinsId为0时才传值
     * 被陪护人姓名
     */
    public Builder kinsName(String kinsName) {
      this.kinsName = kinsName;
      return this;
    }

    /**
     * 年龄
     */
    public Builder age(Integer age) {
      this.age = age;
      return this;
    }

    /**
     * 1-男 2-女
     */
    public Builder sex(Integer sex) {
      this.sex = sex;
      return this;
    }

    /**
     * 是否需要办理门禁卡
     */
    public Builder needExtra(Boolean needExtra) {
      this.needExtra = needExtra;
      return this;
    }

    /**
     * 拍摄照片下单的图片id
     */
    public Builder pic1(String pic1) {
      this.pic1 = pic1;
      return this;
    }

    /**
     * 床号
     */
    public Builder bedNO(String bedNO) {
      this.bedNO = bedNO;
      return this;
    }

    /**
     * 是否对接了his 0-未对接 1-对接
     */
    public Builder isHis(Integer isHis) {
      this.isHis = isHis;
      return this;
    }

    /**
     * 原订单id（企业端转科室时使用）
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    @Override
    public CreateOrderReq build() {
      return new CreateOrderReq(serviceStartTime, serviceEndTime, kinsId, priceId, orderType, phone, roomId, bedId, addrId, companyId, orgId, branchId, userId, securityAssess, orgNO, admissionDate, kinsName, age, sex, needExtra, pic1, bedNO, isHis, orderId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_CreateOrderReq extends ProtoAdapter<CreateOrderReq> {
    ProtoAdapter_CreateOrderReq() {
      super(FieldEncoding.LENGTH_DELIMITED, CreateOrderReq.class);
    }

    @Override
    public int encodedSize(CreateOrderReq value) {
      return (value.serviceStartTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.serviceStartTime) : 0)
          + (value.serviceEndTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.serviceEndTime) : 0)
          + (value.kinsId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(3, value.kinsId) : 0)
          + (value.priceId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.priceId) : 0)
          + (value.orderType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(5, value.orderType) : 0)
          + (value.phone != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.phone) : 0)
          + (value.roomId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(7, value.roomId) : 0)
          + (value.bedId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.bedId) : 0)
          + (value.addrId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.addrId) : 0)
          + (value.companyId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(10, value.companyId) : 0)
          + (value.orgId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(11, value.orgId) : 0)
          + (value.branchId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(12, value.branchId) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(13, value.userId) : 0)
          + (value.securityAssess != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.securityAssess) : 0)
          + (value.orgNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(15, value.orgNO) : 0)
          + (value.admissionDate != null ? ProtoAdapter.STRING.encodedSizeWithTag(16, value.admissionDate) : 0)
          + (value.kinsName != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.kinsName) : 0)
          + (value.age != null ? ProtoAdapter.UINT32.encodedSizeWithTag(18, value.age) : 0)
          + (value.sex != null ? ProtoAdapter.UINT32.encodedSizeWithTag(19, value.sex) : 0)
          + (value.needExtra != null ? ProtoAdapter.BOOL.encodedSizeWithTag(20, value.needExtra) : 0)
          + (value.pic1 != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.pic1) : 0)
          + (value.bedNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(22, value.bedNO) : 0)
          + (value.isHis != null ? ProtoAdapter.UINT32.encodedSizeWithTag(23, value.isHis) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(24, value.orderId) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, CreateOrderReq value) throws IOException {
      if (value.serviceStartTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.serviceStartTime);
      if (value.serviceEndTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.serviceEndTime);
      if (value.kinsId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 3, value.kinsId);
      if (value.priceId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.priceId);
      if (value.orderType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 5, value.orderType);
      if (value.phone != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.phone);
      if (value.roomId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.roomId);
      if (value.bedId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.bedId);
      if (value.addrId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.addrId);
      if (value.companyId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 10, value.companyId);
      if (value.orgId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 11, value.orgId);
      if (value.branchId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 12, value.branchId);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 13, value.userId);
      if (value.securityAssess != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.securityAssess);
      if (value.orgNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 15, value.orgNO);
      if (value.admissionDate != null) ProtoAdapter.STRING.encodeWithTag(writer, 16, value.admissionDate);
      if (value.kinsName != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.kinsName);
      if (value.age != null) ProtoAdapter.UINT32.encodeWithTag(writer, 18, value.age);
      if (value.sex != null) ProtoAdapter.UINT32.encodeWithTag(writer, 19, value.sex);
      if (value.needExtra != null) ProtoAdapter.BOOL.encodeWithTag(writer, 20, value.needExtra);
      if (value.pic1 != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.pic1);
      if (value.bedNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 22, value.bedNO);
      if (value.isHis != null) ProtoAdapter.UINT32.encodeWithTag(writer, 23, value.isHis);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 24, value.orderId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public CreateOrderReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.serviceStartTime(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.serviceEndTime(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.kinsId(ProtoAdapter.UINT64.decode(reader)); break;
          case 4: builder.priceId(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.orderType(ProtoAdapter.UINT32.decode(reader)); break;
          case 6: builder.phone(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.roomId(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.bedId(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.addrId(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.companyId(ProtoAdapter.UINT64.decode(reader)); break;
          case 11: builder.orgId(ProtoAdapter.UINT64.decode(reader)); break;
          case 12: builder.branchId(ProtoAdapter.UINT64.decode(reader)); break;
          case 13: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 14: builder.securityAssess(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.orgNO(ProtoAdapter.STRING.decode(reader)); break;
          case 16: builder.admissionDate(ProtoAdapter.STRING.decode(reader)); break;
          case 17: builder.kinsName(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.age(ProtoAdapter.UINT32.decode(reader)); break;
          case 19: builder.sex(ProtoAdapter.UINT32.decode(reader)); break;
          case 20: builder.needExtra(ProtoAdapter.BOOL.decode(reader)); break;
          case 21: builder.pic1(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.bedNO(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.isHis(ProtoAdapter.UINT32.decode(reader)); break;
          case 24: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public CreateOrderReq redact(CreateOrderReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
