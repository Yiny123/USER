// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: AppInterface.proto at 1879:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

/**
 * 新增变更回访生命体征记录质控内容信息
 */
public final class UpdateInsureOrderVisitReq extends Message<UpdateInsureOrderVisitReq, UpdateInsureOrderVisitReq.Builder> {
  public static final ProtoAdapter<UpdateInsureOrderVisitReq> ADAPTER = new ProtoAdapter_UpdateInsureOrderVisitReq();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_VISITID = 0L;

  public static final String DEFAULT_ORDERID = "";

  public static final Integer DEFAULT_VISITSTATUS = 0;

  public static final String DEFAULT_VISITSTARTTIME = "";

  public static final String DEFAULT_VISITENDTIME = "";

  public static final String DEFAULT_VISITPROBLEM = "";

  public static final String DEFAULT_VISITMEASURES = "";

  public static final Long DEFAULT_VISITVITA = 0L;

  public static final Long DEFAULT_VISITQUALITYCONTROL = 0L;

  public static final String DEFAULT_VISITSKILLTRAINING = "";

  public static final String DEFAULT_VISITTRAININGTYPE = "";

  public static final Integer DEFAULT_VISITSKILLSTATUS = 0;

  public static final String DEFAULT_RELATIONIMGID = "";

  public static final String DEFAULT_HGIMGID = "";

  /**
   * id
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long visitId;

  /**
   * 订单号
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String orderId;

  /**
   * 回访状态  1-执行中 2-已完成
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer visitStatus;

  /**
   * 回访开始时间
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String visitStartTime;

  /**
   * 回访结束时间
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String visitEndTime;

  /**
   * 现存护理问题
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String visitProblem;

  /**
   * 护理措施
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String visitMeasures;

  /**
   * 生命体征id
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long visitVita;

  /**
   * 质控内容id
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long visitQualityControl;

  /**
   * 技能培训，多个以逗号隔开
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String visitSkillTraining;

  /**
   * 技能培训，1-指导 2-视频 ，多个以,逗号隔开
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String visitTrainingType;

  /**
   * 护理员技能掌握程度 0-掌握 1-未掌握
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer visitSkillStatus;

  /**
   * 家属签名图片id
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String relationImgId;

  /**
   * 护工图片id
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String hgImgId;

  public UpdateInsureOrderVisitReq(Long visitId, String orderId, Integer visitStatus, String visitStartTime, String visitEndTime, String visitProblem, String visitMeasures, Long visitVita, Long visitQualityControl, String visitSkillTraining, String visitTrainingType, Integer visitSkillStatus, String relationImgId, String hgImgId) {
    this(visitId, orderId, visitStatus, visitStartTime, visitEndTime, visitProblem, visitMeasures, visitVita, visitQualityControl, visitSkillTraining, visitTrainingType, visitSkillStatus, relationImgId, hgImgId, ByteString.EMPTY);
  }

  public UpdateInsureOrderVisitReq(Long visitId, String orderId, Integer visitStatus, String visitStartTime, String visitEndTime, String visitProblem, String visitMeasures, Long visitVita, Long visitQualityControl, String visitSkillTraining, String visitTrainingType, Integer visitSkillStatus, String relationImgId, String hgImgId, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.visitId = visitId;
    this.orderId = orderId;
    this.visitStatus = visitStatus;
    this.visitStartTime = visitStartTime;
    this.visitEndTime = visitEndTime;
    this.visitProblem = visitProblem;
    this.visitMeasures = visitMeasures;
    this.visitVita = visitVita;
    this.visitQualityControl = visitQualityControl;
    this.visitSkillTraining = visitSkillTraining;
    this.visitTrainingType = visitTrainingType;
    this.visitSkillStatus = visitSkillStatus;
    this.relationImgId = relationImgId;
    this.hgImgId = hgImgId;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.visitId = visitId;
    builder.orderId = orderId;
    builder.visitStatus = visitStatus;
    builder.visitStartTime = visitStartTime;
    builder.visitEndTime = visitEndTime;
    builder.visitProblem = visitProblem;
    builder.visitMeasures = visitMeasures;
    builder.visitVita = visitVita;
    builder.visitQualityControl = visitQualityControl;
    builder.visitSkillTraining = visitSkillTraining;
    builder.visitTrainingType = visitTrainingType;
    builder.visitSkillStatus = visitSkillStatus;
    builder.relationImgId = relationImgId;
    builder.hgImgId = hgImgId;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof UpdateInsureOrderVisitReq)) return false;
    UpdateInsureOrderVisitReq o = (UpdateInsureOrderVisitReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(visitId, o.visitId)
        && Internal.equals(orderId, o.orderId)
        && Internal.equals(visitStatus, o.visitStatus)
        && Internal.equals(visitStartTime, o.visitStartTime)
        && Internal.equals(visitEndTime, o.visitEndTime)
        && Internal.equals(visitProblem, o.visitProblem)
        && Internal.equals(visitMeasures, o.visitMeasures)
        && Internal.equals(visitVita, o.visitVita)
        && Internal.equals(visitQualityControl, o.visitQualityControl)
        && Internal.equals(visitSkillTraining, o.visitSkillTraining)
        && Internal.equals(visitTrainingType, o.visitTrainingType)
        && Internal.equals(visitSkillStatus, o.visitSkillStatus)
        && Internal.equals(relationImgId, o.relationImgId)
        && Internal.equals(hgImgId, o.hgImgId);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (visitId != null ? visitId.hashCode() : 0);
      result = result * 37 + (orderId != null ? orderId.hashCode() : 0);
      result = result * 37 + (visitStatus != null ? visitStatus.hashCode() : 0);
      result = result * 37 + (visitStartTime != null ? visitStartTime.hashCode() : 0);
      result = result * 37 + (visitEndTime != null ? visitEndTime.hashCode() : 0);
      result = result * 37 + (visitProblem != null ? visitProblem.hashCode() : 0);
      result = result * 37 + (visitMeasures != null ? visitMeasures.hashCode() : 0);
      result = result * 37 + (visitVita != null ? visitVita.hashCode() : 0);
      result = result * 37 + (visitQualityControl != null ? visitQualityControl.hashCode() : 0);
      result = result * 37 + (visitSkillTraining != null ? visitSkillTraining.hashCode() : 0);
      result = result * 37 + (visitTrainingType != null ? visitTrainingType.hashCode() : 0);
      result = result * 37 + (visitSkillStatus != null ? visitSkillStatus.hashCode() : 0);
      result = result * 37 + (relationImgId != null ? relationImgId.hashCode() : 0);
      result = result * 37 + (hgImgId != null ? hgImgId.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (visitId != null) builder.append(", visitId=").append(visitId);
    if (orderId != null) builder.append(", orderId=").append(orderId);
    if (visitStatus != null) builder.append(", visitStatus=").append(visitStatus);
    if (visitStartTime != null) builder.append(", visitStartTime=").append(visitStartTime);
    if (visitEndTime != null) builder.append(", visitEndTime=").append(visitEndTime);
    if (visitProblem != null) builder.append(", visitProblem=").append(visitProblem);
    if (visitMeasures != null) builder.append(", visitMeasures=").append(visitMeasures);
    if (visitVita != null) builder.append(", visitVita=").append(visitVita);
    if (visitQualityControl != null) builder.append(", visitQualityControl=").append(visitQualityControl);
    if (visitSkillTraining != null) builder.append(", visitSkillTraining=").append(visitSkillTraining);
    if (visitTrainingType != null) builder.append(", visitTrainingType=").append(visitTrainingType);
    if (visitSkillStatus != null) builder.append(", visitSkillStatus=").append(visitSkillStatus);
    if (relationImgId != null) builder.append(", relationImgId=").append(relationImgId);
    if (hgImgId != null) builder.append(", hgImgId=").append(hgImgId);
    return builder.replace(0, 2, "UpdateInsureOrderVisitReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<UpdateInsureOrderVisitReq, Builder> {
    public Long visitId;

    public String orderId;

    public Integer visitStatus;

    public String visitStartTime;

    public String visitEndTime;

    public String visitProblem;

    public String visitMeasures;

    public Long visitVita;

    public Long visitQualityControl;

    public String visitSkillTraining;

    public String visitTrainingType;

    public Integer visitSkillStatus;

    public String relationImgId;

    public String hgImgId;

    public Builder() {
    }

    /**
     * id
     */
    public Builder visitId(Long visitId) {
      this.visitId = visitId;
      return this;
    }

    /**
     * 订单号
     */
    public Builder orderId(String orderId) {
      this.orderId = orderId;
      return this;
    }

    /**
     * 回访状态  1-执行中 2-已完成
     */
    public Builder visitStatus(Integer visitStatus) {
      this.visitStatus = visitStatus;
      return this;
    }

    /**
     * 回访开始时间
     */
    public Builder visitStartTime(String visitStartTime) {
      this.visitStartTime = visitStartTime;
      return this;
    }

    /**
     * 回访结束时间
     */
    public Builder visitEndTime(String visitEndTime) {
      this.visitEndTime = visitEndTime;
      return this;
    }

    /**
     * 现存护理问题
     */
    public Builder visitProblem(String visitProblem) {
      this.visitProblem = visitProblem;
      return this;
    }

    /**
     * 护理措施
     */
    public Builder visitMeasures(String visitMeasures) {
      this.visitMeasures = visitMeasures;
      return this;
    }

    /**
     * 生命体征id
     */
    public Builder visitVita(Long visitVita) {
      this.visitVita = visitVita;
      return this;
    }

    /**
     * 质控内容id
     */
    public Builder visitQualityControl(Long visitQualityControl) {
      this.visitQualityControl = visitQualityControl;
      return this;
    }

    /**
     * 技能培训，多个以逗号隔开
     */
    public Builder visitSkillTraining(String visitSkillTraining) {
      this.visitSkillTraining = visitSkillTraining;
      return this;
    }

    /**
     * 技能培训，1-指导 2-视频 ，多个以,逗号隔开
     */
    public Builder visitTrainingType(String visitTrainingType) {
      this.visitTrainingType = visitTrainingType;
      return this;
    }

    /**
     * 护理员技能掌握程度 0-掌握 1-未掌握
     */
    public Builder visitSkillStatus(Integer visitSkillStatus) {
      this.visitSkillStatus = visitSkillStatus;
      return this;
    }

    /**
     * 家属签名图片id
     */
    public Builder relationImgId(String relationImgId) {
      this.relationImgId = relationImgId;
      return this;
    }

    /**
     * 护工图片id
     */
    public Builder hgImgId(String hgImgId) {
      this.hgImgId = hgImgId;
      return this;
    }

    @Override
    public UpdateInsureOrderVisitReq build() {
      return new UpdateInsureOrderVisitReq(visitId, orderId, visitStatus, visitStartTime, visitEndTime, visitProblem, visitMeasures, visitVita, visitQualityControl, visitSkillTraining, visitTrainingType, visitSkillStatus, relationImgId, hgImgId, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_UpdateInsureOrderVisitReq extends ProtoAdapter<UpdateInsureOrderVisitReq> {
    ProtoAdapter_UpdateInsureOrderVisitReq() {
      super(FieldEncoding.LENGTH_DELIMITED, UpdateInsureOrderVisitReq.class);
    }

    @Override
    public int encodedSize(UpdateInsureOrderVisitReq value) {
      return (value.visitId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(1, value.visitId) : 0)
          + (value.orderId != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.orderId) : 0)
          + (value.visitStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(3, value.visitStatus) : 0)
          + (value.visitStartTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.visitStartTime) : 0)
          + (value.visitEndTime != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.visitEndTime) : 0)
          + (value.visitProblem != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.visitProblem) : 0)
          + (value.visitMeasures != null ? ProtoAdapter.STRING.encodedSizeWithTag(7, value.visitMeasures) : 0)
          + (value.visitVita != null ? ProtoAdapter.UINT64.encodedSizeWithTag(8, value.visitVita) : 0)
          + (value.visitQualityControl != null ? ProtoAdapter.UINT64.encodedSizeWithTag(9, value.visitQualityControl) : 0)
          + (value.visitSkillTraining != null ? ProtoAdapter.STRING.encodedSizeWithTag(10, value.visitSkillTraining) : 0)
          + (value.visitTrainingType != null ? ProtoAdapter.STRING.encodedSizeWithTag(11, value.visitTrainingType) : 0)
          + (value.visitSkillStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(12, value.visitSkillStatus) : 0)
          + (value.relationImgId != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.relationImgId) : 0)
          + (value.hgImgId != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.hgImgId) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, UpdateInsureOrderVisitReq value) throws IOException {
      if (value.visitId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 1, value.visitId);
      if (value.orderId != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.orderId);
      if (value.visitStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 3, value.visitStatus);
      if (value.visitStartTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.visitStartTime);
      if (value.visitEndTime != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.visitEndTime);
      if (value.visitProblem != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.visitProblem);
      if (value.visitMeasures != null) ProtoAdapter.STRING.encodeWithTag(writer, 7, value.visitMeasures);
      if (value.visitVita != null) ProtoAdapter.UINT64.encodeWithTag(writer, 8, value.visitVita);
      if (value.visitQualityControl != null) ProtoAdapter.UINT64.encodeWithTag(writer, 9, value.visitQualityControl);
      if (value.visitSkillTraining != null) ProtoAdapter.STRING.encodeWithTag(writer, 10, value.visitSkillTraining);
      if (value.visitTrainingType != null) ProtoAdapter.STRING.encodeWithTag(writer, 11, value.visitTrainingType);
      if (value.visitSkillStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 12, value.visitSkillStatus);
      if (value.relationImgId != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.relationImgId);
      if (value.hgImgId != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.hgImgId);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public UpdateInsureOrderVisitReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.visitId(ProtoAdapter.UINT64.decode(reader)); break;
          case 2: builder.orderId(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.visitStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 4: builder.visitStartTime(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.visitEndTime(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.visitProblem(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.visitMeasures(ProtoAdapter.STRING.decode(reader)); break;
          case 8: builder.visitVita(ProtoAdapter.UINT64.decode(reader)); break;
          case 9: builder.visitQualityControl(ProtoAdapter.UINT64.decode(reader)); break;
          case 10: builder.visitSkillTraining(ProtoAdapter.STRING.decode(reader)); break;
          case 11: builder.visitTrainingType(ProtoAdapter.STRING.decode(reader)); break;
          case 12: builder.visitSkillStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 13: builder.relationImgId(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.hgImgId(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public UpdateInsureOrderVisitReq redact(UpdateInsureOrderVisitReq value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
