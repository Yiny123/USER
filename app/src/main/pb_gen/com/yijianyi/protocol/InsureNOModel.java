// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: SaasModel.proto at 760:1
package com.yijianyi.protocol;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * 长护险申请批次
 */
public final class InsureNOModel extends Message<InsureNOModel, InsureNOModel.Builder> {
  public static final ProtoAdapter<InsureNOModel> ADAPTER = new ProtoAdapter_InsureNOModel();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_INSURENO = "";

  public static final String DEFAULT_IDCARD = "";

  public static final String DEFAULT_CITYID = "";

  public static final Long DEFAULT_USERID = 0L;

  public static final String DEFAULT_CONTACTNAME = "";

  public static final String DEFAULT_CONTACTPHONE = "";

  public static final Long DEFAULT_KINSID = 0L;

  public static final String DEFAULT_KINSNAME = "";

  public static final Integer DEFAULT_SEX = 0;

  public static final Integer DEFAULT_AGE = 0;

  public static final Integer DEFAULT_MEDICARETYPE = 0;

  public static final String DEFAULT_MEDICARENO = "";

  public static final String DEFAULT_HEIGHT = "";

  public static final String DEFAULT_WEIGHT = "";

  public static final Integer DEFAULT_ACTABILITY = 0;

  public static final String DEFAULT_MEMOINFO = "";

  public static final Long DEFAULT_ADDRID = 0L;

  public static final String DEFAULT_PHONE = "";

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_PROVINCE = "";

  public static final String DEFAULT_CITY = "";

  public static final String DEFAULT_DISTRICT = "";

  public static final String DEFAULT_BUILDING = "";

  public static final String DEFAULT_ADDRDETAIL = "";

  public static final Integer DEFAULT_STATUS = 0;

  public static final Long DEFAULT_NURSEID = 0L;

  public static final String DEFAULT_NURSENAME = "";

  public static final Long DEFAULT_MANAGERID = 0L;

  public static final String DEFAULT_MANAGERNAME = "";

  public static final Integer DEFAULT_FEE = 0;

  public static final Long DEFAULT_REVIVETIME = 0L;

  public static final Long DEFAULT_STARTTIME = 0L;

  public static final Long DEFAULT_ENDTIME = 0L;

  public static final Long DEFAULT_CREATETIME = 0L;

  public static final Long DEFAULT_CREATESTAFFID = 0L;

  public static final String DEFAULT_CREATESTAFFNAME = "";

  public static final Integer DEFAULT_SCORE = 0;

  public static final Integer DEFAULT_ISFORCE = 0;

  public static final Integer DEFAULT_PAYTYPE = 0;

  public static final Long DEFAULT_NURSELEADERID = 0L;

  public static final String DEFAULT_NURSELEADERNAME = "";

  public static final Integer DEFAULT_ORDERSTATUS = 0;

  public static final String DEFAULT_HEALTHCARENO = "";

  public static final Integer DEFAULT_SCOREMMSE = 0;

  public static final Long DEFAULT_ASSESSTIME = 0L;

  public static final String DEFAULT_KFREMARK = "";

  public static final String DEFAULT_HSREMARK = "";

  public static final String DEFAULT_CHANNELID = "";

  public static final Long DEFAULT_APPOINTTIME = 0L;

  public static final Integer DEFAULT_SCOREADL = 0;

  public static final Long DEFAULT_ORDERTIME = 0L;

  public static final String DEFAULT_MANAGERREMARK = "";

  public static final Long DEFAULT_UPDATETIME = 0L;

  public static final Integer DEFAULT_INSUREGETTYPE = 0;

  public static final String DEFAULT_AGENCYNAME = "";

  public static final String DEFAULT_AGENCYRELATION = "";

  public static final String DEFAULT_AGENCYPHONE = "";

  public static final Integer DEFAULT_DUDAOSCOREADL = 0;

  public static final Integer DEFAULT_APPLYTREATMENTTYPE = 0;

  public static final Integer DEFAULT_TREATMENTTYPE = 0;

  public static final Integer DEFAULT_ASSESSTYPE = 0;

  public static final String DEFAULT_SECURITYASSESS = "";

  public static final String DEFAULT_USERSTATUSREMARK = "";

  public static final String DEFAULT_USERSIGNPIC = "";

  public static final String DEFAULT_ENTRUSTPIC = "";

  public static final Long DEFAULT_MANAGERASSESSTIME = 0L;

  public static final Long DEFAULT_LOSEAPPOINTASSESSTIME = 0L;

  public static final Long DEFAULT_KFTIME = 0L;

  public static final Long DEFAULT_LOSEAPPOINTTIME = 0L;

  public static final Long DEFAULT_LOSENURSEID = 0L;

  public static final String DEFAULT_LOSENURSENAME = "";

  public static final String DEFAULT_HSCASEPRESENTATION = "";

  public static final Integer DEFAULT_ISAMENTIA = 0;

  public static final String DEFAULT_MEDICALHISTORY = "";

  public static final Long DEFAULT_LOSENURSELEADERID = 0L;

  public static final String DEFAULT_LOSENURSELEADERNAME = "";

  public static final String DEFAULT_LOSEREMARK = "";

  public static final Integer DEFAULT_FOUNDWAY = 0;

  /**
   * 申请批次
   */
  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String insureNO;

  /**
   * 身份证号
   */
  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String idcard;

  /**
   * 城市id
   */
  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String cityId;

  /**
   * 申请人id
   */
  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long userId;

  /**
   * 联系人
   */
  @WireField(
      tag = 5,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String contactName;

  /**
   * 联系电话
   */
  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String contactPhone;

  /**
   * 被服务人id
   */
  @WireField(
      tag = 7,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kinsId;

  /**
   * 被服务人
   */
  @WireField(
      tag = 8,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kinsName;

  /**
   * 性别 0-未知 1-男 2-女
   */
  @WireField(
      tag = 9,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer sex;

  /**
   * 当前年龄
   */
  @WireField(
      tag = 10,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer age;

  /**
   * 医保类型
   */
  @WireField(
      tag = 11,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer medicareType;

  /**
   * 就诊卡号
   */
  @WireField(
      tag = 12,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String medicareNO;

  /**
   * 身高
   */
  @WireField(
      tag = 13,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String height;

  /**
   * 体重
   */
  @WireField(
      tag = 14,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String weight;

  /**
   * 行动能力
   */
  @WireField(
      tag = 15,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer actAbility;

  /**
   * 语言，多种语言用,号分割 1-普通话 2-粤语
   */
  @WireField(
      tag = 16,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32",
      label = WireField.Label.REPEATED
  )
  public final List<Integer> language;

  /**
   * 备注信息
   */
  @WireField(
      tag = 17,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String memoInfo;

  /**
   * 地址id
   */
  @WireField(
      tag = 18,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long addrId;

  /**
   * 地址联系电话
   */
  @WireField(
      tag = 19,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String phone;

  /**
   * 地址联系人
   */
  @WireField(
      tag = 20,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String name;

  /**
   * 省
   */
  @WireField(
      tag = 21,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String province;

  /**
   * 市
   */
  @WireField(
      tag = 22,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String city;

  /**
   * 区县
   */
  @WireField(
      tag = 23,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String district;

  /**
   * 小区
   */
  @WireField(
      tag = 24,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String building;

  /**
   * 详细地址
   */
  @WireField(
      tag = 25,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String addrDetail;

  /**
   * 状态 0-客服审核 1-护士初审 2-等待提交复审 3-等待复审 4-复审通过 5-复审中  50-客服驳回 51-初审驳回 52-复审驳回 53-已关闭
   */
  @WireField(
      tag = 26,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer status;

  /**
   * 正在进行的相关订单id集合，用逗号隔开
   */
  @WireField(
      tag = 27,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> orderId;

  /**
   * 被指派护士id
   */
  @WireField(
      tag = 28,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long nurseId;

  /**
   * 被指派护士
   */
  @WireField(
      tag = 29,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nurseName;

  /**
   * 被指派健康经理id
   */
  @WireField(
      tag = 30,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long managerId;

  /**
   * 被指派健康经理
   */
  @WireField(
      tag = 31,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String managerName;

  /**
   * 强制申请的金额（大于0即强制申请）
   */
  @WireField(
      tag = 32,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer fee;

  /**
   * 复活时间-不通过时，可重新提交申请时间
   */
  @WireField(
      tag = 33,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long reviveTime;

  /**
   * 长护险有效开始时间
   */
  @WireField(
      tag = 34,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long startTime;

  /**
   * 长护险有效结束时间
   */
  @WireField(
      tag = 35,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long endTime;

  /**
   * 申请时间
   */
  @WireField(
      tag = 36,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createTime;

  @WireField(
      tag = 40,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long createStaffId;

  @WireField(
      tag = 41,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String createStaffName;

  /**
   * 自评分数
   */
  @WireField(
      tag = 42,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer score;

  /**
   * 是否强制提交申请 0-非强制 1-强制提交
   */
  @WireField(
      tag = 43,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer isForce;

  /**
   * 支付方式
   */
  @WireField(
      tag = 44,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer payType;

  /**
   * 被指派护士长id
   */
  @WireField(
      tag = 45,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long nurseLeaderId;

  /**
   * 被指派护士长
   */
  @WireField(
      tag = 46,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String nurseLeaderName;

  /**
   * 下单意愿 0-未联系 1-暂不下单 2-等待下单 3-已下单
   */
  @WireField(
      tag = 47,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer orderStatus;

  /**
   * 医保卡号
   */
  @WireField(
      tag = 48,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String healthCareNO;

  /**
   * mmse评估得分
   */
  @WireField(
      tag = 49,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer scoreMMSE;

  /**
   * 护士初审时间
   */
  @WireField(
      tag = 50,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long assessTime;

  /**
   * 病史记录
   */
  @WireField(
      tag = 51,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> medicalList;

  /**
   * 客服备注
   */
  @WireField(
      tag = 52,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String kfRemark;

  /**
   * 护士评估备注
   */
  @WireField(
      tag = 53,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String hsRemark;

  /**
   * 渠道来源
   */
  @WireField(
      tag = 54,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String channelId;

  /**
   * 预约上门评估时间
   */
  @WireField(
      tag = 55,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long appointTime;

  /**
   * ADL评估得分
   */
  @WireField(
      tag = 56,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer scoreADL;

  /**
   * 预约上门下单时间
   */
  @WireField(
      tag = 57,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long orderTime;

  /**
   * 指派健康经理时的客服备注
   */
  @WireField(
      tag = 58,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String managerRemark;

  /**
   * 更新时间
   */
  @WireField(
      tag = 59,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long updateTime;

  /**
   * 领取方式 1 邮寄 2 自行领取
   */
  @WireField(
      tag = 60,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer insureGetType;

  /**
   * 代理人昵称
   */
  @WireField(
      tag = 61,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String agencyName;

  /**
   * 代理人关系
   */
  @WireField(
      tag = 62,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String agencyRelation;

  /**
   * 代理人电话
   */
  @WireField(
      tag = 63,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String agencyPhone;

  /**
   * 健康经理adl评估的分数
   */
  @WireField(
      tag = 64,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer dudaoScoreADL;

  /**
   * 申请待遇类别 1-生活照料 2-生活照料+医疗护理
   */
  @WireField(
      tag = 65,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer applyTreatmentType;

  /**
   * 待遇类型 1-机构护理 2-居家护理
   */
  @WireField(
      tag = 66,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer treatmentType;

  /**
   * 评估类别 1-首次评估 2-复检评估 3-变更评估
   */
  @WireField(
      tag = 67,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer assessType;

  /**
   * 安全风险评估
   */
  @WireField(
      tag = 68,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String securityAssess;

  /**
   * 健康经理客户状态描述
   */
  @WireField(
      tag = 69,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String userStatusRemark;

  /**
   * 申请人签名
   */
  @WireField(
      tag = 70,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String userSignPic;

  /**
   * 用户委托书
   */
  @WireField(
      tag = 71,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String entrustPic;

  /**
   * 健康经理评估时间
   */
  @WireField(
      tag = 72,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long managerAssessTime;

  /**
   * 复审上门评估时间
   */
  @WireField(
      tag = 73,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long loseAppointAssessTime;

  /**
   * 客服评估时间
   */
  @WireField(
      tag = 74,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long kfTime;

  /**
   * 复审时间
   */
  @WireField(
      tag = 75,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long loseAppointTime;

  /**
   * 被指派复审护士id
   */
  @WireField(
      tag = 76,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long loseNurseId;

  /**
   * 被指派复审护士
   */
  @WireField(
      tag = 77,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String loseNurseName;

  /**
   * 病例、诊断等图片
   */
  @WireField(
      tag = 78,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> caseDiagnosePic;

  /**
   * 护士初审病情描述
   */
  @WireField(
      tag = 79,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String hsCasePresentation;

  /**
   * 是否中重度智能障碍 0-否 1-是
   */
  @WireField(
      tag = 80,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer isAmentia;

  /**
   * 中重度智能障碍照片 如多张，以逗号隔开
   */
  @WireField(
      tag = 81,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      label = WireField.Label.REPEATED
  )
  public final List<String> dysgnosiaePic;

  /**
   * 护士初审评估情况说明
   */
  @WireField(
      tag = 82,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String medicalHistory;

  /**
   * 被指派护士长id
   */
  @WireField(
      tag = 83,
      adapter = "com.squareup.wire.ProtoAdapter#UINT64"
  )
  public final Long loseNurseLeaderId;

  /**
   * 被指派护士长
   */
  @WireField(
      tag = 84,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String loseNurseLeaderName;

  /**
   * 专家复审评估备注
   */
  @WireField(
      tag = 85,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String loseRemark;

  /**
   * 创建方式  0-客户端app 1-客户端h5 2-企业端（健康经理） 3-saas
   */
  @WireField(
      tag = 86,
      adapter = "com.squareup.wire.ProtoAdapter#UINT32"
  )
  public final Integer foundWay;

  public InsureNOModel(String insureNO, String idcard, String cityId, Long userId, String contactName, String contactPhone, Long kinsId, String kinsName, Integer sex, Integer age, Integer medicareType, String medicareNO, String height, String weight, Integer actAbility, List<Integer> language, String memoInfo, Long addrId, String phone, String name, String province, String city, String district, String building, String addrDetail, Integer status, List<String> orderId, Long nurseId, String nurseName, Long managerId, String managerName, Integer fee, Long reviveTime, Long startTime, Long endTime, Long createTime, Long createStaffId, String createStaffName, Integer score, Integer isForce, Integer payType, Long nurseLeaderId, String nurseLeaderName, Integer orderStatus, String healthCareNO, Integer scoreMMSE, Long assessTime, List<String> medicalList, String kfRemark, String hsRemark, String channelId, Long appointTime, Integer scoreADL, Long orderTime, String managerRemark, Long updateTime, Integer insureGetType, String agencyName, String agencyRelation, String agencyPhone, Integer dudaoScoreADL, Integer applyTreatmentType, Integer treatmentType, Integer assessType, String securityAssess, String userStatusRemark, String userSignPic, String entrustPic, Long managerAssessTime, Long loseAppointAssessTime, Long kfTime, Long loseAppointTime, Long loseNurseId, String loseNurseName, List<String> caseDiagnosePic, String hsCasePresentation, Integer isAmentia, List<String> dysgnosiaePic, String medicalHistory, Long loseNurseLeaderId, String loseNurseLeaderName, String loseRemark, Integer foundWay) {
    this(insureNO, idcard, cityId, userId, contactName, contactPhone, kinsId, kinsName, sex, age, medicareType, medicareNO, height, weight, actAbility, language, memoInfo, addrId, phone, name, province, city, district, building, addrDetail, status, orderId, nurseId, nurseName, managerId, managerName, fee, reviveTime, startTime, endTime, createTime, createStaffId, createStaffName, score, isForce, payType, nurseLeaderId, nurseLeaderName, orderStatus, healthCareNO, scoreMMSE, assessTime, medicalList, kfRemark, hsRemark, channelId, appointTime, scoreADL, orderTime, managerRemark, updateTime, insureGetType, agencyName, agencyRelation, agencyPhone, dudaoScoreADL, applyTreatmentType, treatmentType, assessType, securityAssess, userStatusRemark, userSignPic, entrustPic, managerAssessTime, loseAppointAssessTime, kfTime, loseAppointTime, loseNurseId, loseNurseName, caseDiagnosePic, hsCasePresentation, isAmentia, dysgnosiaePic, medicalHistory, loseNurseLeaderId, loseNurseLeaderName, loseRemark, foundWay, ByteString.EMPTY);
  }

  public InsureNOModel(String insureNO, String idcard, String cityId, Long userId, String contactName, String contactPhone, Long kinsId, String kinsName, Integer sex, Integer age, Integer medicareType, String medicareNO, String height, String weight, Integer actAbility, List<Integer> language, String memoInfo, Long addrId, String phone, String name, String province, String city, String district, String building, String addrDetail, Integer status, List<String> orderId, Long nurseId, String nurseName, Long managerId, String managerName, Integer fee, Long reviveTime, Long startTime, Long endTime, Long createTime, Long createStaffId, String createStaffName, Integer score, Integer isForce, Integer payType, Long nurseLeaderId, String nurseLeaderName, Integer orderStatus, String healthCareNO, Integer scoreMMSE, Long assessTime, List<String> medicalList, String kfRemark, String hsRemark, String channelId, Long appointTime, Integer scoreADL, Long orderTime, String managerRemark, Long updateTime, Integer insureGetType, String agencyName, String agencyRelation, String agencyPhone, Integer dudaoScoreADL, Integer applyTreatmentType, Integer treatmentType, Integer assessType, String securityAssess, String userStatusRemark, String userSignPic, String entrustPic, Long managerAssessTime, Long loseAppointAssessTime, Long kfTime, Long loseAppointTime, Long loseNurseId, String loseNurseName, List<String> caseDiagnosePic, String hsCasePresentation, Integer isAmentia, List<String> dysgnosiaePic, String medicalHistory, Long loseNurseLeaderId, String loseNurseLeaderName, String loseRemark, Integer foundWay, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.insureNO = insureNO;
    this.idcard = idcard;
    this.cityId = cityId;
    this.userId = userId;
    this.contactName = contactName;
    this.contactPhone = contactPhone;
    this.kinsId = kinsId;
    this.kinsName = kinsName;
    this.sex = sex;
    this.age = age;
    this.medicareType = medicareType;
    this.medicareNO = medicareNO;
    this.height = height;
    this.weight = weight;
    this.actAbility = actAbility;
    this.language = Internal.immutableCopyOf("language", language);
    this.memoInfo = memoInfo;
    this.addrId = addrId;
    this.phone = phone;
    this.name = name;
    this.province = province;
    this.city = city;
    this.district = district;
    this.building = building;
    this.addrDetail = addrDetail;
    this.status = status;
    this.orderId = Internal.immutableCopyOf("orderId", orderId);
    this.nurseId = nurseId;
    this.nurseName = nurseName;
    this.managerId = managerId;
    this.managerName = managerName;
    this.fee = fee;
    this.reviveTime = reviveTime;
    this.startTime = startTime;
    this.endTime = endTime;
    this.createTime = createTime;
    this.createStaffId = createStaffId;
    this.createStaffName = createStaffName;
    this.score = score;
    this.isForce = isForce;
    this.payType = payType;
    this.nurseLeaderId = nurseLeaderId;
    this.nurseLeaderName = nurseLeaderName;
    this.orderStatus = orderStatus;
    this.healthCareNO = healthCareNO;
    this.scoreMMSE = scoreMMSE;
    this.assessTime = assessTime;
    this.medicalList = Internal.immutableCopyOf("medicalList", medicalList);
    this.kfRemark = kfRemark;
    this.hsRemark = hsRemark;
    this.channelId = channelId;
    this.appointTime = appointTime;
    this.scoreADL = scoreADL;
    this.orderTime = orderTime;
    this.managerRemark = managerRemark;
    this.updateTime = updateTime;
    this.insureGetType = insureGetType;
    this.agencyName = agencyName;
    this.agencyRelation = agencyRelation;
    this.agencyPhone = agencyPhone;
    this.dudaoScoreADL = dudaoScoreADL;
    this.applyTreatmentType = applyTreatmentType;
    this.treatmentType = treatmentType;
    this.assessType = assessType;
    this.securityAssess = securityAssess;
    this.userStatusRemark = userStatusRemark;
    this.userSignPic = userSignPic;
    this.entrustPic = entrustPic;
    this.managerAssessTime = managerAssessTime;
    this.loseAppointAssessTime = loseAppointAssessTime;
    this.kfTime = kfTime;
    this.loseAppointTime = loseAppointTime;
    this.loseNurseId = loseNurseId;
    this.loseNurseName = loseNurseName;
    this.caseDiagnosePic = Internal.immutableCopyOf("caseDiagnosePic", caseDiagnosePic);
    this.hsCasePresentation = hsCasePresentation;
    this.isAmentia = isAmentia;
    this.dysgnosiaePic = Internal.immutableCopyOf("dysgnosiaePic", dysgnosiaePic);
    this.medicalHistory = medicalHistory;
    this.loseNurseLeaderId = loseNurseLeaderId;
    this.loseNurseLeaderName = loseNurseLeaderName;
    this.loseRemark = loseRemark;
    this.foundWay = foundWay;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.insureNO = insureNO;
    builder.idcard = idcard;
    builder.cityId = cityId;
    builder.userId = userId;
    builder.contactName = contactName;
    builder.contactPhone = contactPhone;
    builder.kinsId = kinsId;
    builder.kinsName = kinsName;
    builder.sex = sex;
    builder.age = age;
    builder.medicareType = medicareType;
    builder.medicareNO = medicareNO;
    builder.height = height;
    builder.weight = weight;
    builder.actAbility = actAbility;
    builder.language = Internal.copyOf("language", language);
    builder.memoInfo = memoInfo;
    builder.addrId = addrId;
    builder.phone = phone;
    builder.name = name;
    builder.province = province;
    builder.city = city;
    builder.district = district;
    builder.building = building;
    builder.addrDetail = addrDetail;
    builder.status = status;
    builder.orderId = Internal.copyOf("orderId", orderId);
    builder.nurseId = nurseId;
    builder.nurseName = nurseName;
    builder.managerId = managerId;
    builder.managerName = managerName;
    builder.fee = fee;
    builder.reviveTime = reviveTime;
    builder.startTime = startTime;
    builder.endTime = endTime;
    builder.createTime = createTime;
    builder.createStaffId = createStaffId;
    builder.createStaffName = createStaffName;
    builder.score = score;
    builder.isForce = isForce;
    builder.payType = payType;
    builder.nurseLeaderId = nurseLeaderId;
    builder.nurseLeaderName = nurseLeaderName;
    builder.orderStatus = orderStatus;
    builder.healthCareNO = healthCareNO;
    builder.scoreMMSE = scoreMMSE;
    builder.assessTime = assessTime;
    builder.medicalList = Internal.copyOf("medicalList", medicalList);
    builder.kfRemark = kfRemark;
    builder.hsRemark = hsRemark;
    builder.channelId = channelId;
    builder.appointTime = appointTime;
    builder.scoreADL = scoreADL;
    builder.orderTime = orderTime;
    builder.managerRemark = managerRemark;
    builder.updateTime = updateTime;
    builder.insureGetType = insureGetType;
    builder.agencyName = agencyName;
    builder.agencyRelation = agencyRelation;
    builder.agencyPhone = agencyPhone;
    builder.dudaoScoreADL = dudaoScoreADL;
    builder.applyTreatmentType = applyTreatmentType;
    builder.treatmentType = treatmentType;
    builder.assessType = assessType;
    builder.securityAssess = securityAssess;
    builder.userStatusRemark = userStatusRemark;
    builder.userSignPic = userSignPic;
    builder.entrustPic = entrustPic;
    builder.managerAssessTime = managerAssessTime;
    builder.loseAppointAssessTime = loseAppointAssessTime;
    builder.kfTime = kfTime;
    builder.loseAppointTime = loseAppointTime;
    builder.loseNurseId = loseNurseId;
    builder.loseNurseName = loseNurseName;
    builder.caseDiagnosePic = Internal.copyOf("caseDiagnosePic", caseDiagnosePic);
    builder.hsCasePresentation = hsCasePresentation;
    builder.isAmentia = isAmentia;
    builder.dysgnosiaePic = Internal.copyOf("dysgnosiaePic", dysgnosiaePic);
    builder.medicalHistory = medicalHistory;
    builder.loseNurseLeaderId = loseNurseLeaderId;
    builder.loseNurseLeaderName = loseNurseLeaderName;
    builder.loseRemark = loseRemark;
    builder.foundWay = foundWay;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof InsureNOModel)) return false;
    InsureNOModel o = (InsureNOModel) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(insureNO, o.insureNO)
        && Internal.equals(idcard, o.idcard)
        && Internal.equals(cityId, o.cityId)
        && Internal.equals(userId, o.userId)
        && Internal.equals(contactName, o.contactName)
        && Internal.equals(contactPhone, o.contactPhone)
        && Internal.equals(kinsId, o.kinsId)
        && Internal.equals(kinsName, o.kinsName)
        && Internal.equals(sex, o.sex)
        && Internal.equals(age, o.age)
        && Internal.equals(medicareType, o.medicareType)
        && Internal.equals(medicareNO, o.medicareNO)
        && Internal.equals(height, o.height)
        && Internal.equals(weight, o.weight)
        && Internal.equals(actAbility, o.actAbility)
        && language.equals(o.language)
        && Internal.equals(memoInfo, o.memoInfo)
        && Internal.equals(addrId, o.addrId)
        && Internal.equals(phone, o.phone)
        && Internal.equals(name, o.name)
        && Internal.equals(province, o.province)
        && Internal.equals(city, o.city)
        && Internal.equals(district, o.district)
        && Internal.equals(building, o.building)
        && Internal.equals(addrDetail, o.addrDetail)
        && Internal.equals(status, o.status)
        && orderId.equals(o.orderId)
        && Internal.equals(nurseId, o.nurseId)
        && Internal.equals(nurseName, o.nurseName)
        && Internal.equals(managerId, o.managerId)
        && Internal.equals(managerName, o.managerName)
        && Internal.equals(fee, o.fee)
        && Internal.equals(reviveTime, o.reviveTime)
        && Internal.equals(startTime, o.startTime)
        && Internal.equals(endTime, o.endTime)
        && Internal.equals(createTime, o.createTime)
        && Internal.equals(createStaffId, o.createStaffId)
        && Internal.equals(createStaffName, o.createStaffName)
        && Internal.equals(score, o.score)
        && Internal.equals(isForce, o.isForce)
        && Internal.equals(payType, o.payType)
        && Internal.equals(nurseLeaderId, o.nurseLeaderId)
        && Internal.equals(nurseLeaderName, o.nurseLeaderName)
        && Internal.equals(orderStatus, o.orderStatus)
        && Internal.equals(healthCareNO, o.healthCareNO)
        && Internal.equals(scoreMMSE, o.scoreMMSE)
        && Internal.equals(assessTime, o.assessTime)
        && medicalList.equals(o.medicalList)
        && Internal.equals(kfRemark, o.kfRemark)
        && Internal.equals(hsRemark, o.hsRemark)
        && Internal.equals(channelId, o.channelId)
        && Internal.equals(appointTime, o.appointTime)
        && Internal.equals(scoreADL, o.scoreADL)
        && Internal.equals(orderTime, o.orderTime)
        && Internal.equals(managerRemark, o.managerRemark)
        && Internal.equals(updateTime, o.updateTime)
        && Internal.equals(insureGetType, o.insureGetType)
        && Internal.equals(agencyName, o.agencyName)
        && Internal.equals(agencyRelation, o.agencyRelation)
        && Internal.equals(agencyPhone, o.agencyPhone)
        && Internal.equals(dudaoScoreADL, o.dudaoScoreADL)
        && Internal.equals(applyTreatmentType, o.applyTreatmentType)
        && Internal.equals(treatmentType, o.treatmentType)
        && Internal.equals(assessType, o.assessType)
        && Internal.equals(securityAssess, o.securityAssess)
        && Internal.equals(userStatusRemark, o.userStatusRemark)
        && Internal.equals(userSignPic, o.userSignPic)
        && Internal.equals(entrustPic, o.entrustPic)
        && Internal.equals(managerAssessTime, o.managerAssessTime)
        && Internal.equals(loseAppointAssessTime, o.loseAppointAssessTime)
        && Internal.equals(kfTime, o.kfTime)
        && Internal.equals(loseAppointTime, o.loseAppointTime)
        && Internal.equals(loseNurseId, o.loseNurseId)
        && Internal.equals(loseNurseName, o.loseNurseName)
        && caseDiagnosePic.equals(o.caseDiagnosePic)
        && Internal.equals(hsCasePresentation, o.hsCasePresentation)
        && Internal.equals(isAmentia, o.isAmentia)
        && dysgnosiaePic.equals(o.dysgnosiaePic)
        && Internal.equals(medicalHistory, o.medicalHistory)
        && Internal.equals(loseNurseLeaderId, o.loseNurseLeaderId)
        && Internal.equals(loseNurseLeaderName, o.loseNurseLeaderName)
        && Internal.equals(loseRemark, o.loseRemark)
        && Internal.equals(foundWay, o.foundWay);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (insureNO != null ? insureNO.hashCode() : 0);
      result = result * 37 + (idcard != null ? idcard.hashCode() : 0);
      result = result * 37 + (cityId != null ? cityId.hashCode() : 0);
      result = result * 37 + (userId != null ? userId.hashCode() : 0);
      result = result * 37 + (contactName != null ? contactName.hashCode() : 0);
      result = result * 37 + (contactPhone != null ? contactPhone.hashCode() : 0);
      result = result * 37 + (kinsId != null ? kinsId.hashCode() : 0);
      result = result * 37 + (kinsName != null ? kinsName.hashCode() : 0);
      result = result * 37 + (sex != null ? sex.hashCode() : 0);
      result = result * 37 + (age != null ? age.hashCode() : 0);
      result = result * 37 + (medicareType != null ? medicareType.hashCode() : 0);
      result = result * 37 + (medicareNO != null ? medicareNO.hashCode() : 0);
      result = result * 37 + (height != null ? height.hashCode() : 0);
      result = result * 37 + (weight != null ? weight.hashCode() : 0);
      result = result * 37 + (actAbility != null ? actAbility.hashCode() : 0);
      result = result * 37 + language.hashCode();
      result = result * 37 + (memoInfo != null ? memoInfo.hashCode() : 0);
      result = result * 37 + (addrId != null ? addrId.hashCode() : 0);
      result = result * 37 + (phone != null ? phone.hashCode() : 0);
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (province != null ? province.hashCode() : 0);
      result = result * 37 + (city != null ? city.hashCode() : 0);
      result = result * 37 + (district != null ? district.hashCode() : 0);
      result = result * 37 + (building != null ? building.hashCode() : 0);
      result = result * 37 + (addrDetail != null ? addrDetail.hashCode() : 0);
      result = result * 37 + (status != null ? status.hashCode() : 0);
      result = result * 37 + orderId.hashCode();
      result = result * 37 + (nurseId != null ? nurseId.hashCode() : 0);
      result = result * 37 + (nurseName != null ? nurseName.hashCode() : 0);
      result = result * 37 + (managerId != null ? managerId.hashCode() : 0);
      result = result * 37 + (managerName != null ? managerName.hashCode() : 0);
      result = result * 37 + (fee != null ? fee.hashCode() : 0);
      result = result * 37 + (reviveTime != null ? reviveTime.hashCode() : 0);
      result = result * 37 + (startTime != null ? startTime.hashCode() : 0);
      result = result * 37 + (endTime != null ? endTime.hashCode() : 0);
      result = result * 37 + (createTime != null ? createTime.hashCode() : 0);
      result = result * 37 + (createStaffId != null ? createStaffId.hashCode() : 0);
      result = result * 37 + (createStaffName != null ? createStaffName.hashCode() : 0);
      result = result * 37 + (score != null ? score.hashCode() : 0);
      result = result * 37 + (isForce != null ? isForce.hashCode() : 0);
      result = result * 37 + (payType != null ? payType.hashCode() : 0);
      result = result * 37 + (nurseLeaderId != null ? nurseLeaderId.hashCode() : 0);
      result = result * 37 + (nurseLeaderName != null ? nurseLeaderName.hashCode() : 0);
      result = result * 37 + (orderStatus != null ? orderStatus.hashCode() : 0);
      result = result * 37 + (healthCareNO != null ? healthCareNO.hashCode() : 0);
      result = result * 37 + (scoreMMSE != null ? scoreMMSE.hashCode() : 0);
      result = result * 37 + (assessTime != null ? assessTime.hashCode() : 0);
      result = result * 37 + medicalList.hashCode();
      result = result * 37 + (kfRemark != null ? kfRemark.hashCode() : 0);
      result = result * 37 + (hsRemark != null ? hsRemark.hashCode() : 0);
      result = result * 37 + (channelId != null ? channelId.hashCode() : 0);
      result = result * 37 + (appointTime != null ? appointTime.hashCode() : 0);
      result = result * 37 + (scoreADL != null ? scoreADL.hashCode() : 0);
      result = result * 37 + (orderTime != null ? orderTime.hashCode() : 0);
      result = result * 37 + (managerRemark != null ? managerRemark.hashCode() : 0);
      result = result * 37 + (updateTime != null ? updateTime.hashCode() : 0);
      result = result * 37 + (insureGetType != null ? insureGetType.hashCode() : 0);
      result = result * 37 + (agencyName != null ? agencyName.hashCode() : 0);
      result = result * 37 + (agencyRelation != null ? agencyRelation.hashCode() : 0);
      result = result * 37 + (agencyPhone != null ? agencyPhone.hashCode() : 0);
      result = result * 37 + (dudaoScoreADL != null ? dudaoScoreADL.hashCode() : 0);
      result = result * 37 + (applyTreatmentType != null ? applyTreatmentType.hashCode() : 0);
      result = result * 37 + (treatmentType != null ? treatmentType.hashCode() : 0);
      result = result * 37 + (assessType != null ? assessType.hashCode() : 0);
      result = result * 37 + (securityAssess != null ? securityAssess.hashCode() : 0);
      result = result * 37 + (userStatusRemark != null ? userStatusRemark.hashCode() : 0);
      result = result * 37 + (userSignPic != null ? userSignPic.hashCode() : 0);
      result = result * 37 + (entrustPic != null ? entrustPic.hashCode() : 0);
      result = result * 37 + (managerAssessTime != null ? managerAssessTime.hashCode() : 0);
      result = result * 37 + (loseAppointAssessTime != null ? loseAppointAssessTime.hashCode() : 0);
      result = result * 37 + (kfTime != null ? kfTime.hashCode() : 0);
      result = result * 37 + (loseAppointTime != null ? loseAppointTime.hashCode() : 0);
      result = result * 37 + (loseNurseId != null ? loseNurseId.hashCode() : 0);
      result = result * 37 + (loseNurseName != null ? loseNurseName.hashCode() : 0);
      result = result * 37 + caseDiagnosePic.hashCode();
      result = result * 37 + (hsCasePresentation != null ? hsCasePresentation.hashCode() : 0);
      result = result * 37 + (isAmentia != null ? isAmentia.hashCode() : 0);
      result = result * 37 + dysgnosiaePic.hashCode();
      result = result * 37 + (medicalHistory != null ? medicalHistory.hashCode() : 0);
      result = result * 37 + (loseNurseLeaderId != null ? loseNurseLeaderId.hashCode() : 0);
      result = result * 37 + (loseNurseLeaderName != null ? loseNurseLeaderName.hashCode() : 0);
      result = result * 37 + (loseRemark != null ? loseRemark.hashCode() : 0);
      result = result * 37 + (foundWay != null ? foundWay.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (insureNO != null) builder.append(", insureNO=").append(insureNO);
    if (idcard != null) builder.append(", idcard=").append(idcard);
    if (cityId != null) builder.append(", cityId=").append(cityId);
    if (userId != null) builder.append(", userId=").append(userId);
    if (contactName != null) builder.append(", contactName=").append(contactName);
    if (contactPhone != null) builder.append(", contactPhone=").append(contactPhone);
    if (kinsId != null) builder.append(", kinsId=").append(kinsId);
    if (kinsName != null) builder.append(", kinsName=").append(kinsName);
    if (sex != null) builder.append(", sex=").append(sex);
    if (age != null) builder.append(", age=").append(age);
    if (medicareType != null) builder.append(", medicareType=").append(medicareType);
    if (medicareNO != null) builder.append(", medicareNO=").append(medicareNO);
    if (height != null) builder.append(", height=").append(height);
    if (weight != null) builder.append(", weight=").append(weight);
    if (actAbility != null) builder.append(", actAbility=").append(actAbility);
    if (!language.isEmpty()) builder.append(", language=").append(language);
    if (memoInfo != null) builder.append(", memoInfo=").append(memoInfo);
    if (addrId != null) builder.append(", addrId=").append(addrId);
    if (phone != null) builder.append(", phone=").append(phone);
    if (name != null) builder.append(", name=").append(name);
    if (province != null) builder.append(", province=").append(province);
    if (city != null) builder.append(", city=").append(city);
    if (district != null) builder.append(", district=").append(district);
    if (building != null) builder.append(", building=").append(building);
    if (addrDetail != null) builder.append(", addrDetail=").append(addrDetail);
    if (status != null) builder.append(", status=").append(status);
    if (!orderId.isEmpty()) builder.append(", orderId=").append(orderId);
    if (nurseId != null) builder.append(", nurseId=").append(nurseId);
    if (nurseName != null) builder.append(", nurseName=").append(nurseName);
    if (managerId != null) builder.append(", managerId=").append(managerId);
    if (managerName != null) builder.append(", managerName=").append(managerName);
    if (fee != null) builder.append(", fee=").append(fee);
    if (reviveTime != null) builder.append(", reviveTime=").append(reviveTime);
    if (startTime != null) builder.append(", startTime=").append(startTime);
    if (endTime != null) builder.append(", endTime=").append(endTime);
    if (createTime != null) builder.append(", createTime=").append(createTime);
    if (createStaffId != null) builder.append(", createStaffId=").append(createStaffId);
    if (createStaffName != null) builder.append(", createStaffName=").append(createStaffName);
    if (score != null) builder.append(", score=").append(score);
    if (isForce != null) builder.append(", isForce=").append(isForce);
    if (payType != null) builder.append(", payType=").append(payType);
    if (nurseLeaderId != null) builder.append(", nurseLeaderId=").append(nurseLeaderId);
    if (nurseLeaderName != null) builder.append(", nurseLeaderName=").append(nurseLeaderName);
    if (orderStatus != null) builder.append(", orderStatus=").append(orderStatus);
    if (healthCareNO != null) builder.append(", healthCareNO=").append(healthCareNO);
    if (scoreMMSE != null) builder.append(", scoreMMSE=").append(scoreMMSE);
    if (assessTime != null) builder.append(", assessTime=").append(assessTime);
    if (!medicalList.isEmpty()) builder.append(", medicalList=").append(medicalList);
    if (kfRemark != null) builder.append(", kfRemark=").append(kfRemark);
    if (hsRemark != null) builder.append(", hsRemark=").append(hsRemark);
    if (channelId != null) builder.append(", channelId=").append(channelId);
    if (appointTime != null) builder.append(", appointTime=").append(appointTime);
    if (scoreADL != null) builder.append(", scoreADL=").append(scoreADL);
    if (orderTime != null) builder.append(", orderTime=").append(orderTime);
    if (managerRemark != null) builder.append(", managerRemark=").append(managerRemark);
    if (updateTime != null) builder.append(", updateTime=").append(updateTime);
    if (insureGetType != null) builder.append(", insureGetType=").append(insureGetType);
    if (agencyName != null) builder.append(", agencyName=").append(agencyName);
    if (agencyRelation != null) builder.append(", agencyRelation=").append(agencyRelation);
    if (agencyPhone != null) builder.append(", agencyPhone=").append(agencyPhone);
    if (dudaoScoreADL != null) builder.append(", dudaoScoreADL=").append(dudaoScoreADL);
    if (applyTreatmentType != null) builder.append(", applyTreatmentType=").append(applyTreatmentType);
    if (treatmentType != null) builder.append(", treatmentType=").append(treatmentType);
    if (assessType != null) builder.append(", assessType=").append(assessType);
    if (securityAssess != null) builder.append(", securityAssess=").append(securityAssess);
    if (userStatusRemark != null) builder.append(", userStatusRemark=").append(userStatusRemark);
    if (userSignPic != null) builder.append(", userSignPic=").append(userSignPic);
    if (entrustPic != null) builder.append(", entrustPic=").append(entrustPic);
    if (managerAssessTime != null) builder.append(", managerAssessTime=").append(managerAssessTime);
    if (loseAppointAssessTime != null) builder.append(", loseAppointAssessTime=").append(loseAppointAssessTime);
    if (kfTime != null) builder.append(", kfTime=").append(kfTime);
    if (loseAppointTime != null) builder.append(", loseAppointTime=").append(loseAppointTime);
    if (loseNurseId != null) builder.append(", loseNurseId=").append(loseNurseId);
    if (loseNurseName != null) builder.append(", loseNurseName=").append(loseNurseName);
    if (!caseDiagnosePic.isEmpty()) builder.append(", caseDiagnosePic=").append(caseDiagnosePic);
    if (hsCasePresentation != null) builder.append(", hsCasePresentation=").append(hsCasePresentation);
    if (isAmentia != null) builder.append(", isAmentia=").append(isAmentia);
    if (!dysgnosiaePic.isEmpty()) builder.append(", dysgnosiaePic=").append(dysgnosiaePic);
    if (medicalHistory != null) builder.append(", medicalHistory=").append(medicalHistory);
    if (loseNurseLeaderId != null) builder.append(", loseNurseLeaderId=").append(loseNurseLeaderId);
    if (loseNurseLeaderName != null) builder.append(", loseNurseLeaderName=").append(loseNurseLeaderName);
    if (loseRemark != null) builder.append(", loseRemark=").append(loseRemark);
    if (foundWay != null) builder.append(", foundWay=").append(foundWay);
    return builder.replace(0, 2, "InsureNOModel{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<InsureNOModel, Builder> {
    public String insureNO;

    public String idcard;

    public String cityId;

    public Long userId;

    public String contactName;

    public String contactPhone;

    public Long kinsId;

    public String kinsName;

    public Integer sex;

    public Integer age;

    public Integer medicareType;

    public String medicareNO;

    public String height;

    public String weight;

    public Integer actAbility;

    public List<Integer> language;

    public String memoInfo;

    public Long addrId;

    public String phone;

    public String name;

    public String province;

    public String city;

    public String district;

    public String building;

    public String addrDetail;

    public Integer status;

    public List<String> orderId;

    public Long nurseId;

    public String nurseName;

    public Long managerId;

    public String managerName;

    public Integer fee;

    public Long reviveTime;

    public Long startTime;

    public Long endTime;

    public Long createTime;

    public Long createStaffId;

    public String createStaffName;

    public Integer score;

    public Integer isForce;

    public Integer payType;

    public Long nurseLeaderId;

    public String nurseLeaderName;

    public Integer orderStatus;

    public String healthCareNO;

    public Integer scoreMMSE;

    public Long assessTime;

    public List<String> medicalList;

    public String kfRemark;

    public String hsRemark;

    public String channelId;

    public Long appointTime;

    public Integer scoreADL;

    public Long orderTime;

    public String managerRemark;

    public Long updateTime;

    public Integer insureGetType;

    public String agencyName;

    public String agencyRelation;

    public String agencyPhone;

    public Integer dudaoScoreADL;

    public Integer applyTreatmentType;

    public Integer treatmentType;

    public Integer assessType;

    public String securityAssess;

    public String userStatusRemark;

    public String userSignPic;

    public String entrustPic;

    public Long managerAssessTime;

    public Long loseAppointAssessTime;

    public Long kfTime;

    public Long loseAppointTime;

    public Long loseNurseId;

    public String loseNurseName;

    public List<String> caseDiagnosePic;

    public String hsCasePresentation;

    public Integer isAmentia;

    public List<String> dysgnosiaePic;

    public String medicalHistory;

    public Long loseNurseLeaderId;

    public String loseNurseLeaderName;

    public String loseRemark;

    public Integer foundWay;

    public Builder() {
      language = Internal.newMutableList();
      orderId = Internal.newMutableList();
      medicalList = Internal.newMutableList();
      caseDiagnosePic = Internal.newMutableList();
      dysgnosiaePic = Internal.newMutableList();
    }

    /**
     * 申请批次
     */
    public Builder insureNO(String insureNO) {
      this.insureNO = insureNO;
      return this;
    }

    /**
     * 身份证号
     */
    public Builder idcard(String idcard) {
      this.idcard = idcard;
      return this;
    }

    /**
     * 城市id
     */
    public Builder cityId(String cityId) {
      this.cityId = cityId;
      return this;
    }

    /**
     * 申请人id
     */
    public Builder userId(Long userId) {
      this.userId = userId;
      return this;
    }

    /**
     * 联系人
     */
    public Builder contactName(String contactName) {
      this.contactName = contactName;
      return this;
    }

    /**
     * 联系电话
     */
    public Builder contactPhone(String contactPhone) {
      this.contactPhone = contactPhone;
      return this;
    }

    /**
     * 被服务人id
     */
    public Builder kinsId(Long kinsId) {
      this.kinsId = kinsId;
      return this;
    }

    /**
     * 被服务人
     */
    public Builder kinsName(String kinsName) {
      this.kinsName = kinsName;
      return this;
    }

    /**
     * 性别 0-未知 1-男 2-女
     */
    public Builder sex(Integer sex) {
      this.sex = sex;
      return this;
    }

    /**
     * 当前年龄
     */
    public Builder age(Integer age) {
      this.age = age;
      return this;
    }

    /**
     * 医保类型
     */
    public Builder medicareType(Integer medicareType) {
      this.medicareType = medicareType;
      return this;
    }

    /**
     * 就诊卡号
     */
    public Builder medicareNO(String medicareNO) {
      this.medicareNO = medicareNO;
      return this;
    }

    /**
     * 身高
     */
    public Builder height(String height) {
      this.height = height;
      return this;
    }

    /**
     * 体重
     */
    public Builder weight(String weight) {
      this.weight = weight;
      return this;
    }

    /**
     * 行动能力
     */
    public Builder actAbility(Integer actAbility) {
      this.actAbility = actAbility;
      return this;
    }

    /**
     * 语言，多种语言用,号分割 1-普通话 2-粤语
     */
    public Builder language(List<Integer> language) {
      Internal.checkElementsNotNull(language);
      this.language = language;
      return this;
    }

    /**
     * 备注信息
     */
    public Builder memoInfo(String memoInfo) {
      this.memoInfo = memoInfo;
      return this;
    }

    /**
     * 地址id
     */
    public Builder addrId(Long addrId) {
      this.addrId = addrId;
      return this;
    }

    /**
     * 地址联系电话
     */
    public Builder phone(String phone) {
      this.phone = phone;
      return this;
    }

    /**
     * 地址联系人
     */
    public Builder name(String name) {
      this.name = name;
      return this;
    }

    /**
     * 省
     */
    public Builder province(String province) {
      this.province = province;
      return this;
    }

    /**
     * 市
     */
    public Builder city(String city) {
      this.city = city;
      return this;
    }

    /**
     * 区县
     */
    public Builder district(String district) {
      this.district = district;
      return this;
    }

    /**
     * 小区
     */
    public Builder building(String building) {
      this.building = building;
      return this;
    }

    /**
     * 详细地址
     */
    public Builder addrDetail(String addrDetail) {
      this.addrDetail = addrDetail;
      return this;
    }

    /**
     * 状态 0-客服审核 1-护士初审 2-等待提交复审 3-等待复审 4-复审通过 5-复审中  50-客服驳回 51-初审驳回 52-复审驳回 53-已关闭
     */
    public Builder status(Integer status) {
      this.status = status;
      return this;
    }

    /**
     * 正在进行的相关订单id集合，用逗号隔开
     */
    public Builder orderId(List<String> orderId) {
      Internal.checkElementsNotNull(orderId);
      this.orderId = orderId;
      return this;
    }

    /**
     * 被指派护士id
     */
    public Builder nurseId(Long nurseId) {
      this.nurseId = nurseId;
      return this;
    }

    /**
     * 被指派护士
     */
    public Builder nurseName(String nurseName) {
      this.nurseName = nurseName;
      return this;
    }

    /**
     * 被指派健康经理id
     */
    public Builder managerId(Long managerId) {
      this.managerId = managerId;
      return this;
    }

    /**
     * 被指派健康经理
     */
    public Builder managerName(String managerName) {
      this.managerName = managerName;
      return this;
    }

    /**
     * 强制申请的金额（大于0即强制申请）
     */
    public Builder fee(Integer fee) {
      this.fee = fee;
      return this;
    }

    /**
     * 复活时间-不通过时，可重新提交申请时间
     */
    public Builder reviveTime(Long reviveTime) {
      this.reviveTime = reviveTime;
      return this;
    }

    /**
     * 长护险有效开始时间
     */
    public Builder startTime(Long startTime) {
      this.startTime = startTime;
      return this;
    }

    /**
     * 长护险有效结束时间
     */
    public Builder endTime(Long endTime) {
      this.endTime = endTime;
      return this;
    }

    /**
     * 申请时间
     */
    public Builder createTime(Long createTime) {
      this.createTime = createTime;
      return this;
    }

    public Builder createStaffId(Long createStaffId) {
      this.createStaffId = createStaffId;
      return this;
    }

    public Builder createStaffName(String createStaffName) {
      this.createStaffName = createStaffName;
      return this;
    }

    /**
     * 自评分数
     */
    public Builder score(Integer score) {
      this.score = score;
      return this;
    }

    /**
     * 是否强制提交申请 0-非强制 1-强制提交
     */
    public Builder isForce(Integer isForce) {
      this.isForce = isForce;
      return this;
    }

    /**
     * 支付方式
     */
    public Builder payType(Integer payType) {
      this.payType = payType;
      return this;
    }

    /**
     * 被指派护士长id
     */
    public Builder nurseLeaderId(Long nurseLeaderId) {
      this.nurseLeaderId = nurseLeaderId;
      return this;
    }

    /**
     * 被指派护士长
     */
    public Builder nurseLeaderName(String nurseLeaderName) {
      this.nurseLeaderName = nurseLeaderName;
      return this;
    }

    /**
     * 下单意愿 0-未联系 1-暂不下单 2-等待下单 3-已下单
     */
    public Builder orderStatus(Integer orderStatus) {
      this.orderStatus = orderStatus;
      return this;
    }

    /**
     * 医保卡号
     */
    public Builder healthCareNO(String healthCareNO) {
      this.healthCareNO = healthCareNO;
      return this;
    }

    /**
     * mmse评估得分
     */
    public Builder scoreMMSE(Integer scoreMMSE) {
      this.scoreMMSE = scoreMMSE;
      return this;
    }

    /**
     * 护士初审时间
     */
    public Builder assessTime(Long assessTime) {
      this.assessTime = assessTime;
      return this;
    }

    /**
     * 病史记录
     */
    public Builder medicalList(List<String> medicalList) {
      Internal.checkElementsNotNull(medicalList);
      this.medicalList = medicalList;
      return this;
    }

    /**
     * 客服备注
     */
    public Builder kfRemark(String kfRemark) {
      this.kfRemark = kfRemark;
      return this;
    }

    /**
     * 护士评估备注
     */
    public Builder hsRemark(String hsRemark) {
      this.hsRemark = hsRemark;
      return this;
    }

    /**
     * 渠道来源
     */
    public Builder channelId(String channelId) {
      this.channelId = channelId;
      return this;
    }

    /**
     * 预约上门评估时间
     */
    public Builder appointTime(Long appointTime) {
      this.appointTime = appointTime;
      return this;
    }

    /**
     * ADL评估得分
     */
    public Builder scoreADL(Integer scoreADL) {
      this.scoreADL = scoreADL;
      return this;
    }

    /**
     * 预约上门下单时间
     */
    public Builder orderTime(Long orderTime) {
      this.orderTime = orderTime;
      return this;
    }

    /**
     * 指派健康经理时的客服备注
     */
    public Builder managerRemark(String managerRemark) {
      this.managerRemark = managerRemark;
      return this;
    }

    /**
     * 更新时间
     */
    public Builder updateTime(Long updateTime) {
      this.updateTime = updateTime;
      return this;
    }

    /**
     * 领取方式 1 邮寄 2 自行领取
     */
    public Builder insureGetType(Integer insureGetType) {
      this.insureGetType = insureGetType;
      return this;
    }

    /**
     * 代理人昵称
     */
    public Builder agencyName(String agencyName) {
      this.agencyName = agencyName;
      return this;
    }

    /**
     * 代理人关系
     */
    public Builder agencyRelation(String agencyRelation) {
      this.agencyRelation = agencyRelation;
      return this;
    }

    /**
     * 代理人电话
     */
    public Builder agencyPhone(String agencyPhone) {
      this.agencyPhone = agencyPhone;
      return this;
    }

    /**
     * 健康经理adl评估的分数
     */
    public Builder dudaoScoreADL(Integer dudaoScoreADL) {
      this.dudaoScoreADL = dudaoScoreADL;
      return this;
    }

    /**
     * 申请待遇类别 1-生活照料 2-生活照料+医疗护理
     */
    public Builder applyTreatmentType(Integer applyTreatmentType) {
      this.applyTreatmentType = applyTreatmentType;
      return this;
    }

    /**
     * 待遇类型 1-机构护理 2-居家护理
     */
    public Builder treatmentType(Integer treatmentType) {
      this.treatmentType = treatmentType;
      return this;
    }

    /**
     * 评估类别 1-首次评估 2-复检评估 3-变更评估
     */
    public Builder assessType(Integer assessType) {
      this.assessType = assessType;
      return this;
    }

    /**
     * 安全风险评估
     */
    public Builder securityAssess(String securityAssess) {
      this.securityAssess = securityAssess;
      return this;
    }

    /**
     * 健康经理客户状态描述
     */
    public Builder userStatusRemark(String userStatusRemark) {
      this.userStatusRemark = userStatusRemark;
      return this;
    }

    /**
     * 申请人签名
     */
    public Builder userSignPic(String userSignPic) {
      this.userSignPic = userSignPic;
      return this;
    }

    /**
     * 用户委托书
     */
    public Builder entrustPic(String entrustPic) {
      this.entrustPic = entrustPic;
      return this;
    }

    /**
     * 健康经理评估时间
     */
    public Builder managerAssessTime(Long managerAssessTime) {
      this.managerAssessTime = managerAssessTime;
      return this;
    }

    /**
     * 复审上门评估时间
     */
    public Builder loseAppointAssessTime(Long loseAppointAssessTime) {
      this.loseAppointAssessTime = loseAppointAssessTime;
      return this;
    }

    /**
     * 客服评估时间
     */
    public Builder kfTime(Long kfTime) {
      this.kfTime = kfTime;
      return this;
    }

    /**
     * 复审时间
     */
    public Builder loseAppointTime(Long loseAppointTime) {
      this.loseAppointTime = loseAppointTime;
      return this;
    }

    /**
     * 被指派复审护士id
     */
    public Builder loseNurseId(Long loseNurseId) {
      this.loseNurseId = loseNurseId;
      return this;
    }

    /**
     * 被指派复审护士
     */
    public Builder loseNurseName(String loseNurseName) {
      this.loseNurseName = loseNurseName;
      return this;
    }

    /**
     * 病例、诊断等图片
     */
    public Builder caseDiagnosePic(List<String> caseDiagnosePic) {
      Internal.checkElementsNotNull(caseDiagnosePic);
      this.caseDiagnosePic = caseDiagnosePic;
      return this;
    }

    /**
     * 护士初审病情描述
     */
    public Builder hsCasePresentation(String hsCasePresentation) {
      this.hsCasePresentation = hsCasePresentation;
      return this;
    }

    /**
     * 是否中重度智能障碍 0-否 1-是
     */
    public Builder isAmentia(Integer isAmentia) {
      this.isAmentia = isAmentia;
      return this;
    }

    /**
     * 中重度智能障碍照片 如多张，以逗号隔开
     */
    public Builder dysgnosiaePic(List<String> dysgnosiaePic) {
      Internal.checkElementsNotNull(dysgnosiaePic);
      this.dysgnosiaePic = dysgnosiaePic;
      return this;
    }

    /**
     * 护士初审评估情况说明
     */
    public Builder medicalHistory(String medicalHistory) {
      this.medicalHistory = medicalHistory;
      return this;
    }

    /**
     * 被指派护士长id
     */
    public Builder loseNurseLeaderId(Long loseNurseLeaderId) {
      this.loseNurseLeaderId = loseNurseLeaderId;
      return this;
    }

    /**
     * 被指派护士长
     */
    public Builder loseNurseLeaderName(String loseNurseLeaderName) {
      this.loseNurseLeaderName = loseNurseLeaderName;
      return this;
    }

    /**
     * 专家复审评估备注
     */
    public Builder loseRemark(String loseRemark) {
      this.loseRemark = loseRemark;
      return this;
    }

    /**
     * 创建方式  0-客户端app 1-客户端h5 2-企业端（健康经理） 3-saas
     */
    public Builder foundWay(Integer foundWay) {
      this.foundWay = foundWay;
      return this;
    }

    @Override
    public InsureNOModel build() {
      return new InsureNOModel(insureNO, idcard, cityId, userId, contactName, contactPhone, kinsId, kinsName, sex, age, medicareType, medicareNO, height, weight, actAbility, language, memoInfo, addrId, phone, name, province, city, district, building, addrDetail, status, orderId, nurseId, nurseName, managerId, managerName, fee, reviveTime, startTime, endTime, createTime, createStaffId, createStaffName, score, isForce, payType, nurseLeaderId, nurseLeaderName, orderStatus, healthCareNO, scoreMMSE, assessTime, medicalList, kfRemark, hsRemark, channelId, appointTime, scoreADL, orderTime, managerRemark, updateTime, insureGetType, agencyName, agencyRelation, agencyPhone, dudaoScoreADL, applyTreatmentType, treatmentType, assessType, securityAssess, userStatusRemark, userSignPic, entrustPic, managerAssessTime, loseAppointAssessTime, kfTime, loseAppointTime, loseNurseId, loseNurseName, caseDiagnosePic, hsCasePresentation, isAmentia, dysgnosiaePic, medicalHistory, loseNurseLeaderId, loseNurseLeaderName, loseRemark, foundWay, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_InsureNOModel extends ProtoAdapter<InsureNOModel> {
    ProtoAdapter_InsureNOModel() {
      super(FieldEncoding.LENGTH_DELIMITED, InsureNOModel.class);
    }

    @Override
    public int encodedSize(InsureNOModel value) {
      return (value.insureNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.insureNO) : 0)
          + (value.idcard != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.idcard) : 0)
          + (value.cityId != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.cityId) : 0)
          + (value.userId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(4, value.userId) : 0)
          + (value.contactName != null ? ProtoAdapter.STRING.encodedSizeWithTag(5, value.contactName) : 0)
          + (value.contactPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(6, value.contactPhone) : 0)
          + (value.kinsId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(7, value.kinsId) : 0)
          + (value.kinsName != null ? ProtoAdapter.STRING.encodedSizeWithTag(8, value.kinsName) : 0)
          + (value.sex != null ? ProtoAdapter.UINT32.encodedSizeWithTag(9, value.sex) : 0)
          + (value.age != null ? ProtoAdapter.UINT32.encodedSizeWithTag(10, value.age) : 0)
          + (value.medicareType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(11, value.medicareType) : 0)
          + (value.medicareNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(12, value.medicareNO) : 0)
          + (value.height != null ? ProtoAdapter.STRING.encodedSizeWithTag(13, value.height) : 0)
          + (value.weight != null ? ProtoAdapter.STRING.encodedSizeWithTag(14, value.weight) : 0)
          + (value.actAbility != null ? ProtoAdapter.UINT32.encodedSizeWithTag(15, value.actAbility) : 0)
          + ProtoAdapter.UINT32.asRepeated().encodedSizeWithTag(16, value.language)
          + (value.memoInfo != null ? ProtoAdapter.STRING.encodedSizeWithTag(17, value.memoInfo) : 0)
          + (value.addrId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(18, value.addrId) : 0)
          + (value.phone != null ? ProtoAdapter.STRING.encodedSizeWithTag(19, value.phone) : 0)
          + (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(20, value.name) : 0)
          + (value.province != null ? ProtoAdapter.STRING.encodedSizeWithTag(21, value.province) : 0)
          + (value.city != null ? ProtoAdapter.STRING.encodedSizeWithTag(22, value.city) : 0)
          + (value.district != null ? ProtoAdapter.STRING.encodedSizeWithTag(23, value.district) : 0)
          + (value.building != null ? ProtoAdapter.STRING.encodedSizeWithTag(24, value.building) : 0)
          + (value.addrDetail != null ? ProtoAdapter.STRING.encodedSizeWithTag(25, value.addrDetail) : 0)
          + (value.status != null ? ProtoAdapter.UINT32.encodedSizeWithTag(26, value.status) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(27, value.orderId)
          + (value.nurseId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(28, value.nurseId) : 0)
          + (value.nurseName != null ? ProtoAdapter.STRING.encodedSizeWithTag(29, value.nurseName) : 0)
          + (value.managerId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(30, value.managerId) : 0)
          + (value.managerName != null ? ProtoAdapter.STRING.encodedSizeWithTag(31, value.managerName) : 0)
          + (value.fee != null ? ProtoAdapter.UINT32.encodedSizeWithTag(32, value.fee) : 0)
          + (value.reviveTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(33, value.reviveTime) : 0)
          + (value.startTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(34, value.startTime) : 0)
          + (value.endTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(35, value.endTime) : 0)
          + (value.createTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(36, value.createTime) : 0)
          + (value.createStaffId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(40, value.createStaffId) : 0)
          + (value.createStaffName != null ? ProtoAdapter.STRING.encodedSizeWithTag(41, value.createStaffName) : 0)
          + (value.score != null ? ProtoAdapter.INT32.encodedSizeWithTag(42, value.score) : 0)
          + (value.isForce != null ? ProtoAdapter.UINT32.encodedSizeWithTag(43, value.isForce) : 0)
          + (value.payType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(44, value.payType) : 0)
          + (value.nurseLeaderId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(45, value.nurseLeaderId) : 0)
          + (value.nurseLeaderName != null ? ProtoAdapter.STRING.encodedSizeWithTag(46, value.nurseLeaderName) : 0)
          + (value.orderStatus != null ? ProtoAdapter.UINT32.encodedSizeWithTag(47, value.orderStatus) : 0)
          + (value.healthCareNO != null ? ProtoAdapter.STRING.encodedSizeWithTag(48, value.healthCareNO) : 0)
          + (value.scoreMMSE != null ? ProtoAdapter.INT32.encodedSizeWithTag(49, value.scoreMMSE) : 0)
          + (value.assessTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(50, value.assessTime) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(51, value.medicalList)
          + (value.kfRemark != null ? ProtoAdapter.STRING.encodedSizeWithTag(52, value.kfRemark) : 0)
          + (value.hsRemark != null ? ProtoAdapter.STRING.encodedSizeWithTag(53, value.hsRemark) : 0)
          + (value.channelId != null ? ProtoAdapter.STRING.encodedSizeWithTag(54, value.channelId) : 0)
          + (value.appointTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(55, value.appointTime) : 0)
          + (value.scoreADL != null ? ProtoAdapter.INT32.encodedSizeWithTag(56, value.scoreADL) : 0)
          + (value.orderTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(57, value.orderTime) : 0)
          + (value.managerRemark != null ? ProtoAdapter.STRING.encodedSizeWithTag(58, value.managerRemark) : 0)
          + (value.updateTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(59, value.updateTime) : 0)
          + (value.insureGetType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(60, value.insureGetType) : 0)
          + (value.agencyName != null ? ProtoAdapter.STRING.encodedSizeWithTag(61, value.agencyName) : 0)
          + (value.agencyRelation != null ? ProtoAdapter.STRING.encodedSizeWithTag(62, value.agencyRelation) : 0)
          + (value.agencyPhone != null ? ProtoAdapter.STRING.encodedSizeWithTag(63, value.agencyPhone) : 0)
          + (value.dudaoScoreADL != null ? ProtoAdapter.UINT32.encodedSizeWithTag(64, value.dudaoScoreADL) : 0)
          + (value.applyTreatmentType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(65, value.applyTreatmentType) : 0)
          + (value.treatmentType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(66, value.treatmentType) : 0)
          + (value.assessType != null ? ProtoAdapter.UINT32.encodedSizeWithTag(67, value.assessType) : 0)
          + (value.securityAssess != null ? ProtoAdapter.STRING.encodedSizeWithTag(68, value.securityAssess) : 0)
          + (value.userStatusRemark != null ? ProtoAdapter.STRING.encodedSizeWithTag(69, value.userStatusRemark) : 0)
          + (value.userSignPic != null ? ProtoAdapter.STRING.encodedSizeWithTag(70, value.userSignPic) : 0)
          + (value.entrustPic != null ? ProtoAdapter.STRING.encodedSizeWithTag(71, value.entrustPic) : 0)
          + (value.managerAssessTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(72, value.managerAssessTime) : 0)
          + (value.loseAppointAssessTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(73, value.loseAppointAssessTime) : 0)
          + (value.kfTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(74, value.kfTime) : 0)
          + (value.loseAppointTime != null ? ProtoAdapter.UINT64.encodedSizeWithTag(75, value.loseAppointTime) : 0)
          + (value.loseNurseId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(76, value.loseNurseId) : 0)
          + (value.loseNurseName != null ? ProtoAdapter.STRING.encodedSizeWithTag(77, value.loseNurseName) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(78, value.caseDiagnosePic)
          + (value.hsCasePresentation != null ? ProtoAdapter.STRING.encodedSizeWithTag(79, value.hsCasePresentation) : 0)
          + (value.isAmentia != null ? ProtoAdapter.UINT32.encodedSizeWithTag(80, value.isAmentia) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(81, value.dysgnosiaePic)
          + (value.medicalHistory != null ? ProtoAdapter.STRING.encodedSizeWithTag(82, value.medicalHistory) : 0)
          + (value.loseNurseLeaderId != null ? ProtoAdapter.UINT64.encodedSizeWithTag(83, value.loseNurseLeaderId) : 0)
          + (value.loseNurseLeaderName != null ? ProtoAdapter.STRING.encodedSizeWithTag(84, value.loseNurseLeaderName) : 0)
          + (value.loseRemark != null ? ProtoAdapter.STRING.encodedSizeWithTag(85, value.loseRemark) : 0)
          + (value.foundWay != null ? ProtoAdapter.UINT32.encodedSizeWithTag(86, value.foundWay) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, InsureNOModel value) throws IOException {
      if (value.insureNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.insureNO);
      if (value.idcard != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.idcard);
      if (value.cityId != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.cityId);
      if (value.userId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 4, value.userId);
      if (value.contactName != null) ProtoAdapter.STRING.encodeWithTag(writer, 5, value.contactName);
      if (value.contactPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 6, value.contactPhone);
      if (value.kinsId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 7, value.kinsId);
      if (value.kinsName != null) ProtoAdapter.STRING.encodeWithTag(writer, 8, value.kinsName);
      if (value.sex != null) ProtoAdapter.UINT32.encodeWithTag(writer, 9, value.sex);
      if (value.age != null) ProtoAdapter.UINT32.encodeWithTag(writer, 10, value.age);
      if (value.medicareType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 11, value.medicareType);
      if (value.medicareNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 12, value.medicareNO);
      if (value.height != null) ProtoAdapter.STRING.encodeWithTag(writer, 13, value.height);
      if (value.weight != null) ProtoAdapter.STRING.encodeWithTag(writer, 14, value.weight);
      if (value.actAbility != null) ProtoAdapter.UINT32.encodeWithTag(writer, 15, value.actAbility);
      ProtoAdapter.UINT32.asRepeated().encodeWithTag(writer, 16, value.language);
      if (value.memoInfo != null) ProtoAdapter.STRING.encodeWithTag(writer, 17, value.memoInfo);
      if (value.addrId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 18, value.addrId);
      if (value.phone != null) ProtoAdapter.STRING.encodeWithTag(writer, 19, value.phone);
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 20, value.name);
      if (value.province != null) ProtoAdapter.STRING.encodeWithTag(writer, 21, value.province);
      if (value.city != null) ProtoAdapter.STRING.encodeWithTag(writer, 22, value.city);
      if (value.district != null) ProtoAdapter.STRING.encodeWithTag(writer, 23, value.district);
      if (value.building != null) ProtoAdapter.STRING.encodeWithTag(writer, 24, value.building);
      if (value.addrDetail != null) ProtoAdapter.STRING.encodeWithTag(writer, 25, value.addrDetail);
      if (value.status != null) ProtoAdapter.UINT32.encodeWithTag(writer, 26, value.status);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 27, value.orderId);
      if (value.nurseId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 28, value.nurseId);
      if (value.nurseName != null) ProtoAdapter.STRING.encodeWithTag(writer, 29, value.nurseName);
      if (value.managerId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 30, value.managerId);
      if (value.managerName != null) ProtoAdapter.STRING.encodeWithTag(writer, 31, value.managerName);
      if (value.fee != null) ProtoAdapter.UINT32.encodeWithTag(writer, 32, value.fee);
      if (value.reviveTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 33, value.reviveTime);
      if (value.startTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 34, value.startTime);
      if (value.endTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 35, value.endTime);
      if (value.createTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 36, value.createTime);
      if (value.createStaffId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 40, value.createStaffId);
      if (value.createStaffName != null) ProtoAdapter.STRING.encodeWithTag(writer, 41, value.createStaffName);
      if (value.score != null) ProtoAdapter.INT32.encodeWithTag(writer, 42, value.score);
      if (value.isForce != null) ProtoAdapter.UINT32.encodeWithTag(writer, 43, value.isForce);
      if (value.payType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 44, value.payType);
      if (value.nurseLeaderId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 45, value.nurseLeaderId);
      if (value.nurseLeaderName != null) ProtoAdapter.STRING.encodeWithTag(writer, 46, value.nurseLeaderName);
      if (value.orderStatus != null) ProtoAdapter.UINT32.encodeWithTag(writer, 47, value.orderStatus);
      if (value.healthCareNO != null) ProtoAdapter.STRING.encodeWithTag(writer, 48, value.healthCareNO);
      if (value.scoreMMSE != null) ProtoAdapter.INT32.encodeWithTag(writer, 49, value.scoreMMSE);
      if (value.assessTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 50, value.assessTime);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 51, value.medicalList);
      if (value.kfRemark != null) ProtoAdapter.STRING.encodeWithTag(writer, 52, value.kfRemark);
      if (value.hsRemark != null) ProtoAdapter.STRING.encodeWithTag(writer, 53, value.hsRemark);
      if (value.channelId != null) ProtoAdapter.STRING.encodeWithTag(writer, 54, value.channelId);
      if (value.appointTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 55, value.appointTime);
      if (value.scoreADL != null) ProtoAdapter.INT32.encodeWithTag(writer, 56, value.scoreADL);
      if (value.orderTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 57, value.orderTime);
      if (value.managerRemark != null) ProtoAdapter.STRING.encodeWithTag(writer, 58, value.managerRemark);
      if (value.updateTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 59, value.updateTime);
      if (value.insureGetType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 60, value.insureGetType);
      if (value.agencyName != null) ProtoAdapter.STRING.encodeWithTag(writer, 61, value.agencyName);
      if (value.agencyRelation != null) ProtoAdapter.STRING.encodeWithTag(writer, 62, value.agencyRelation);
      if (value.agencyPhone != null) ProtoAdapter.STRING.encodeWithTag(writer, 63, value.agencyPhone);
      if (value.dudaoScoreADL != null) ProtoAdapter.UINT32.encodeWithTag(writer, 64, value.dudaoScoreADL);
      if (value.applyTreatmentType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 65, value.applyTreatmentType);
      if (value.treatmentType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 66, value.treatmentType);
      if (value.assessType != null) ProtoAdapter.UINT32.encodeWithTag(writer, 67, value.assessType);
      if (value.securityAssess != null) ProtoAdapter.STRING.encodeWithTag(writer, 68, value.securityAssess);
      if (value.userStatusRemark != null) ProtoAdapter.STRING.encodeWithTag(writer, 69, value.userStatusRemark);
      if (value.userSignPic != null) ProtoAdapter.STRING.encodeWithTag(writer, 70, value.userSignPic);
      if (value.entrustPic != null) ProtoAdapter.STRING.encodeWithTag(writer, 71, value.entrustPic);
      if (value.managerAssessTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 72, value.managerAssessTime);
      if (value.loseAppointAssessTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 73, value.loseAppointAssessTime);
      if (value.kfTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 74, value.kfTime);
      if (value.loseAppointTime != null) ProtoAdapter.UINT64.encodeWithTag(writer, 75, value.loseAppointTime);
      if (value.loseNurseId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 76, value.loseNurseId);
      if (value.loseNurseName != null) ProtoAdapter.STRING.encodeWithTag(writer, 77, value.loseNurseName);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 78, value.caseDiagnosePic);
      if (value.hsCasePresentation != null) ProtoAdapter.STRING.encodeWithTag(writer, 79, value.hsCasePresentation);
      if (value.isAmentia != null) ProtoAdapter.UINT32.encodeWithTag(writer, 80, value.isAmentia);
      ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 81, value.dysgnosiaePic);
      if (value.medicalHistory != null) ProtoAdapter.STRING.encodeWithTag(writer, 82, value.medicalHistory);
      if (value.loseNurseLeaderId != null) ProtoAdapter.UINT64.encodeWithTag(writer, 83, value.loseNurseLeaderId);
      if (value.loseNurseLeaderName != null) ProtoAdapter.STRING.encodeWithTag(writer, 84, value.loseNurseLeaderName);
      if (value.loseRemark != null) ProtoAdapter.STRING.encodeWithTag(writer, 85, value.loseRemark);
      if (value.foundWay != null) ProtoAdapter.UINT32.encodeWithTag(writer, 86, value.foundWay);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public InsureNOModel decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.insureNO(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.idcard(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.cityId(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.userId(ProtoAdapter.UINT64.decode(reader)); break;
          case 5: builder.contactName(ProtoAdapter.STRING.decode(reader)); break;
          case 6: builder.contactPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 7: builder.kinsId(ProtoAdapter.UINT64.decode(reader)); break;
          case 8: builder.kinsName(ProtoAdapter.STRING.decode(reader)); break;
          case 9: builder.sex(ProtoAdapter.UINT32.decode(reader)); break;
          case 10: builder.age(ProtoAdapter.UINT32.decode(reader)); break;
          case 11: builder.medicareType(ProtoAdapter.UINT32.decode(reader)); break;
          case 12: builder.medicareNO(ProtoAdapter.STRING.decode(reader)); break;
          case 13: builder.height(ProtoAdapter.STRING.decode(reader)); break;
          case 14: builder.weight(ProtoAdapter.STRING.decode(reader)); break;
          case 15: builder.actAbility(ProtoAdapter.UINT32.decode(reader)); break;
          case 16: builder.language.add(ProtoAdapter.UINT32.decode(reader)); break;
          case 17: builder.memoInfo(ProtoAdapter.STRING.decode(reader)); break;
          case 18: builder.addrId(ProtoAdapter.UINT64.decode(reader)); break;
          case 19: builder.phone(ProtoAdapter.STRING.decode(reader)); break;
          case 20: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 21: builder.province(ProtoAdapter.STRING.decode(reader)); break;
          case 22: builder.city(ProtoAdapter.STRING.decode(reader)); break;
          case 23: builder.district(ProtoAdapter.STRING.decode(reader)); break;
          case 24: builder.building(ProtoAdapter.STRING.decode(reader)); break;
          case 25: builder.addrDetail(ProtoAdapter.STRING.decode(reader)); break;
          case 26: builder.status(ProtoAdapter.UINT32.decode(reader)); break;
          case 27: builder.orderId.add(ProtoAdapter.STRING.decode(reader)); break;
          case 28: builder.nurseId(ProtoAdapter.UINT64.decode(reader)); break;
          case 29: builder.nurseName(ProtoAdapter.STRING.decode(reader)); break;
          case 30: builder.managerId(ProtoAdapter.UINT64.decode(reader)); break;
          case 31: builder.managerName(ProtoAdapter.STRING.decode(reader)); break;
          case 32: builder.fee(ProtoAdapter.UINT32.decode(reader)); break;
          case 33: builder.reviveTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 34: builder.startTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 35: builder.endTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 36: builder.createTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 40: builder.createStaffId(ProtoAdapter.UINT64.decode(reader)); break;
          case 41: builder.createStaffName(ProtoAdapter.STRING.decode(reader)); break;
          case 42: builder.score(ProtoAdapter.INT32.decode(reader)); break;
          case 43: builder.isForce(ProtoAdapter.UINT32.decode(reader)); break;
          case 44: builder.payType(ProtoAdapter.UINT32.decode(reader)); break;
          case 45: builder.nurseLeaderId(ProtoAdapter.UINT64.decode(reader)); break;
          case 46: builder.nurseLeaderName(ProtoAdapter.STRING.decode(reader)); break;
          case 47: builder.orderStatus(ProtoAdapter.UINT32.decode(reader)); break;
          case 48: builder.healthCareNO(ProtoAdapter.STRING.decode(reader)); break;
          case 49: builder.scoreMMSE(ProtoAdapter.INT32.decode(reader)); break;
          case 50: builder.assessTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 51: builder.medicalList.add(ProtoAdapter.STRING.decode(reader)); break;
          case 52: builder.kfRemark(ProtoAdapter.STRING.decode(reader)); break;
          case 53: builder.hsRemark(ProtoAdapter.STRING.decode(reader)); break;
          case 54: builder.channelId(ProtoAdapter.STRING.decode(reader)); break;
          case 55: builder.appointTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 56: builder.scoreADL(ProtoAdapter.INT32.decode(reader)); break;
          case 57: builder.orderTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 58: builder.managerRemark(ProtoAdapter.STRING.decode(reader)); break;
          case 59: builder.updateTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 60: builder.insureGetType(ProtoAdapter.UINT32.decode(reader)); break;
          case 61: builder.agencyName(ProtoAdapter.STRING.decode(reader)); break;
          case 62: builder.agencyRelation(ProtoAdapter.STRING.decode(reader)); break;
          case 63: builder.agencyPhone(ProtoAdapter.STRING.decode(reader)); break;
          case 64: builder.dudaoScoreADL(ProtoAdapter.UINT32.decode(reader)); break;
          case 65: builder.applyTreatmentType(ProtoAdapter.UINT32.decode(reader)); break;
          case 66: builder.treatmentType(ProtoAdapter.UINT32.decode(reader)); break;
          case 67: builder.assessType(ProtoAdapter.UINT32.decode(reader)); break;
          case 68: builder.securityAssess(ProtoAdapter.STRING.decode(reader)); break;
          case 69: builder.userStatusRemark(ProtoAdapter.STRING.decode(reader)); break;
          case 70: builder.userSignPic(ProtoAdapter.STRING.decode(reader)); break;
          case 71: builder.entrustPic(ProtoAdapter.STRING.decode(reader)); break;
          case 72: builder.managerAssessTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 73: builder.loseAppointAssessTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 74: builder.kfTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 75: builder.loseAppointTime(ProtoAdapter.UINT64.decode(reader)); break;
          case 76: builder.loseNurseId(ProtoAdapter.UINT64.decode(reader)); break;
          case 77: builder.loseNurseName(ProtoAdapter.STRING.decode(reader)); break;
          case 78: builder.caseDiagnosePic.add(ProtoAdapter.STRING.decode(reader)); break;
          case 79: builder.hsCasePresentation(ProtoAdapter.STRING.decode(reader)); break;
          case 80: builder.isAmentia(ProtoAdapter.UINT32.decode(reader)); break;
          case 81: builder.dysgnosiaePic.add(ProtoAdapter.STRING.decode(reader)); break;
          case 82: builder.medicalHistory(ProtoAdapter.STRING.decode(reader)); break;
          case 83: builder.loseNurseLeaderId(ProtoAdapter.UINT64.decode(reader)); break;
          case 84: builder.loseNurseLeaderName(ProtoAdapter.STRING.decode(reader)); break;
          case 85: builder.loseRemark(ProtoAdapter.STRING.decode(reader)); break;
          case 86: builder.foundWay(ProtoAdapter.UINT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public InsureNOModel redact(InsureNOModel value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
